<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>maven-centeral</title>
    <link href="/2021/05/11/maven-centeral/"/>
    <url>/2021/05/11/maven-centeral/</url>
    
    <content type="html"><![CDATA[<h1 id="如何将JAR包发布到Maven中央仓库？"><a href="#如何将JAR包发布到Maven中央仓库？" class="headerlink" title="如何将JAR包发布到Maven中央仓库？"></a><a href="">如何将JAR包发布到Maven中央仓库？</a></h1><p>将jar包发布到Maven中央仓库(<a href="https://mvnrepository.com/">Maven Central Repository</a>)，这样所有的Java开发者都可以使用</p><p>Maven直接导入依赖,例如</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.github.czy1024/luna-common --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.czy1024<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>luna-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><p>但是，Maven中央仓库并不支持直接发布jar包。我们需要将jar包发布到一些指定的第三方Maven仓库，然后该仓库再将jar包同步到Maven中央仓库。</p><p>其中，最”简单”的方式是通过<a href="https://central.sonatype.org/pages/ossrh-guide.html">Sonatype OSSRH</a>仓库来发布jar包。接下来，我会介绍如何将jar包发布到Sonatype OSSRH。</p><p>本教程所使用的系统配置如下：</p><ul><li>OS：macOS 10.14.2</li><li>JDK：1.8.0_192</li><li>Maven：3.5.4</li></ul><h3 id="1-注册JIRA账号"><a href="#1-注册JIRA账号" class="headerlink" title="1. 注册JIRA账号"></a>1. 注册JIRA账号</h3><p>JIRA是一个项目管理服务，类似于国内的Teambition。Sonatype通过JIRA来管理OSSRH仓库。</p><p>注册地址：<a href="https://issues.sonatype.org/secure/Signup!default.jspa">https://issues.sonatype.org/secure/Signup!default.jspa</a></p><p>需要填写Email, Full Name, Username以及password，其中<strong>Username与Password后面的步骤需要用到</strong>，请记下来。</p><h3 id="2-创建issue"><a href="#2-创建issue" class="headerlink" title="2. 创建issue"></a>2. 创建issue</h3><p>通过在JIRA上创建issue来申请发布新的jar包，Sonatype的工作人员会进行审核，审核不算严格，一般按照要求填写不会有问题。</p><p>创建链接：<a href="https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134">https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134</a></p><p><img src="https://i.loli.net/2021/05/11/AhUElLmIf5CjKqk.png" alt="img"></p><p>创建issue的时候需要填写下面这些信息：</p><ul><li>Summary</li><li>Description</li><li>Group Id</li><li>Project URL</li><li>SCM url</li></ul><p>大家可以参考我申请发布<a href="https://mvnrepository.com/artifact/com.fundebug/fundebug-java">fundebug-java</a>与<a href="https://mvnrepository.com/artifact/com.fundebug/fundebug-spring">fundebug-spring</a>时所填写的内容：<a href="https://issues.sonatype.org/browse/OSSRH-45238">OSSRH-45238</a></p><p>由于时差，前一天创建issue，第二天早上才会有回应。当issue的status变为<strong>RESOLVED</strong>，我们就可以进行下一步操作了。</p><h3 id="3-安装并配置GPG"><a href="#3-安装并配置GPG" class="headerlink" title="3. 安装并配置GPG"></a>3. 安装并配置GPG</h3><p>发布到Maven仓库中的所有文件都要使用GPG签名，以保障完整性。因此，我们需要在本地安装并配置GPG。</p><p><strong>安装GPG</strong></p><p>MacBook安装GPG非常简单，下载并安装<a href="https://gpgtools.org/">GPG Suite</a>即可。</p><p><strong>生成GPG密钥对</strong></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">gpg --gen-key</code></pre></div><p>生成密钥时将需要输入name、email以及password。<strong>password在之后的步骤需要用到</strong>，请记下来。</p><p><strong>上传GPG公钥</strong></p><p>将公钥上传到公共的密钥服务器，这样其他人才可以通过公钥来验证jar包的完整性。</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys CAB4165C69B699D989D2A62BD74A11D3F9F41243</code></pre></div><p>其中<strong>CAB4165C69B699D989D2A62BD74A11D3F9F41243</strong>为密钥的ID，可以通过<strong>gpg –list-keys</strong>命令查看</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">gpg --list-keys/Users/kiwenlau/.gnupg/pubring.kbx----------------------------------pub   dsa2048 <span class="token number">2010</span>-08-19 <span class="token punctuation">[</span>SC<span class="token punctuation">]</span> <span class="token punctuation">[</span>expires: <span class="token number">2020</span>-06-15<span class="token punctuation">]</span>      85E38F69046B44C1EC9FB07B76D78F0500D026C4uid           <span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> GPGTools Team <span class="token operator">&lt;</span>team@gpgtools.org<span class="token operator">></span>sub   elg2048 <span class="token number">2010</span>-08-19 <span class="token punctuation">[</span>E<span class="token punctuation">]</span> <span class="token punctuation">[</span>expires: <span class="token number">2020</span>-06-15<span class="token punctuation">]</span>sub   rsa4096 <span class="token number">2014</span>-04-08 <span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token punctuation">[</span>expires: <span class="token number">2024</span>-01-02<span class="token punctuation">]</span>pub   rsa2048 <span class="token number">2019</span>-01-03 <span class="token punctuation">[</span>SC<span class="token punctuation">]</span> <span class="token punctuation">[</span>expires: <span class="token number">2021</span>-01-02<span class="token punctuation">]</span>      CAB4165C69B699D989D2A62BD74A11D3F9F41243uid           <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span> kiwenlau <span class="token operator">&lt;</span>kiwenlau@gmail.com<span class="token operator">></span>sub   rsa2048 <span class="token number">2019</span>-01-03 <span class="token punctuation">[</span>E<span class="token punctuation">]</span> <span class="token punctuation">[</span>expires: <span class="token number">2021</span>-01-02<span class="token punctuation">]</span></code></pre></div><h3 id="4-配置Maven的setting-xml"><a href="#4-配置Maven的setting-xml" class="headerlink" title="4. 配置Maven的setting.xml"></a>4. 配置Maven的setting.xml</h3><p><a href="https://www.cnblogs.com/fundebug/p/how-to-deploy-jar-to-maven-central-repository.html">setting.xml</a>为Maven的全局配置文件，在MacBook上的位置为**/usr/local/Cellar/maven/3.5.4/libexec/conf/settings.xml<strong>，我们需要将</strong>第1步**配置的Username和Password添加到<code>&lt;servers&gt;&lt;/servers&gt;</code>标签中，这样我们才能将jar包部署到Sonatype OSSRH仓库：</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ossrh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>Fundebug<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>passsword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span></code></pre></div><h3 id="5-配置项目的pom-xml"><a href="#5-配置项目的pom-xml" class="headerlink" title="5. 配置项目的pom.xml"></a>5. 配置项目的pom.xml</h3><p><strong>pom.xml</strong>挺长的。根据Sonatype OSSRH的<a href="https://central.sonatype.org/pages/requirements.html">要求</a>，以下信息都必须配置：</p><ul><li>Supply Javadoc and Sources</li><li>Sign Files with GPG/PGP</li><li>Sufficient Metadata<ul><li>Correct Coordinates</li><li>Project Name, Description and URL</li><li>License Information</li><li>Developer Information</li><li>SCM Information</li></ul></li></ul><p>配置时参考我的pom.xml，根据需要修改即可。</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.czy1024<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>luna-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>luna-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>common is project which contains common utils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://github.com/czy1024/luna-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- github server corresponds to entry in ~/.m2/settings.xml --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>github.global.server</span><span class="token punctuation">></span></span>github_auth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>github.global.server</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--dependencies--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developer</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>luna<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>luna<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">></span></span>iszychen@gmail.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>licenses</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>license</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Apache 2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.apache.org/licenses/LICENSE-2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>license</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>licenses</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--固定地址 是issue给你的地址--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ossrh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ossrh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://s01.oss.sonatype.org/content/repositories/snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scm</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--提交issue的地址 或者项目发布路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://github.com/czy1024/luna-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--git链接--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connection</span><span class="token punctuation">></span></span>scm:git:https://github.com/czy1024/luna-common.git<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>connection</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developerConnection</span><span class="token punctuation">></span></span>scm:git:https://github.com/czy1024/luna-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developerConnection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scm</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ossrh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                    <span class="token comment">&lt;!--这是自动发布的插件--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.sonatype.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nexus-staging-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>serverId</span><span class="token punctuation">></span></span>ossrh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>serverId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nexusUrl</span><span class="token punctuation">></span></span>https://s01.oss.sonatype.org/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nexusUrl</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>autoReleaseAfterClose</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>autoReleaseAfterClose</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-release-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>autoVersionSubmodules</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>autoVersionSubmodules</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>useReleaseProfile</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>useReleaseProfile</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releaseProfiles</span><span class="token punctuation">></span></span>release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releaseProfiles</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>deploy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-gpg-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>sign-artifacts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>verify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>sign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-source-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>attach-sources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar-no-fork<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-javadoc-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javadocExecutable</span><span class="token punctuation">></span></span>$&#123;java.home&#125;/../bin/javadoc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javadocExecutable</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>additionalparam</span><span class="token punctuation">></span></span>-Xdoclint:none<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>additionalparam</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></div><h3 id="6-发布jar包"><a href="#6-发布jar包" class="headerlink" title="6. 发布jar包"></a>6. 发布jar包</h3><p>执行<strong>mvn clean deploy</strong>处理，即可将jar包发布到Sonatype OSSRH仓库。</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">mvn clean deploy -projects fundebug-java,fundebug-spring </code></pre></div><p>我们的项目<a href="https://github.com/Fundebug/fundebug-java-notifier">fundebug-java-notifier</a>含有多个模块，仅需部署fundebug-java与fundebug-spring，因此使用**-projects**选项来指定。</p><p>第一次执行<strong>mvn clean deploy</strong>命令时，需要输入GPG密钥的密码。</p><p><strong>mvn clean deploy</strong>命令执行成功的输出是这样的(部分日志)：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Reactor Summary:<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fundebug-java <span class="token number">0.2</span>.0 <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> SUCCESS <span class="token punctuation">[</span> <span class="token number">22.183</span> s<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fundebug-spring <span class="token number">0.2</span>.0 <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> SUCCESS <span class="token punctuation">[</span> <span class="token number">16.383</span> s<span class="token punctuation">]</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> BUILD SUCCESS<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Total time: <span class="token number">38.728</span> s<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Finished at: <span class="token number">2019</span>-01-12T20:10:16+08:00<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------</code></pre></div><h3 id="7-close并release"><a href="#7-close并release" class="headerlink" title="7. close并release"></a>7. close并release</h3><p><strong>mvn clean deploy</strong>命令执行成功，使用JIRA账号登陆：<a href="https://s01.oss.sonatype.org/content/repositories/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%BD%A0%E6%89%80%E5%8F%91%E5%B8%83%E7%9A%84jar%E5%8C%85%E4%BA%86%EF%BC%9A">https://s01.oss.sonatype.org/content/repositories/，就可以看到你所发布的jar包了：</a></p><p><img src="https://i.loli.net/2021/05/11/NbR75JLqEAhwkxD.png" alt="img"></p><p>选中对于的repository之后，点击箭头所指的<strong>close</strong>，close时会检查发布的构件是否符合<a href="https://central.sonatype.org/pages/requirements.html">要求</a>。若符合要求，则close成功，成功之后点击箭头所指的<strong>release</strong>，即可正式将jar包发布到Sonatype OSSRH仓库。</p><p><strong>release</strong>成功大概2个小时之后，该构件就会同步到<a href="https://mvnrepository.com/">Maven中央仓库</a>：</p><p><img src="https://image.fundebug.com/2019-01-12-fundebug-maven.png" alt="img"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://maven.apache.org/repository/guide-central-repository-upload.html">Guide to uploading artifacts to the Central Repository</a></li><li><a href="https://central.sonatype.org/pages/ossrh-guide.html">OSSRH Guide</a></li><li><a href="https://blog.fundebug.com/2019/01/07/maven-tutorial/">Maven入门教程</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FileUtils</title>
    <link href="/2021/05/10/FileUtils/"/>
    <url>/2021/05/10/FileUtils/</url>
    
    <content type="html"><![CDATA[<div class="table-box"><table border="1" cellpadding="1" cellspacing="1"><tbody><tr><td style="width:616px;"> <p>write(final File file, final CharSequence data, final Charset encoding)</p> <p>write(final File file, final CharSequence data, final Charset encoding, final boolean append)</p> <p>&nbsp;write(final File file, final CharSequence data, final String encoding)</p> <p>write(final File file, final CharSequence data, final String encoding, final boolean append)</p> </td><td> <p>将字符序列写入到文件</p> <p>file：待写入的文件，路径不存在时，自动新建；</p> <p>data：写入的字节内容；</p> <p>append：是否追加；</p> <p>encoding：文件内容编码，<span style="color:#ff0000;">这在网络通信时防止中文乱码非常有用。</span></p> </td></tr><tr><td style="width:616px;"> <p>writeByteArrayToFile(final File file, final byte[] data)</p> <p>writeByteArrayToFile(final File file, final byte[] data, final boolean append)</p> <p>writeByteArrayToFile(final File file, final byte[] data, final int off, final int len)</p> <p>writeByteArrayToFile(final File file, final byte[] data, final int off, final int len,final boolean append)</p> </td><td> <p>将字节数组写入到文件</p> <p>file：待写入的文件，路径不存在时，自动新建；data：写入的字节内容；</p> <p>append：是否追加；off：字节数组写入的起始位置；lem：写入的长度</p> </td></tr><tr><td style="width:616px;"> <p>writeLines(final File file, final Collection&lt;?&gt; lines)</p> <p>writeLines(final File file, final Collection&lt;?&gt; lines, final boolean append)</p> <p>writeLines(final File file, final Collection&lt;?&gt; lines, final String lineEnding)</p> <p>writeLines(final File file, final Collection&lt;?&gt; lines, final String lineEnding,final boolean append)</p> <p>writeLines(final File file, final String encoding, final Collection&lt;?&gt; lines)</p> <p>writeLines(final File file, final String encoding, final Collection&lt;?&gt; lines,final boolean append)</p> <p>writeLines(final File file, final String encoding, final Collection&lt;?&gt; lines,final String lineEnding)</p> <p>writeLines(final File file, final String encoding, final Collection&lt;?&gt; lines,final String lineEnding, final boolean append)</p> </td><td> <p>将集合中的内容一次性写入文件</p> <p>file：待写入的文件，路径不存在时，自动新建；</p> <p>lines：要写入的行，null 表示插入空行</p> <p>append：内容是否追加</p> <p>lineEnding：要使用的行分隔符，null 表示使用系统默认值</p> <p>encoding：要使用的编码，{@code null}表示平台默认值</p> </td></tr><tr><td style="width:616px;"> <p>writeStringToFile(final File file, final String data, final Charset encoding)</p> <p>writeStringToFile(final File file, final String data, final Charset encoding,final boolean append)</p> <p>writeStringToFile(final File file, final String data, final String encoding)</p> <p>writeStringToFile(final File file, final String data, final String encoding,final boolean append)</p> </td><td> <p>将字符串写入到文件</p> <p>file：待写入的文件，路径不存在时，自动新建；</p> <p>data：写入的字节内容；</p> <p>append：是否追加；</p> <p>encoding：文件内容编码</p> </td></tr><tr><td style="width:616px;">byte[] readFileToByteArray(final File file)</td><td>将文件内容读入字节数组。文件始终处于关闭状态。</td></tr><tr><td style="width:616px;"> <p>String readFileToString(final File file, final String encoding)</p> <p>String readFileToString(final File file, final Charset encoding)</p> <p>String readFileToString(final File file)</p> </td><td> <p>将文件的内容读入字符串。文件始终处于关闭状态。</p> <p>&nbsp;file：要读取的文件，不能是 null</p> <p>encoding:要使用的编码，null表示使用平台默认值</p> </td></tr><tr><td style="width:616px;"> <p>List&lt;String&gt; readLines(final File file, final Charset encoding)</p> <p>List&lt;String&gt; readLines(final File file, final String encoding)</p> </td><td> <p>逐行读取文件内容到字符串列表。文件始终处于关闭状态。</p> <p>&nbsp;file：要读取的文件，不能是 null</p> <p>encoding:要使用的编码，null表示使用平台默认值</p> </td></tr><tr><td style="width:616px;"> <p>LineIterator lineIterator(final File file)</p> <p>LineIterator lineIterator(final File file, final String encoding)</p> </td><td> <p>为文件打开一个 InputStream 的行迭代器，完成迭代器之后，应该关闭流以释放内部资源。</p> <p>LineIterator implements Iterator：可以很方便的一行一行读取文件内容</p> </td></tr><tr><td style="width:616px;"> <p>copyDirectory(final File srcDir, final File destDir)</p> <p>copyDirectory(final File srcDir, final File destDir,final boolean preserveFileDate)</p> <p>copyDirectory(final File srcDir, final File destDir,final FileFilter filter)</p> <p>copyDirectory(final File srcDir, final File destDir,final FileFilter filter, final boolean preserveFileDate)</p> </td><td> <p>将指定目录下所有子孙目录和文件复制到指定的目标目录下，如果目标目录不存在，则创建该目录。如果目标目录确实存在，则此方法将源目录与目标目录合并，源目录优先。<span style="color:#f33b45;">注意只能是目录，如果是文件则异常。</span></p> <p>srcDir：源目录，不能为 null</p> <p>destDir：目标目录，不能为 null</p> <p>preserveFileDate：副本的文件日期是否与原件相同</p> <p>filter：要应用的筛选器，即可以细粒度的控制复制哪些文件或者目录，null 表示复制所有目录和文件</p> </td></tr><tr><td style="width:616px;"> <p>copyFile(final File srcFile, final File destFile)</p> <p>copyFile(final File srcFile, final File destFile,final boolean preserveFileDate)</p> <p>copyFile(final File input, final OutputStream output)</p> </td><td> <p>此方法将指定源文件的内容复制到指定的目标文件，如果目标文件不存在，则会创建包含目标文件的目录，如果目标文件存在，则此方法将覆盖它。</p> <p>srcFile：源文件，不能为 null</p> <p>destFile：目标文件，，不能为 null</p> <p>preserveFileDate：副本的文件日期是否与原件相同</p> <p>output：将文件复制到字节输出流，方法在内部使用缓冲输入。</p> </td></tr><tr><td style="width:616px;"> <p>copyFileToDirectory(final File srcFile, final File destDir)</p> <p>copyFileToDirectory(final File srcFile, final File destDir, final boolean preserveFileDate)</p> </td><td> <p>将指定源文件的内容复制到指定目标目录中同名的文件中。如果目标目录不存在，则创建该目录。如果目标文件存在，则此方法将覆盖它。</p> <p>srcFile：源文件，不能为 null</p> <p>destDir：目标目录，不能为 null</p> <p>preserveFileDate：副本的文件日期是否与原件相同</p> </td></tr><tr><td style="width:616px;"> <p>copyInputStreamToFile(final InputStream source, final File destination)</p> </td><td>将字节输入流复制到目标文件中，不存在时自动创建</td></tr><tr><td style="width:616px;"> <p>copyToDirectory(final File src, final File destDir)</p> <p>copyToDirectory(final Iterable&lt;File&gt; srcs, final File destDir)</p> </td><td> <p>将源文件或目录及其所有内容复制到指定目标目录中同名的目录中。如果目标目录不存在，则创建该目录。如果目标目录确实存在，则此方法将源目录与目标目录合并，源目录优先。</p> <p>src：源文件或者目录</p> <p>destDir：目标目录，不能为 null</p> </td></tr><tr><td style="width:616px;"> <p>copyToFile(final InputStream source, final File destination)</p> </td><td> <p>将字节输入流复制打目标文件中，如果目标目录不存在，则将创建该目录。如果目标已存在，则将覆盖该目标。</p> </td></tr><tr><td style="width:616px;"> <p>copyURLToFile(final URL source, final File destination)</p> <p>copyURLToFile(final URL source, final File destination,final int connectionTimeout, final int readTimeout)</p> </td><td> <p>将 URL 网络资源复制到目标文件中，可以用于下载，未设置超时时间时，可能出现永久阻塞</p> <p>connectionTimeout：连接超时时间，单位毫秒</p> <p>readTimeout：读取超时时间，单位毫秒</p> </td></tr><tr><td style="width:616px;"> <p>deleteDirectory(final File directory)</p> </td><td>递归删除目录。注意只能是目录，如果是文件，则异常。</td></tr><tr><td style="width:616px;">deleteQuietly(final File file)</td><td>安全删除文件或者递归删除目录，不会抛出任何异常。</td></tr><tr><td style="width:616px;"> <p>forceDelete(final File file)</p> </td><td>强制删除文件或者递归删除目录</td></tr><tr><td style="width:616px;"> <p>forceMkdir(final File directory)</p> </td><td>生成一个目录，包括任何必需但不存在的父目录。如果已存在具有指定名称的文件，但它不是目录，则会引发IOException。如果目录无法创建（或不存在），则抛出IOException。</td></tr><tr><td style="width:616px;">moveDirectory(final File srcDir, final File destDir)</td><td> <p>移动目录。当目标目录在另一个文件系统上时，执行“复制并删除”。</p> <p>srcDi r要移动的目录</p> <p>&nbsp;destDir 目标目录</p> </td></tr><tr><td style="width:616px;">moveDirectoryToDirectory(final File src, final File destDir, final boolean createDestDir)</td><td> <p>将目录移动到另一个目录。</p> <p>*将目录移动到另一个目录。</p> <p>*@param src要移动的文件</p> <p>*@param destDir目标文件</p> <p>*@param createDestDir如果为true，则创建目标目录，否则如果为false，则抛出IOException</p> </td></tr><tr><td style="width:616px;"> <p>moveFile(final File srcFile, final File destFile)</p> </td><td> <p>移动文件。当目标文件位于另一个文件系统上时，请执行“复制并删除”。</p> </td></tr><tr><td style="width:616px;">moveFileToDirectory(final File srcFile, final File destDir, final boolean createDestDir)</td><td>将文件移动到目录。</td></tr><tr><td style="width:616px;">moveToDirectory(final File src, final File destDir, final boolean createDestDir)</td><td> <p>将文件或目录移动到目标目录。</p> <p>*当目标位于另一个文件系统上时，请执行“复制并删除”。</p> </td></tr><tr><td style="width:616px;">forceMkdirParent(final File file)</td><td>为给定文件生成任何必需但不存在的父目录。如果无法创建父目录，则引发IOException。</td></tr><tr><td style="width:616px;"> <p>File getFile(final File directory, final String... names)</p> <p>File getFile(final String... names)</p> </td><td> <p>获取文件对象</p> <p>directory：父目录</p> <p>names：子孙目录名称</p> </td></tr><tr><td style="width:616px;"> <p>File getTempDirectory()</p> <p>String getTempDirectoryPath()</p> </td><td> <p>返回系统临时目录。底层就是 System.getProperty("java.io.tmpdir")</p> </td></tr><tr><td style="width:616px;"> <p>File getUserDirectory()</p> <p>String getUserDirectoryPath()</p> </td><td>返回用户的主目录，底层就是 System.getProperty("user.home")</td></tr><tr><td style="width:616px;"> <p>boolean isFileNewer(final File file, final Date date)</p> <p>boolean isFileNewer(final File file, final File reference)</p> <p>boolean isFileNewer(final File file, final long timeMillis)</p> </td><td>测试指定文件的最后修改时间是否在指定时间之后，底层是 file.lastModified() &gt; timeMillis</td></tr><tr><td style="width:616px;"> <p>boolean isFileNewer(final File file, final Date date)</p> <p>boolean isFileNewer(final File file, final File reference)</p> <p>boolean isFileNewer(final File file, final long timeMillis)</p> </td><td>测试指定文件的最后修改时间是否在指定时间之前，底层是 file.lastModified() &lt; timeMillis</td></tr><tr><td style="width:616px;"> <p>long sizeOf(final File file)</p> <p>BigInteger sizeOfAsBigInteger(final File file)</p> </td><td> <p>返回指定文件或目录的大小。如果提供的{@link File}是一个常规文件，则返回该文件的长度。如果参数是目录，则递归计算目录的大小。如果某个目录或子目录受到安全限制，则不会包括其大小。</p> <p>请注意，不会检测到溢出，如果发生溢出，则返回值可能为负。</p> </td></tr><tr><td style="width:616px;"> <p>long sizeOfDirectory(final File directory)</p> <p>BigInteger sizeOfDirectoryAsBigInteger(final File directory)</p> </td><td> <p>递归计算目录的大小（所有文件的长度之和）。sizeOfDirectory 只统计目录的大小，单位为 字节，如果是文件则报错。</p> </td></tr><tr><td style="width:616px;"> <p>String byteCountToDisplaySize(final long size)</p> <p>String byteCountToDisplaySize(final BigInteger size)</p> </td><td>将文件字节大小转为可视化的 KB、MB、GB 等形式的字符串，一共有：bytes、KB、MB、GB、TB、PB、EB.</td></tr><tr><td style="width:616px;">boolean contentEquals(final File file1, final File file2)</td><td> <p>比较两个文件的内容以确定它们是否相等。（注意只能是文件，如果是目录，则异常）</p> <p>此方法检查两个文件的长度是否不同，或者它们是否指向同一个文件，然后对内容进行逐字节比较。</p> <p>如果文件的内容相等或两者都不存在，则为true；否则为false</p> </td></tr><tr><td style="width:616px;">File[] convertFileCollectionToFileArray(final Collection&lt;File&gt; files)</td><td>将文件集合转为文件数组，底层就是:files.toArray(new File[files.size()]);</td></tr><tr><td style="width:616px;"> <p>Collection&lt;File&gt; listFiles(final File directory, final String[] extensions, final boolean recursive)</p> <p>Collection&lt;File&gt; listFiles(final File directory, final IOFileFilter fileFilter, final IOFileFilter dirFilter)</p> </td><td> <p>查找给定目录（及其子目录）中与扩展名数组匹配的文件。</p> <p>&nbsp;directory 要搜索的目录</p> <p>&nbsp;extensions：要过滤的扩展数组，例如{“java”、“xml”}，为 null，返回所有文件。</p> <p>&nbsp;ecursive：true 表示搜索所有子目录</p> <p>fileFilter：文件过滤器，IOFileFilter 是一个接口，常用的实现类有：SuffixFileFilter(文件后缀过滤器)、PrefixFileFilter(文件前缀过滤器)、TrueFileFilter(总是返回true的文件过滤器)、FalseFileFilter(总是返回false的文件过滤器)</p> <p>dirFilter：与上面同理</p> </td></tr><tr><td style="width:616px;"> <p>FileInputStream openInputStream(final File file)</p> </td><td> <p>为指定文件打开 FileInputStream，提供比简单调用new FileInputStream（file更好的错误消息。在方法结束时，要么成功打开流，要么抛出异常。</p> <p>*如果文件不存在，则引发异常。</p> <p>*如果文件对象存在但是一个目录，则引发异常。</p> <p>*如果文件存在但无法读取，则引发异常。</p> </td></tr><tr><td style="width:616px;"> <p>FileOutputStream openOutputStream(final File file)</p> <p>FileOutputStream openOutputStream(final File file, final boolean append)</p> </td><td> <p>打开指定文件的{@link FileOutputStream}，检查并创建父目录（如果不存在）。在方法结束时，要么成功打开流，要么抛出异常。</p> <p>*如果父目录不存在，将创建它。</p> <p>*如果文件不存在，将创建该文件。</p> <p>*如果文件对象存在但是一个目录，则引发异常。</p> <p>*如果文件存在但无法写入，则引发异常。</p> <p>*如果无法创建父目录，则引发异常。</p> </td></tr><tr><td style="width:616px;"> <p>File toFile(final URL url)</p> <p>File[] toFiles(final URL[] urls)</p> </td><td>将 URL 转为 File 对象，注意只能对本地文件生成的 URL 才有效，对网络上的 URL 直接返回 null.</td></tr><tr><td style="width:616px;">URL[] toURLs(final File[] files)</td><td>将 File 对象转为 URL 对象。</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>apache</category>
      
    </categories>
    
    
    <tags>
      
      <tag>apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-ssl</title>
    <link href="/2021/05/09/docker-ssl/"/>
    <url>/2021/05/09/docker-ssl/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>仅仅开放远程访问Docker API，这个还不够的，因为会有安全问题。关于这点，Docker有相关的安全机制，参考官方文档<a href="https://docs.docker.com/engine/security/https/">Protect the Docker daemon socket</a>，大致就是：生成证书，用来达到验证客户端身份的目的。</strong></p><p>下面是操作步骤：</p><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="1-创建certs文件夹，用来存放CA私钥和公钥"><a href="#1-创建certs文件夹，用来存放CA私钥和公钥" class="headerlink" title="1. 创建certs文件夹，用来存放CA私钥和公钥"></a>1. 创建certs文件夹，用来存放CA私钥和公钥</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">mkdir -pv &#x2F;etc&#x2F;docker&#x2F;certscd &#x2F;etc&#x2F;docker&#x2F;certs</code></pre></div><h3 id="2-创建密码"><a href="#2-创建密码" class="headerlink" title="2. 创建密码"></a>2. 创建密码</h3><p><strong>需要连续输入两次相同的密码</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">openssl genrsa -aes256 -out ca-key.pem 4096</code></pre></div><h3 id="3-依次输入密码、国家、省、市、组织名称等（除了密码外其他的可以直接回车跳过）"><a href="#3-依次输入密码、国家、省、市、组织名称等（除了密码外其他的可以直接回车跳过）" class="headerlink" title="3. 依次输入密码、国家、省、市、组织名称等（除了密码外其他的可以直接回车跳过）"></a>3. 依次输入密码、国家、省、市、组织名称等（除了密码外其他的可以直接回车跳过）</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</code></pre></div><h3 id="4-生成server-key-pem"><a href="#4-生成server-key-pem" class="headerlink" title="4. 生成server-key.pem"></a>4. 生成server-key.pem</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">openssl genrsa -out server-key.pem 4096</code></pre></div><h3 id="5-生成server-csr（把下面的IP换成你自己服务器外网的IP或者域名）"><a href="#5-生成server-csr（把下面的IP换成你自己服务器外网的IP或者域名）" class="headerlink" title="5. 生成server.csr（把下面的IP换成你自己服务器外网的IP或者域名）"></a>5. 生成server.csr（把下面的IP换成你自己服务器外网的IP或者域名）</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">openssl req -subj &quot;&#x2F;CN&#x3D;123.123.123.123&quot; -sha256 -new -key server-key.pem -out server.csr</code></pre></div><h3 id="6-配置白名单"><a href="#6-配置白名单" class="headerlink" title="6. 配置白名单"></a>6. 配置白名单</h3><p><strong>0.0.0.0表示所有ip都可以连接。（这里需要注意，虽然0.0.0.0可以匹配任意，但是仍需要配置你的外网ip和127.0.0.1，否则客户端会连接不上）</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">echo subjectAltName &#x3D; IP:0.0.0.0,IP:123.123.123.123,IP:127.0.0.1 &gt;&gt; extfile.cnf</code></pre></div><p><strong>或者也可以设置成域名</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">echo subjectAltName &#x3D; DNS:www.example.com,IP:123.123.123.123,IP:127.0.0.1 &gt;&gt; extfile.cnf</code></pre></div><h3 id="7-将Docker守护程序密钥的扩展使用属性设置为仅用于服务器身份验证"><a href="#7-将Docker守护程序密钥的扩展使用属性设置为仅用于服务器身份验证" class="headerlink" title="7. 将Docker守护程序密钥的扩展使用属性设置为仅用于服务器身份验证"></a>7. 将Docker守护程序密钥的扩展使用属性设置为仅用于服务器身份验证</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">echo extendedKeyUsage &#x3D; serverAuth &gt;&gt; extfile.cnf</code></pre></div><h3 id="8-输入之前设置的密码，生成签名证书"><a href="#8-输入之前设置的密码，生成签名证书" class="headerlink" title="8.输入之前设置的密码，生成签名证书"></a>8.输入之前设置的密码，生成签名证书</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem \  -CAcreateserial -out server-cert.pem -extfile extfile.cnf</code></pre></div><h3 id="9、生成供客户端发起远程访问时使用的key-pem"><a href="#9、生成供客户端发起远程访问时使用的key-pem" class="headerlink" title="9、生成供客户端发起远程访问时使用的key.pem"></a>9、生成供客户端发起远程访问时使用的key.pem</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">openssl genrsa -out key.pem 4096</code></pre></div><h3 id="10-生成client-csr（把下面的IP换成你自己服务器外网的IP或者域名）"><a href="#10-生成client-csr（把下面的IP换成你自己服务器外网的IP或者域名）" class="headerlink" title="10. 生成client.csr（把下面的IP换成你自己服务器外网的IP或者域名）"></a>10. 生成client.csr（把下面的IP换成你自己服务器外网的IP或者域名）</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">openssl req -subj &quot;&#x2F;CN&#x3D;123.123.123.123&quot; -new -key key.pem -out client.csr</code></pre></div><h3 id="11-创建扩展配置文件，把密钥设置为客户端身份验证用"><a href="#11-创建扩展配置文件，把密钥设置为客户端身份验证用" class="headerlink" title="11. 创建扩展配置文件，把密钥设置为客户端身份验证用"></a>11. 创建扩展配置文件，把密钥设置为客户端身份验证用</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">echo extendedKeyUsage &#x3D; clientAuth &gt; extfile-client.cnf</code></pre></div><h3 id="12-生成cert-pem，输入前面设置的密码，生成签名证书"><a href="#12-生成cert-pem，输入前面设置的密码，生成签名证书" class="headerlink" title="12. 生成cert.pem，输入前面设置的密码，生成签名证书"></a>12. 生成cert.pem，输入前面设置的密码，生成签名证书</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem \  -CAcreateserial -out cert.pem -extfile extfile-client.cnf</code></pre></div><h3 id="13-删除不需要的配置文件和两个证书的签名请求"><a href="#13-删除不需要的配置文件和两个证书的签名请求" class="headerlink" title="13. 删除不需要的配置文件和两个证书的签名请求"></a>13. 删除不需要的配置文件和两个证书的签名请求</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">rm -v client.csr server.csr extfile.cnf extfile-client.cnf</code></pre></div><h3 id="14-为了防止私钥文件被更改以及被其他用户查看，修改其权限为所有者只读"><a href="#14-为了防止私钥文件被更改以及被其他用户查看，修改其权限为所有者只读" class="headerlink" title="14. 为了防止私钥文件被更改以及被其他用户查看，修改其权限为所有者只读"></a>14. 为了防止私钥文件被更改以及被其他用户查看，修改其权限为所有者只读</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">chmod -v 0400 ca-key.pem key.pem server-key.pem</code></pre></div><h3 id="15-为了防止-公钥文件被更改，修改其权限为只读"><a href="#15-为了防止-公钥文件被更改，修改其权限为只读" class="headerlink" title="15. 为了防止##### 公钥文件被更改，修改其权限为只读"></a>15. 为了防止##### 公钥文件被更改，修改其权限为只读</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">chmod -v 0444 ca.pem server-cert.pem cert.pem</code></pre></div><h3 id="16-修改Docker配置，使Docker守护程序仅接受来自提供CA信任的证书的客户端的连接"><a href="#16-修改Docker配置，使Docker守护程序仅接受来自提供CA信任的证书的客户端的连接" class="headerlink" title="16. 修改Docker配置，使Docker守护程序仅接受来自提供CA信任的证书的客户端的连接"></a>16. 修改Docker配置，使Docker守护程序仅接受来自提供CA信任的证书的客户端的连接</h3><p>拷贝安装包单元文件到/etc，这样就不会因为docker升级而被覆盖</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">cp &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service</code></pre></div><p>在<code>ExecStart=/usr/bin/dockerd-current \</code>下面增加</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">--tlsverify \--tlscacert&#x3D;&#x2F;etc&#x2F;docker&#x2F;certs&#x2F;ca.pem \--tlscert&#x3D;&#x2F;etc&#x2F;docker&#x2F;certs&#x2F;server-cert.pem \--tlskey&#x3D;&#x2F;etc&#x2F;docker&#x2F;certs&#x2F;server-key.pem \-H tcp:&#x2F;&#x2F;0.0.0.0:2376 \-H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock \</code></pre></div><h3 id="17-重新加载daemon并重启docker"><a href="#17-重新加载daemon并重启docker" class="headerlink" title="17. 重新加载daemon并重启docker"></a>17. 重新加载daemon并重启docker</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">systemctl daemon-reloadsystemctl restart docker</code></pre></div><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><h3 id="1-创建证书目录"><a href="#1-创建证书目录" class="headerlink" title="1. 创建证书目录"></a>1. 创建证书目录</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">mkdir -pv ~&#x2F;.docker&#x2F;certs&#x2F;cd ~&#x2F;.docker&#x2F;certs&#x2F;</code></pre></div><h3 id="2-将ca-pem-cert-pem-key-pem这3个文件拷贝到当前目录"><a href="#2-将ca-pem-cert-pem-key-pem这3个文件拷贝到当前目录" class="headerlink" title="2. 将ca.pem cert.pem key.pem这3个文件拷贝到当前目录"></a>2. 将<code>ca.pem</code> <code>cert.pem</code> <code>key.pem</code>这3个文件拷贝到当前目录</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">scp ca.pem .&#x2F;scp cert.pem .&#x2F;scp key.pem .&#x2F;</code></pre></div><h3 id="3-使用docker客户端测试（注意修改证书路径）"><a href="#3-使用docker客户端测试（注意修改证书路径）" class="headerlink" title="3. 使用docker客户端测试（注意修改证书路径）"></a>3. 使用docker客户端测试（注意修改证书路径）</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker --tlsverify \    --tlscacert&#x3D;&#x2F;home&#x2F;alex&#x2F;.docker&#x2F;certs&#x2F;ca.pem \    --tlscert&#x3D;&#x2F;home&#x2F;alex&#x2F;.docker&#x2F;certs&#x2F;cert.pem \    --tlskey&#x3D;&#x2F;home&#x2F;alex&#x2F;.docker&#x2F;certs&#x2F;key.pem \    -H&#x3D;123.123.123.123:2376 version</code></pre></div><h3 id="4-使用curl测试Docker-API"><a href="#4-使用curl测试Docker-API" class="headerlink" title="4. 使用curl测试Docker API"></a>4. 使用curl测试Docker API</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">curl https:&#x2F;&#x2F;123.123.123.123:2376&#x2F;images&#x2F;json \  --cert ~&#x2F;.docker&#x2F;certs&#x2F;cert.pem \  --key ~&#x2F;.docker&#x2F;certs&#x2F;key.pem \  --cacert ~&#x2F;.docker&#x2F;certs&#x2F;ca.pem</code></pre></div><h3 id="5-配置默认远程调用服务器docker服务"><a href="#5-配置默认远程调用服务器docker服务" class="headerlink" title="5. 配置默认远程调用服务器docker服务"></a>5. 配置默认远程调用服务器docker服务</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 配置~&#x2F;.zshrc（或者~&#x2F;.bashrc，根据你的客户端环境而定），在末尾添加以下几行export DOCKER_HOST&#x3D;tcp:&#x2F;&#x2F;123.123.123.123:2376 DOCKER_TLS_VERIFY&#x3D;1export DOCKER_CERT_PATH&#x3D;~&#x2F;.docker&#x2F;certs&#x2F;# 然后让加载到当前会话source .zshrc# 测试docker ps</code></pre></div><h4 id="务必非常小心保管这些key，它们就跟服务器root密码一样重要（众所周知docker是可以进行真实主机提权的）"><a href="#务必非常小心保管这些key，它们就跟服务器root密码一样重要（众所周知docker是可以进行真实主机提权的）" class="headerlink" title="*务必非常小心保管这些key，它们就跟服务器root密码一样重要（众所周知docker是可以进行真实主机提权的）"></a>*<code>务必非常小心保管这些key，它们就跟服务器root密码一样重要（众所周知docker是可以进行真实主机提权的）</code></h4>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim</title>
    <link href="/2021/05/09/vim/"/>
    <url>/2021/05/09/vim/</url>
    
    <content type="html"><![CDATA[<p>Vim最大的特征与最大的困难就是纯键盘操作，所以快速移动光标是Vim的最基本技能。我接触Vim也有四个年头了， 曾经由于项目重构操作频繁而切换到了WebStorm，最近又由<a href="https://harttle.land/2015/11/04/vim-ide.html">WebStorm 切换到了 Vim</a>。 始终感觉光标移动是最大的痛处，同时又能从键盘操作获得极大的快乐。</p><p>下文便开始介绍那些常用的快捷键，先上图！</p><p><img src="https://i.loli.net/2021/05/09/6hnc7U2orVyWPKi.png" alt="vim-key"></p><p>最近感受光标移动技能又一次升级了！来回顾一下我的Vim光标升级过程吧：</p><ol><li>只会上下左右和插入（<code>h</code>, <code>j</code>, <code>k</code>, <code>l</code>, <code>i</code>）。所有操作都由这5个键来完成。这时候用Vim的键盘声因简直像打Dota一样。我大概持续了一个月。</li><li>学会了单词移动和文件头尾（<code>w</code>, <code>b</code>, <code>$</code>, <code>^</code>, <code>gg</code>, <code>G</code>）。这时编辑起来不那么费力了，看起来还可以。这一阶段持续了两年…这两年里我学会了正则查找和替换（<code>/xx</code>, <code>%s/xx/xx/g</code>）。</li><li>能够熟练地滚屏（<code>zz</code>, <code>zt</code>, <code>zb</code>, <code>c-f</code>, <code>c-b</code>）、标识符间来回移动、按屏幕移动光标（<code>H</code>, <code>L</code>, <code>M</code>）、窗格间移动（<code>c-w hjkl</code>）。这是最近一年的水平，同时还学会了宏录制、列编辑等。</li><li>下一阶段：熟悉段落与单词间跳转，熟悉数字的使用。比如对于<code>func(args, count)</code>，我要记住从行首到第二个参数的快捷键是<code>4w</code>。</li></ol><blockquote><p>如果你还没有接触过Vim，可以从<a href="https://harttle.land/2013/11/08/vim-config.html">这里</a>开始。</p></blockquote><h2 id="字符移动"><a href="#字符移动" class="headerlink" title="字符移动"></a>字符移动</h2><p>在Vim的Normal模式里（如果你在Visual模式或者Insert模式，可以按<code>&lt;Esc&gt;</code>回到Normal模式）， 通过<code>h</code>, <code>j</code>, <code>k</code>, <code>l</code>, <code>i</code>来进行左下上右的光标移动。</p><p>在Vim中多数操作都支持数字前缀，比如<code>10j</code>可以向下移动10行。</p><h2 id="单词移动"><a href="#单词移动" class="headerlink" title="单词移动"></a>单词移动</h2><p>多数情况下单词移动比字符移动更加高效。 <code>w</code>移动光标到下一个单词的词首，<code>b</code>移动光标到上一个单词的词首；<code>e</code>移动光标到下一个单词的结尾，<code>ge</code>移动光标到上一个单词的结尾。</p><blockquote><p>单词移动同样支持数字前缀，比如<code>4w</code>可以向后移动4个单词。连续的标点符号算一个单词。</p><p>有趣的是，<code>W</code>, <code>B</code>, <code>E</code>具有同样的功能，只不过它是用空格来分隔单词的，可以跳地更远~</p></blockquote><p><code>^</code>到行首，<code>$</code>到行尾。</p><blockquote><p>拷贝一行：<code>^y$</code>。</p></blockquote><h2 id="相对屏幕移动"><a href="#相对屏幕移动" class="headerlink" title="相对屏幕移动"></a>相对屏幕移动</h2><p>通过<code>c-f</code>向下翻页，<code>c-b</code>向上翻页；<code>c-e</code>逐行下滚，<code>c-y</code>逐行上滚。这在几乎所有Unix软件中都是好使的，比如<code>man</code>和<code>less</code>。 <code>H</code>可以移动到屏幕的首行，<code>L</code>到屏幕尾行，<code>M</code>到屏幕中间。</p><p><code>zt</code>可以置顶当前行，通常用来查看完整的下文，比如函数、类的定义。 <code>zz</code>将当前行移到屏幕中部，<code>zb</code>移到底部。</p><h2 id="文件中移动"><a href="#文件中移动" class="headerlink" title="文件中移动"></a>文件中移动</h2><p>通过<code>:10</code>可以直接移动光标到文件第10行。如果你看不到行号，可以<code>:set number</code>。 <code>gg</code>移到文件首行，<code>G</code>移到尾行。</p><blockquote><p>拷贝整个文件：<code>ggyG</code>。</p></blockquote><p><code>/xx</code>可以查找某个单词<code>xx</code>，<code>n</code>查找下一个，<code>N</code>查找上一个。 在光标跳转之后，可以通过<code>c-o</code>返回上一个光标位置，<code>c-i</code>跳到下一个光标位置。</p><blockquote><p><code>?xx</code>可以反向查找，<code>q/</code>, <code>q?</code>可以列出查找历史。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>util</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tomcat面试题</title>
    <link href="/2021/04/26/tomcat%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2021/04/26/tomcat%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Tomcat面试题"><a href="#Tomcat面试题" class="headerlink" title="Tomcat面试题"></a>Tomcat面试题</h1><h2 id="Tomcat是什么？"><a href="#Tomcat是什么？" class="headerlink" title="Tomcat是什么？"></a>Tomcat是什么？</h2><p>Tomcat 服务器Apache软件基金会项目中的一个核心项目，是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。</p><h2 id="Tomcat的缺省端口是多少，怎么修改"><a href="#Tomcat的缺省端口是多少，怎么修改" class="headerlink" title="Tomcat的缺省端口是多少，怎么修改"></a>Tomcat的缺省端口是多少，怎么修改</h2><ol><li>找到Tomcat目录下的conf文件夹</li><li>进入conf文件夹里面找到server.xml文件</li><li>打开server.xml文件</li><li>在server.xml文件里面找到下列信息</li><li>把Connector标签的8080端口改成你想要的端口</li></ol><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Service</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Catalina<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>                <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>                <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></div><h2 id="tomcat-有哪几种Connector-运行模式-优化-？"><a href="#tomcat-有哪几种Connector-运行模式-优化-？" class="headerlink" title="tomcat 有哪几种Connector 运行模式(优化)？"></a>tomcat 有哪几种Connector 运行模式(优化)？</h2><h3 id="下面，我们先大致了解Tomcat-Connector的三种运行模式。"><a href="#下面，我们先大致了解Tomcat-Connector的三种运行模式。" class="headerlink" title="下面，我们先大致了解Tomcat Connector的三种运行模式。"></a>下面，我们先大致了解Tomcat Connector的三种运行模式。</h3><ul><li><p><strong>BIO：同步并阻塞</strong> 一个线程处理一个请求。缺点：并发量高时，线程数较多，浪费资源。Tomcat7或以下，在Linux系统中默认使用这种方式。</p><p><code>配制项：protocol=”HTTP/1.1”</code></p></li><li><p>NIO：同步非阻塞IO</p><p>利用Java的异步IO处理，可以通过少量的线程处理大量的请求，可以复用同一个线程处理多个connection(多路复用)。</p><p>Tomcat8在Linux系统中默认使用这种方式。</p><p>Tomcat7必须修改Connector配置来启动。</p><p><code>配制项：protocol=”org.apache.coyote.http11.Http11NioProtocol”</code></p><p class="note note-primary">备注：我们常用的Jetty，Mina，ZooKeeper等都是基于java nio实现.</p></li><li><p>APR：即Apache Portable Runtime，从操作系统层面解决io阻塞问题。<strong>AIO方式，</strong>异步非阻塞IO(Java NIO2又叫AIO) 主要与NIO的区别主要是操作系统的<strong>底层区别</strong>.可以做个比喻:比作快递，NIO就是网购后要自己到官网查下快递是否已经到了(可能是多次)，然后自己去取快递；AIO就是快递员送货上门了(不用关注快递进度)。</p><p><code>  配制项：protocol=”org.apache.coyote.http11.Http11AprProtocol”</code></p><p>备注：需在本地服务器安装APR库。Tomcat7或Tomcat8在Win7或以上的系统中启动默认使用这种方式。<strong>Linux如果安装了apr和native，Tomcat直接启动就支持apr。</strong></p></li></ul><h2 id="Tomcat有几种部署方式？"><a href="#Tomcat有几种部署方式？" class="headerlink" title="Tomcat有几种部署方式？"></a>Tomcat有几种部署方式？</h2><ol><li> 利用Tomcat的自动部署。把web应用拷贝到webapps目录。Tomcat在启动时会加载目录下的应用，并将编译后的结果放入work目录下。</li><li>使用Manager App控制台部署。在tomcat主页点击“Manager App” 进入应用管理控制台，可以指定一个web应用的路径或war文件。</li><li>修改conf/server.xml文件部署。增加Context节点可以部署应用。</li><li>增加自定义的Web部署文件。在conf/Catalina/localhost/ 路径下增加 xyz.xml文件，内容是Context节点，可以部署应用。</li></ol><h2 id="tomcat容器是如何创建servlet类实例？用到了什么原理？"><a href="#tomcat容器是如何创建servlet类实例？用到了什么原理？" class="headerlink" title="tomcat容器是如何创建servlet类实例？用到了什么原理？"></a>tomcat容器是如何创建servlet类实例？用到了什么原理？</h2><ol><li>当容器启动时，会读取在webapps目录下所有的web应用中的web.xml文件，然后对 xml文件进行解析，并读取servlet注册信息。</li><li>然后，将每个应用中注册的servlet类都进行加载，并通过<strong>反射</strong>的方式实例化。（<strong>有时候也是在第一次请求时实例化</strong>）<br>在servlet注册时加上1如果为正数，则在一开始就实例化，如果不写或为负数，则第一次请求实例化。</li></ol><h2 id="Tomcat工作模式"><a href="#Tomcat工作模式" class="headerlink" title="Tomcat工作模式"></a>Tomcat工作模式</h2><h4 id="Tomcat作为servlet容器，有三种工作模式："><a href="#Tomcat作为servlet容器，有三种工作模式：" class="headerlink" title="Tomcat作为servlet容器，有三种工作模式："></a>Tomcat作为servlet容器，有三种工作模式：</h4><ol><li>独立的servlet容器，servlet容器是web服务器的一部分；</li><li>进程内的servlet容器，servlet容器是作为web服务器的插件和java容器的实现，web服务器插件在内部地址空间打开一个jvm使得java容器在内部得以运行。反应速度快但伸缩性不足；</li><li>进程外的servlet容器，servlet容器运行于web服务器之外的地址空间，并作为web服务器的插件和java容器实现的结合。反应时间不如进程内但伸缩性和稳定性比进程内优；</li></ol><h4 id="进入Tomcat的请求可以根据Tomcat的工作模式分为如下两类："><a href="#进入Tomcat的请求可以根据Tomcat的工作模式分为如下两类：" class="headerlink" title="进入Tomcat的请求可以根据Tomcat的工作模式分为如下两类："></a>进入Tomcat的请求可以根据Tomcat的工作模式分为如下两类：</h4><ul><li>Tomcat作为应用程序服务器：请求来自于前端的web服务器，这可能是Apache, IIS, Nginx等；</li><li>Tomcat作为独立服务器：请求来自于web浏览器；</li></ul><h2 id="Tomcat顶层架构"><a href="#Tomcat顶层架构" class="headerlink" title="Tomcat顶层架构"></a>Tomcat顶层架构</h2><p>俗话说，站在巨人的肩膀上看世界，一般学习的时候也是先总览一下整体，然后逐个部分个个击破，最后形成思路，了解具体细节，Tomcat的结构很复杂，但是 Tomcat 非常的模块化，找到了 Tomcat 最核心的模块，问题才可以游刃而解，了解了 Tomcat 的整体架构对以后深入了解 Tomcat 来说至关重要！</p><p>先上一张Tomcat的顶层结构图（图A），如下：</p><p><img src="https://i.loli.net/2021/04/26/GptloeuQhCq7RYm.png" alt="在这里插入图片描述"></p><p>Tomcat中最顶层的容器是Server，代表着整个服务器，从上图中可以看出，一个Server可以包含至少一个Service，即可以包含多个Service，用于具体提供服务。</p><p>Service主要包含两个部分：Connector和Container。从上图中可以看出 Tomcat 的心脏就是这两个组件，他们的作用如下：</p><ul><li>Connector用于处理连接相关的事情，并提供Socket与Request请求和Response响应相关的转化;</li><li>Container用于封装和管理Servlet，以及具体处理Request请求；</li></ul><p>一个Tomcat中只有一个Server，一个Server可以包含多个Service，一个Service只有一个Container，但是可以有多个Connectors，这是因为一个服务可以有多个连接，如同时提供Http和Https链接，也可以提供向相同协议不同端口的连接，示意图如下（Engine、Host、Context下面会说到）：</p><p><img src="https://i.loli.net/2021/04/26/5PnQSjFYJAizLdw.png" alt="在这里插入图片描述"></p><p>多个 Connector 和一个 Container 就形成了一个 Service，有了 Service 就可以对外提供服务了，但是 Service 还要一个生存的环境，必须要有人能够给她生命、掌握其生死大权，那就非 Server 莫属了！所以整个 Tomcat 的生命周期由 Server 控制。</p><p>另外，上述的包含关系或者说是父子关系，都可以在tomcat的conf目录下的server.xml配置文件中看出，下图是删除了注释内容之后的一个完整的server.xml配置文件（Tomcat版本为8.0)</p><p><img src="https://i.loli.net/2021/04/26/CTMgcv6imAKLPuo.png" alt="在这里插入图片描述"></p><p>详细的配置文件内容可以到Tomcat官网查看：<a href="http://tomcat.apache.org/tomcat-8.0-doc/index.html">Tomcat配置文件</a></p><p>上边的配置文件，还可以通过下边的一张结构图更清楚的理解：</p><p><img src="https://i.loli.net/2021/04/26/CnLQvkGASFU1zos.png" alt="在这里插入图片描述"></p><p>Server标签设置的端口号为8005，shutdown=”SHUTDOWN” ，表示在8005端口监听“SHUTDOWN”命令，如果接收到了就会关闭Tomcat。一个Server有一个Service，当然还可以进行配置，一个Service有多个Connector，Service左边的内容都属于Container的，Service下边是Connector。</p><h3 id="Tomcat顶层架构小结"><a href="#Tomcat顶层架构小结" class="headerlink" title="Tomcat顶层架构小结"></a>Tomcat顶层架构小结</h3><ol><li>Tomcat中只有一个Server，一个Server可以有多个Service，一个Service可以有多个Connector和一个Container；</li><li>Server掌管着整个Tomcat的生死大权；</li><li>Service 是对外提供服务的；</li><li>Connector用于接受请求并将请求封装成Request和Response来具体处理；</li><li>Container用于封装和管理Servlet，以及具体处理request请求；</li></ol><p>知道了整个Tomcat顶层的分层架构和各个组件之间的关系以及作用，对于绝大多数的开发人员来说Server和Service对我们来说确实很远，而我们开发中绝大部分进行配置的内容是属于Connector和Container的，所以接下来介绍一下Connector和Container。</p><h2 id="Connector和Container的微妙关系"><a href="#Connector和Container的微妙关系" class="headerlink" title="Connector和Container的微妙关系"></a>Connector和Container的微妙关系</h2><p>由上述内容我们大致可以知道一个请求发送到Tomcat之后，首先经过Service然后会交给我们的Connector，Connector用于接收请求并将接收的请求封装为Request和Response来具体处理，Request和Response封装完之后再交由Container进行处理，Container处理完请求之后再返回给Connector，最后在由Connector通过Socket将处理的结果返回给客户端，这样整个请求的就处理完了！</p><p>Connector最底层使用的是Socket来进行连接的，Request和Response是按照HTTP协议来封装的，所以Connector同时需要实现TCP/IP协议和HTTP协议！</p><p>Tomcat既然需要处理请求，那么肯定需要先接收到这个请求，接收请求这个东西我们首先就需要看一下Connector！</p><h4 id="Connector架构分析"><a href="#Connector架构分析" class="headerlink" title="Connector架构分析"></a>Connector架构分析</h4><p>Connector用于接受请求并将请求封装成Request和Response，然后交给Container进行处理，Container处理完之后在交给Connector返回给客户端。因此，我们可以把Connector分为四个方面进行理解：</p><ol><li>Connector如何接受请求的？</li><li>如何将请求封装成Request和Response的？</li><li>封装完之后的Request和Response如何交给Container进行处理的？</li><li>Container处理完之后如何交给Connector并返回给客户端的？</li></ol><p>首先看一下Connector的结构图（图B），如下所示：</p><p><img src="https://i.loli.net/2021/04/26/qbV2pxjX94KJlt5.png" alt="在这里插入图片描述"></p><p>Connector就是使用ProtocolHandler来处理请求的，不同的ProtocolHandler代表不同的连接类型，比如：Http11Protocol使用的是普通Socket来连接的，Http11NioProtocol使用的是NioSocket来连接的。</p><p><strong>其中ProtocolHandler由包含了三个部件：Endpoint、Processor、Adapter。</strong></p><ul><li>Endpoint用来处理底层Socket的网络连接，Processor用于将Endpoint接收到的Socket封装成Request，Adapter用于将Request交给Container进行具体的处理。</li><li>Endpoint由于是处理底层的Socket网络连接，因此Endpoint是用来实现TCP/IP协议的，而Processor用来实现HTTP协议的，Adapter将请求适配到Servlet容器进行具体的处理。</li><li>Endpoint的抽象实现AbstractEndpoint里面定义的Acceptor和AsyncTimeout两个内部类和一个Handler接口。Acceptor用于监听请求，AsyncTimeout用于检查异步Request的超时，Handler用于处理接收到的Socket，在内部调用Processor进行处理。</li></ul><p>至此，我们应该很轻松的回答1，2，3的问题了，但是4还是不知道，那么我们就来看一下Container是如何进行处理的以及处理完之后是如何将处理完的结果返回给Connector的？、</p><h2 id="Container架构分析"><a href="#Container架构分析" class="headerlink" title="Container架构分析"></a>Container架构分析</h2><p>Container用于封装和管理Servlet，以及具体处理Request请求，在Container内部包含了4个子容器，结构图如下（图C）：</p><p><img src="https://i.loli.net/2021/04/26/94m1zfysDnVaMIX.png" alt="在这里插入图片描述"></p><p>4个子容器的作用分别是：</p><ul><li>Engine：引擎，用来管理多个站点，一个Service最多只能有一个Engine；</li><li>Host：代表一个站点，也可以叫虚拟主机，通过配置Host就可以添加站点；</li><li>Context：代表一个应用程序，对应着平时开发的一套程序，或者一个WEB-INF目录以及下面的web.xml文件；</li><li>Wrapper：每一Wrapper封装着一个Servlet；</li></ul><p>下面找一个Tomcat的文件目录对照一下，如下图所示：</p><p><img src="https://i.loli.net/2021/04/26/QNjFL6GBXeJhctT.png" alt="在这里插入图片描述"></p><p>Context和Host的区别是Context表示一个应用，我们的Tomcat中默认的配置下webapps下的每一个文件夹目录都是一个Context，其中ROOT目录中存放着主应用，其他目录存放着子应用，而整个webapps就是一个Host站点。</p><p>我们访问应用Context的时候，如果是ROOT下的则直接使用域名就可以访问，例如：<a href="http://www.baidu.com,如果是host(webapps)下的其他应用,则可以使用www.baidu.com/docs%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%BD%93%E7%84%B6%E9%BB%98%E8%AE%A4%E6%8C%87%E5%AE%9A%E7%9A%84%E6%A0%B9%E5%BA%94%E7%94%A8%EF%BC%88ROOT%EF%BC%89%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E8%AE%BE%E5%AE%9A%E7%9A%84%EF%BC%8C%E5%8F%AA%E4%B8%8D%E8%BF%87Host%E7%AB%99%E7%82%B9%E4%B8%8B%E9%BB%98%E8%AE%A4%E7%9A%84%E4%B8%BB%E5%BA%94%E7%94%A8%E6%98%AFROOT%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E3%80%82">www.baidu.com，如果是Host（webapps）下的其他应用，则可以使用www.baidu.com/docs进行访问，当然默认指定的根应用（ROOT）是可以进行设定的，只不过Host站点下默认的主应用是ROOT目录下的。</a></p><p>看到这里我们知道Container是什么，但是还是不知道Container是如何进行请求处理的以及处理完之后是如何将处理完的结果返回给Connector的？别急！下边就开始探讨一下Container是如何进行处理的！</p><h2 id="Container如何处理请求的？"><a href="#Container如何处理请求的？" class="headerlink" title="Container如何处理请求的？"></a>Container如何处理请求的？</h2><p>Container处理请求是使用Pipeline-Valve管道来处理的！（Valve是阀门之意）Pipeline-Valve是责任链模式，责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理，每个处理者负责做自己相应的处理，处理完之后将处理后的结果返回，再让下一个处理者继续处理。</p><p><img src="https://i.loli.net/2021/04/26/mUiWG3cwVPEC85x.png" alt="在这里插入图片描述"></p><p>但是！Pipeline-Valve使用的责任链模式和普通的责任链模式有些不同！区别主要有以下两点：</p><ul><li>每个Pipeline都有特定的Valve，而且是在管道的最后一个执行，这个Valve叫做BaseValve，BaseValve是不可删除的；</li></ul><ul><li>在上层容器的管道的BaseValve中会调用下层容器的管道。</li></ul><p><strong>我们知道Container包含四个子容器，而这四个子容器对应的BaseValve分别在：StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve。</strong></p><p>Pipeline的处理流程图如下（图D）：</p><p><img src="https://i.loli.net/2021/04/26/2Nj6wxu5ovMmORa.png" alt="在这里插入图片描述"></p><ul><li>Connector在接收到请求后会首先调用最顶层容器的Pipeline来处理，这里的最顶层容器的Pipeline就是EnginePipeline（Engine的管道）；</li><li>在Engine的管道中依次会执行EngineValve1、EngineValve2等等，最后会执行StandardEngineValve，在StandardEngineValve中会调用Host管道，然后再依次执行Host的HostValve1、HostValve2等，最后在执行StandardHostValve，然后再依次调用Context的管道和Wrapper的管道，最后执行到StandardWrapperValve。</li><li>当执行到StandardWrapperValve的时候，会在StandardWrapperValve中创建FilterChain，并调用其doFilter方法来处理请求，这个FilterChain包含着我们配置的与请求相匹配的Filter和Servlet，其doFilter方法会依次调用所有的Filter的doFilter方法和Servlet的service方法，这样请求就得到了处理！</li><li>当所有的Pipeline-Valve都执行完之后，并且处理完了具体的请求，这个时候就可以将返回的结果交给Connector了，Connector在通过Socket的方式将结果返回给客户端。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，我们已经对Tomcat的整体架构有了大致的了解，从图A、B、C、D可以看出来每一个组件的基本要素和作用。我们在脑海里应该有一个大概的轮廓了！如果你面试的时候，让你简单的聊一下Tomcat，上面的内容你能脱口而出吗？当你能够脱口而出的时候，面试官一定会对你刮目相看的！</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql面试题</title>
    <link href="/2021/04/25/mysql%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2021/04/25/mysql%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql-面试题"><a href="#Mysql-面试题" class="headerlink" title="Mysql 面试题"></a>Mysql 面试题</h1><h2 id="为什么用自增列作为主键"><a href="#为什么用自增列作为主键" class="headerlink" title="为什么用自增列作为主键"></a>为什么用自增列作为主键</h2><h4 id="1-如果定义了主键Primary-Key，那么InnoDB会选择主键作为聚簇索引"><a href="#1-如果定义了主键Primary-Key，那么InnoDB会选择主键作为聚簇索引" class="headerlink" title="1. 如果定义了主键Primary Key，那么InnoDB会选择主键作为聚簇索引"></a>1. 如果定义了主键Primary Key，那么InnoDB会选择主键作为聚簇索引</h4><ul><li>如果没有显示定义主键，则InnoDB会选择第一个不包含有NULL值的唯一索引作为主键索引。</li><li>如果也没有这样的唯一索引，则InnoDB会选择内置6字节长度的RowId作为隐含的聚簇索引（RowId随着行记录的写入而主键递增）这个RowId不像Oracle的RowId 那样可引用，它是隐含的。</li></ul><h4 id="2-数据记录本身-存于主索引（一课B-Tree）的叶子结点，这就要求同一叶子结点内（大小为一个内存页或者磁盘页）的各条数据记录按主键顺序存放"><a href="#2-数据记录本身-存于主索引（一课B-Tree）的叶子结点，这就要求同一叶子结点内（大小为一个内存页或者磁盘页）的各条数据记录按主键顺序存放" class="headerlink" title="2. 数据记录本身 存于主索引（一课B+Tree）的叶子结点，这就要求同一叶子结点内（大小为一个内存页或者磁盘页）的各条数据记录按主键顺序存放"></a>2. 数据记录本身 存于主索引（一课B+Tree）的叶子结点，这就要求同一叶子结点内（大小为一个内存页或者磁盘页）的各条数据记录按主键顺序存放</h4><ul><li>因此每当有一条新纪录存入，Mysql会根据其主键将其插入适当的节点和位置，如果页面达到装载因子（InnoDB默认为15/16），则开辟一个新的页（节点）</li></ul><h4 id="3-如果表使用自增主键，那么每次插入新纪录，记录就会顺序的添加到当前索引结点的后续位置，当一页写满，就会自动开辟一个新的页"><a href="#3-如果表使用自增主键，那么每次插入新纪录，记录就会顺序的添加到当前索引结点的后续位置，当一页写满，就会自动开辟一个新的页" class="headerlink" title="3. 如果表使用自增主键，那么每次插入新纪录，记录就会顺序的添加到当前索引结点的后续位置，当一页写满，就会自动开辟一个新的页"></a>3. 如果表使用自增主键，那么每次插入新纪录，记录就会顺序的添加到当前索引结点的后续位置，当一页写满，就会自动开辟一个新的页</h4><h4 id="4-如果使用非自增主键（如身份证号或者学号等），由于每次插入主键的值近似于随机，因此新纪录都要被查到现有索引页中的中间的某个位置"><a href="#4-如果使用非自增主键（如身份证号或者学号等），由于每次插入主键的值近似于随机，因此新纪录都要被查到现有索引页中的中间的某个位置" class="headerlink" title="4. 如果使用非自增主键（如身份证号或者学号等），由于每次插入主键的值近似于随机，因此新纪录都要被查到现有索引页中的中间的某个位置"></a>4. 如果使用非自增主键（如身份证号或者学号等），由于每次插入主键的值近似于随机，因此新纪录都要被查到现有索引页中的中间的某个位置</h4><ul><li>此时Mysql不得不为了将新纪录插到合适的位置而移动数据，甚至目标页面可能已经被写回磁盘上而从缓存中清掉，此时又要从磁盘读回来，这增加了很多开销</li><li>同时频繁移动，分页造成大量的碎片，得到不够紧凑的结构，后续不得不通过Optimize table来重建表并优化填充页面</li></ul><h2 id="为什么使用数据索引能提高效率"><a href="#为什么使用数据索引能提高效率" class="headerlink" title="为什么使用数据索引能提高效率"></a>为什么使用数据索引能提高效率</h2><h4 id="数据索引的存储是有序的"><a href="#数据索引的存储是有序的" class="headerlink" title="数据索引的存储是有序的"></a>数据索引的存储是有序的</h4><h4 id="在有序的情况下，通过索引查询一个数据是无需遍历记录的"><a href="#在有序的情况下，通过索引查询一个数据是无需遍历记录的" class="headerlink" title="在有序的情况下，通过索引查询一个数据是无需遍历记录的"></a>在有序的情况下，通过索引查询一个数据是无需遍历记录的</h4><h4 id="在极端情况下，数据索引的查询效率为二分查询效率，趋近于log2-N"><a href="#在极端情况下，数据索引的查询效率为二分查询效率，趋近于log2-N" class="headerlink" title="在极端情况下，数据索引的查询效率为二分查询效率，趋近于log2(N)"></a>在极端情况下，数据索引的查询效率为二分查询效率，趋近于log2(N)</h4><h2 id="B-树和hash索引的区别"><a href="#B-树和hash索引的区别" class="headerlink" title="B+树和hash索引的区别"></a>B+树和hash索引的区别</h2><p class="note note-primary">B+数是一个平衡的多叉树，从根节点到每个叶子结点的高度差不超过1，而且同层级的结点之间有指针相互链接，是有序的</p><p><img src="https://i.loli.net/2021/04/25/zQsluwtd5VMDjxa.jpg" alt="img"></p><p class="note note-secondary">哈希索引就是采用一定的哈希算法，把键值转换成新的哈希值，检索不需要类似B+数那样从根结点到叶子结点逐级查找，只需要一次哈希算法即可，是无序的</p><p><img src="https://i.loli.net/2021/04/25/PG9aHhrgzRDIblE.jpg" alt="img"></p><h2 id="哈希索引的优势"><a href="#哈希索引的优势" class="headerlink" title="哈希索引的优势"></a>哈希索引的优势</h2><h4 id="等值查询，哈希索引具有绝对优势（前提是没有大量重复键值，如果有大量重复键值时，效率很低，因为存在大量的哈希冲突，需要散列再散列）"><a href="#等值查询，哈希索引具有绝对优势（前提是没有大量重复键值，如果有大量重复键值时，效率很低，因为存在大量的哈希冲突，需要散列再散列）" class="headerlink" title="等值查询，哈希索引具有绝对优势（前提是没有大量重复键值，如果有大量重复键值时，效率很低，因为存在大量的哈希冲突，需要散列再散列）"></a>等值查询，哈希索引具有绝对优势（前提是没有大量重复键值，如果有大量重复键值时，效率很低，因为存在大量的哈希冲突，需要散列再散列）</h4><h2 id="哈希索引不适用的场景"><a href="#哈希索引不适用的场景" class="headerlink" title="哈希索引不适用的场景"></a>哈希索引不适用的场景</h2><ol><li>不支持范围查询</li><li>不支持索引完成排序</li><li>不支持联合索引的最左侧匹配规则</li></ol><h2 id="通常，B-数索引结构适用于大多数场景，像下面这种场景用哈希才更有优势"><a href="#通常，B-数索引结构适用于大多数场景，像下面这种场景用哈希才更有优势" class="headerlink" title="通常，B+数索引结构适用于大多数场景，像下面这种场景用哈希才更有优势"></a>通常，B+数索引结构适用于大多数场景，像下面这种场景用哈希才更有优势</h2><ul><li><p>在HEAP表中，如果存储数据的重复度很低（基数很大），对该列数据以等职查询为主，没有范围查询，没有排序的时候特别适合哈希索引，例如</p></li><li><p># 仅等值查询<code>select id, name from table where name=&#39;李明&#39;; </code></p></li></ul><ol><li>而常用的InnoDB引擎中默认使用的是B+树索引，它会实时监控表上索引的使用情况 。</li><li>如果认为建立哈希索引可以提高查询效率，则自动在内存中的“<strong>自适应哈希索引缓冲区</strong>”建立哈希索引（在InnDB中默认开启自适应哈希索引）。</li><li>通过观察搜素模式，Mysql回利用Index Key的前缀建立哈希索引，如果一个表大部分都在缓冲池中，那么建立一个哈希索引能够加快等值查询。</li></ol><p><strong>注意：在某些工作负载情况下，通过哈希索引查找带来的性能提升远大于额外的监控索引搜索情况和保持哈希表结构带来的开销</strong></p><p><code>但在某些时候，在负载高的清空下，自适应哈希索引中添加的read/write锁也会带来竞争，比如高并发的join操作，like操作，和%通配符操作也不适用于自适应哈希索引，可能要关闭自适应哈希索引</code></p><h2 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h2><ul><li>B树，每个结点都存储key和value，所有结点组成这棵树，并且叶子结点为null，叶子结点不包含任何关键字信息</li></ul><p><img src="https://i.loli.net/2021/04/25/dCzkEw31gAlVy9e.jpg" alt="img"></p><ul><li>B+树，所有的叶子结点包含了全部关键字信息，以及指向含有这些关键字记录的指针，且叶子结点本身依关键字大小自小而大的顺序连接</li><li>所有非终端结点可以看成是索引部分，结点中仅含有其子树根节点中最大（或最小）关键字，（而B树的非终端结点也可能含有需要查找的有效信息）</li></ul><p><img src="https://i.loli.net/2021/04/25/sNupSlGDfm9nFdz.jpg" alt="img"></p><h2 id="为什么说B树比B-树更结合实际应用操作系统的文件索引和数据库索引"><a href="#为什么说B树比B-树更结合实际应用操作系统的文件索引和数据库索引" class="headerlink" title="为什么说B树比B+树更结合实际应用操作系统的文件索引和数据库索引"></a>为什么说B树比B+树更结合实际应用操作系统的文件索引和数据库索引</h2><ol><li>B+树的磁盘读写代价更低</li></ol><div class="note note-success">            <p>B+树内部结点并没有指向关键字具体信息的指针，因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存在同一块盘快中，那么盘快能容纳的关键字数量也就越多，一次性读入内存中需要查找的关键字也就越多，相对就减少了IO读写次数也就降低了</p>          </div><ol start="2"><li>B+树的查询效率更加稳定</li></ol><div class="note note-primary">            <p>由于非终结点的并不最终指向文件内容的结点，而只是叶子结点中关键字的索引，索引任何关键字的查找必须走一条从根节点到叶子结点的路，所有关键字查询的路径长度相同，导致每一个数据的查询效率相当</p>          </div><h2 id="Mysql联合索引"><a href="#Mysql联合索引" class="headerlink" title="Mysql联合索引"></a>Mysql联合索引</h2><h3 id="联合索引是两个或多个列以上的索引"><a href="#联合索引是两个或多个列以上的索引" class="headerlink" title="联合索引是两个或多个列以上的索引"></a>联合索引是两个或多个列以上的索引</h3><p><strong>对于联合索引：</strong>Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部分，但只能是最左侧部分。</p><p>例如索引是key index(a,b,c),可以支持 a，ab，abc，3种组合进行查找，<strong>但不支持bc进行查找</strong>，当最左侧字段是常量引用时，索引就十分有效。</p><h3 id="利用索引中的附加列"><a href="#利用索引中的附加列" class="headerlink" title="利用索引中的附加列"></a>利用索引中的附加列</h3><p><code>可以缩小搜索范围，但使用一个具有两列的索引不同于使用两个单独的索引。</code></p><p><strong>复合索引：</strong> 结构与电话簿类似，人名有姓和名构成，电话簿首先按姓氏进行排序，然后按名字对相同姓氏的人进行排序。</p><p>如果您知道姓，电话簿将非常有用；如果您知道姓和名则更有用，但如果只知道名不知道姓，电话簿将没有用处。</p><h2 id="什么情况下应不建或者少建索引"><a href="#什么情况下应不建或者少建索引" class="headerlink" title="什么情况下应不建或者少建索引"></a>什么情况下应不建或者少建索引</h2><ol><li>表记录太少</li><li>经常插入，删除，修改的表</li><li>数据重复且分布平均的表字段，假如一个表有10万行记录，有一个字段A只有T和F两种值，且每个值的分布概率大约为50%，那么这种表A字段建索引一般不会提高数据库查询速度</li><li>经常和主键一块查询但主字段索引值比较多的表字段</li></ol><h2 id="什么是表分区"><a href="#什么是表分区" class="headerlink" title="什么是表分区"></a>什么是表分区</h2><p>是根据一定规则，将数据库中的表分别分解成多个更小的，容易管理的部分，从逻辑上看，只有一张表，但底层却是多个物理分区组成</p><h2 id="表分区与分表的区别"><a href="#表分区与分表的区别" class="headerlink" title="表分区与分表的区别"></a>表分区与分表的区别</h2><p class="note note-primary">表分区：如上👆，比如用户订单记录根据时间分成多个表</p><p class="note note-danger">分表：根据业务逻辑拆分表，使之在底层和逻辑层都是多个物理分区</p><p><strong>区别：分区从逻辑上来讲只有一张表，而分表则将一张表分解成多个表</strong></p><h2 id="分区表的好处"><a href="#分区表的好处" class="headerlink" title="分区表的好处"></a>分区表的好处</h2><ol><li><strong>存储更多数据</strong>，分区表的数据可以分布在不同的物理设备上，从而高效的利用多个硬件设备，和单磁盘或者文件系统相比，可以存储更多数据</li><li><strong>优化查询</strong>，在where语句中包含分区条件时候，可以只扫描一个或者多个分区表来提高查询效率，涉及sum和count语句时，也可以在多个分区上并行处理，最后汇总结果。</li><li><strong>分区表更容易维护</strong>，例如：想批量删除大量数据，可以清除整个分区</li><li><strong>避免某些特殊的瓶颈</strong>，例如InnoDB的单个索引的互斥访问，发生的锁竞争</li></ol><h2 id="分区表的限制因素"><a href="#分区表的限制因素" class="headerlink" title="分区表的限制因素"></a>分区表的限制因素</h2><ol><li>一个表最多只能由1024个分区</li><li>Mysql5.1中，分区表达式必须是整数，或者返回整数的形式，Mysql5.5中提供了非整数表达式分区的支持</li><li>如果分区字段中有主键或者唯一索引列，那么多有的主键和唯一索引列都必须包含进来。即：<code>分区字段要么不包含主键或者索引列，要么包含全部主键和索引列</code></li><li>分区表中无外键约束</li><li>Mysql的分区适用于一个表的所有数据和索引，不能只对表数据分区而不对索引分区，也不能只对索引分区而不对表分区，也不能只对表的一部分数据分区</li></ol><h2 id="如何判断当前Mysql是否支持分区"><a href="#如何判断当前Mysql是否支持分区" class="headerlink" title="如何判断当前Mysql是否支持分区"></a>如何判断当前Mysql是否支持分区</h2><p><code>命令：show variables like &#39;%partition%&#39;</code></p><p><code>have_partintioning 的值为YES，表示支持分区。</code></p><h2 id="Mysql-支持的分区类型有哪些？"><a href="#Mysql-支持的分区类型有哪些？" class="headerlink" title="Mysql 支持的分区类型有哪些？"></a>Mysql 支持的分区类型有哪些？</h2><ol><li><code>RANGE分区</code>：这种模式允许将数据划分不同范围，例如可以将一个表通过年份划分成若干分区</li><li><code>LIST分区</code>:  这种模式允许通过预定义的列表的值来对数据进行分割。按照List中的值分区，与RANGE的区别是，range分区的区间范围值是连续的。</li><li><code>HASH分区</code>： 中模式允许通过对表的一个或多个列的Hash Key进行计算，最后通过这个Hash码不同数值对应的数据区域进行分区。例如可以建立一个对表主键进行分区的表。</li><li><code>KEY分区</code>：上面Hash模式的一种延伸，这里的Hash Key是MySQL系统产生的。</li></ol><h2 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h2><ol><li>Serializable（串行）可避免脏读，不可重复度，幻读</li><li>Repeatable read（可重复度）可避免脏读，不可重复度</li><li>Read committed（读已提交）可避免脏读</li><li>Read uncommitted（读未提交）最低级别，任何情况都无法保证</li></ol><h2 id="MVVC"><a href="#MVVC" class="headerlink" title="MVVC"></a>MVVC</h2><div class="note note-danger">            <p>Mysql InnoDB 存储引擎，实现的是基于多版本的并发控制协议—MVVC（Multi-Version Concurrency Controller）</p><p><strong>注</strong>：与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control</p><p><strong>MVCC最大的好处</strong>： 读不加锁，读写不冲突，在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能，现阶段几乎所有的RDBMS，都支持MVCC</p>          </div><ol><li>LBCC Lock-Base Concurrency Control，基于锁的并发控制</li><li>MVCC：Multi-Version Concurrency Control，基于多版本的并发控制协议，纯粹基于锁的并发机制并发量低，MVCC是在基于锁的并发控制上的改进，主要是在读写操作上提高了并发</li></ol><h2 id="MVCC并发控制中，读操作可分为两类"><a href="#MVCC并发控制中，读操作可分为两类" class="headerlink" title="MVCC并发控制中，读操作可分为两类"></a>MVCC并发控制中，读操作可分为两类</h2><ol><li>读快照：读取的是记录的可见版本（有可能是历史版本），不用加锁（共享读锁也不加，所以不会阻塞其他事务的写）</li><li>当前读：读取的记录是最新版本，并且，当前返回的记录都会加上锁，保证其他事务不会再并发修改</li></ol><h2 id="行级别锁定的优点"><a href="#行级别锁定的优点" class="headerlink" title="行级别锁定的优点"></a>行级别锁定的优点</h2><ol><li>在许多线程访问不同的行时只存在少量的锁定冲突</li><li>回滚时只有少量的更改</li><li>可以长时间锁定单一的行</li></ol><h2 id="行级别锁定的缺点"><a href="#行级别锁定的缺点" class="headerlink" title="行级别锁定的缺点"></a>行级别锁定的缺点</h2><ol><li>比页级别锁占用更多的内存</li><li>在当表的大部分使用时候，比页级别锁定更慢，因为你必须获取更多的锁</li><li>如果你在大部分数据经常进行GROUP BY操作，或者必须经常扫描整个表，比其他锁定明显慢很多</li><li>用高级别锁定，通过支持不同类型的锁定，你可以很容易的调节应用程序，因为其锁成本小于行级锁定</li></ol><h2 id="Mysql优化"><a href="#Mysql优化" class="headerlink" title="Mysql优化"></a>Mysql优化</h2><ol><li><p>开启查询缓存，优化查询</p></li><li><p>explain你的select查询，这可以帮你分析你的查询语句或是表结构的性能瓶颈。EXPLAIN 的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的</p></li><li><p>当只要一行数据时使用limit 1，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据</p></li><li><p>为搜索字段建索引</p></li><li><p>使用 ENUM 而不是 VARCHAR。如果你有一个字段，比如“性别”，“国家”，“民族”，“状态”或“部门”，你知道这些字段的取值是有限而且固定的，那么，你应该使用 ENUM 而不是VARCHAR</p></li><li><p>Prepared StatementsPrepared Statements很像存储过程，是一种运行在后台的SQL语句集合，我们可以从使用 prepared statements 获得很多好处，无论是性能问题还是安全问题。</p><p>Prepared Statements 可以检查一些你绑定好的变量，这样可以保护你的程序不会受到“SQL注入式”攻击</p></li><li><p>垂直分表</p></li><li><p>选择正确的存储引擎</p></li></ol><h2 id="key-和-index的区别"><a href="#key-和-index的区别" class="headerlink" title="key 和 index的区别"></a>key 和 index的区别</h2><h6 id="key"><a href="#key" class="headerlink" title="key"></a>key</h6><p>数据库的物理结构，有两层意义和作用，一是约束（偏重于约束和规范数据库的结构完整性），二是索引（辅助查询使用），包括primary key，unique，foreign key</p><h6 id="index"><a href="#index" class="headerlink" title="index"></a>index</h6><p>是数据库的物理结构，只是辅助查询，创建时会在另外的表空间（mysql表和innodb表空间）以一个类似目录的结构存储，索引要分类的话，分为前缀索引，全文索引等；</p><h2 id="Mysql中InnoDB和MyISam-的区别"><a href="#Mysql中InnoDB和MyISam-的区别" class="headerlink" title="Mysql中InnoDB和MyISam 的区别"></a>Mysql中InnoDB和MyISam 的区别</h2><ol><li>InnoDB支持事务，MyIsam不支持</li></ol><p><code>对于InnoDB每一条sql语言都默认组装成一个事务，自动提交，这样会影响速度，所以最好把多条SQL语言放在begin和commit中，组成一个事务</code></p><ol start="2"><li><p>InnoDB支持外键，MyIsam 不支持，对于一个包含外键的InnoDB转为MyIsam会失败</p></li><li><p>InnoDB是聚集索引，数据文件和索引绑在一起，必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询主键，然后再通过主键查询数据，因此主键不应该过大，因为主键太大，其他索引也会很大</p><p>MyIsam是非聚簇索引，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的。</p></li><li><p>InnoDB不保存表的具体行树，执行select (*) from table 会扫描全表，而MyIsam用一个变量保存了整个表的行树，执行上面的语句只需要读出变量即可。</p></li><li><p>InnoDB不支持全文索引，而myIsam支持，效率更高。</p></li></ol><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><ol><li>是否需要事务，需要则选择InnoDB，不需要可以考虑MyIsam</li><li>绝大多数只是读取可以考虑MyIsam， 读写频繁用InnoDB</li><li>系统崩溃后，myIsam 恢复更困难</li><li>MySQL5.5版本开始Innodb已经成为Mysql的默认引擎(之前是MyISAM)，说明其优势是有目共睹的，如果你不知道用什么，那就用InnoDB，至少不会差。</li></ol><h2 id="数据库表创建注意事项"><a href="#数据库表创建注意事项" class="headerlink" title="数据库表创建注意事项"></a><strong>数据库表创建注意事项</strong></h2><p><strong>1、字段名及字段配制合理性</strong></p><ul><li>剔除关系不密切的字段；</li><li>字段命名要有规则及相对应的含义（不要一部分英文，一部分拼音，还有类似a.b.c这样不明含义的字段）；</li><li>字段命名尽量不要使用缩写（大多数缩写都不能明确字段含义）；</li><li>字段不要大小写混用（想要具有可读性，多个英文单词可使用下划线形式连接）；</li><li>字段名不要使用保留字或者关键字；</li><li>保持字段名和类型的一致性；</li><li>慎重选择数字类型；</li><li>给文本字段留足余量；</li></ul><p><strong>2、系统特殊字段处理及建成后建议</strong></p><ul><li>添加删除标记（例如操作人、删除时间）；</li><li>建立版本机制；</li></ul><p><strong>3、表结构合理性配置</strong></p><ul><li>多型字段的处理，就是表中是否存在字段能够分解成更小独立的几部分（例如：人可以分为男人和女人）；</li><li>多值字段的处理，可以将表分为三张表，这样使得检索和排序更加有调理，且保证数据的完整性！</li></ul><p><strong>4、其它建议</strong></p><ul><li>对于大数据字段，独立表进行存储，以便影响性能（例如：简介字段）；</li><li>使用varchar类型代替char，因为varchar会动态分配长度，char指定长度是固定的；</li><li>给表创建主键，对于没有主键的表，在查询和索引定义上有一定的影响；</li><li>避免表字段运行为null，建议设置默认值（例如：int类型设置默认值为0）在索引查询上，效率立显；</li><li>建立索引，最好建立在唯一和非空的字段上，建立太多的索引对后期插入、更新都存在一定的影响（考虑实际情况来创建）；</li></ul>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose</title>
    <link href="/2021/04/23/docker-compose/"/>
    <url>/2021/04/23/docker-compose/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-Compose-概述与安装？"><a href="#Docker-Compose-概述与安装？" class="headerlink" title="Docker Compose 概述与安装？"></a>Docker Compose 概述与安装？</h2><ul><li><p>前面我们使用 Docker 的时候，定义 Dockerfile 文件，然后使用 docker build、docker run 等命令操作容器。然而微服务架构的应用系统一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，那么效率之低，维护量之大可想而知</p></li><li><p><strong>使用 Docker Compose 可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具</strong></p></li></ul><h3 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h3><ul><li>安装 Docker Compose 可以通过下面命令自动下载适应版本的 Compose，并为安装脚本添加执行权限</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span> -o /usr/local/bin/docker-compose<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</code></pre></div><ul><li>查看安装是否成功</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">docker-compose -v</code></pre></div><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>打包项目，获得 jar 包 docker-demo-0.0.1-SNAPSHOT.jar</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">mvn clean package</code></pre></div><ul><li>在 jar 包所在路径创建 Dockerfile 文件，添加以下内容</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">FROM java:8VOLUME /tmpADD docker-demo-0.0.1-SNAPSHOT.jar app.jarRUN <span class="token function">bash</span> -c <span class="token string">'touch /app.jar'</span>EXPOSE <span class="token number">9000</span>ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="token string">"-jar"</span>,<span class="token string">"app.jar"</span><span class="token punctuation">]</span></code></pre></div><ul><li>在 jar 包所在路径创建文件 docker-compose.yml，添加以下内容</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'2'</span> <span class="token comment"># 表示该 Docker-Compose 文件使用的是 Version 2 file</span>services:  docker-demo:  <span class="token comment"># 指定服务名称</span>    build: <span class="token builtin class-name">.</span>  <span class="token comment"># 指定 Dockerfile 所在路径</span>    ports:    <span class="token comment"># 指定端口映射</span>      - <span class="token string">"9000:8761"</span></code></pre></div><ul><li>在 docker-compose.yml 所在路径下执行该命令 Compose 就会自动构建镜像并使用镜像启动容器</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">docker-compose updocker-compose up -d  // 后台启动并运行容器</code></pre></div><ul><li>访问 <a href="http://localhost:9000/hello">http://localhost:9000/hello</a> 即可访问微服务接口</li></ul><h2 id="工程、服务、容器"><a href="#工程、服务、容器" class="headerlink" title="工程、服务、容器"></a>工程、服务、容器</h2><ul><li><strong>Docker Compose 将所管理的容器分为三层，分别是工程（project）、服务（service）、容器（container）</strong></li><li><strong>Docker Compose 运行目录下的所有文件（docker-compose.yml）组成一个工程,一个工程包含多个服务，每个服务中定义了容器运行的镜像、参数、依赖，一个服务可包括多个容器实例</strong></li></ul><h3 id="Docker-Compose-常用命令与配置"><a href="#Docker-Compose-常用命令与配置" class="headerlink" title="Docker Compose 常用命令与配置"></a>Docker Compose 常用命令与配置</h3><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ul><li><strong>ps</strong>：列出所有运行容器</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">docker-compose ps</code></pre></div><ul><li><strong>logs</strong>：查看服务日志输出</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">docker-compose logs</code></pre></div><ul><li><strong>port</strong>：打印绑定的公共端口，下面命令可以输出 eureka 服务 8761 端口所绑定的公共端口</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">docker-compose port eureka 8761</code></pre></div><ul><li><strong>build</strong>：构建或者重新构建服务</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">docker-compose build</code></pre></div><ul><li><strong>start</strong>：启动指定服务已存在的容器</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">docker-compose start eureka</code></pre></div><ul><li><strong>stop</strong>：停止已运行的服务的容器</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">docker-compose stop eureka</code></pre></div><ul><li><strong>rm</strong>：删除指定服务的容器</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">docker-compose rm eureka</code></pre></div><ul><li><strong>up</strong>：构建、启动容器</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">docker-compose up</code></pre></div><ul><li><strong>kill</strong>：通过发送 SIGKILL 信号来停止指定服务的容器</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">docker-compose <span class="token function">kill</span> eureka</code></pre></div><ul><li><strong>pull</strong>：下载服务镜像</li><li><strong>scale</strong>：设置指定服务运气容器的个数，以 service=num 形式指定</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">docker-compose scale user&#x3D;3 movie&#x3D;3</code></pre></div><ul><li><strong>run</strong>：在一个服务上执行一个命令</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">docker-compose run web bash</code></pre></div><h3 id="docker-compose-yml-属性"><a href="#docker-compose-yml-属性" class="headerlink" title="docker-compose.yml 属性"></a>docker-compose.yml 属性</h3><ul><li><strong>version</strong>：指定 docker-compose.yml 文件的写法格式</li><li><strong>services</strong>：多个容器集合</li><li><strong>build</strong>：配置构建时，Compose 会利用它自动构建镜像，该值可以是一个路径，也可以是一个对象，用于指定 Dockerfile 参数</li></ul><div class="code-wrapper"><pre class="language-csharp" data-language="csharp"><code class="language-csharp">build<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token operator">/</span>dir<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>build<span class="token punctuation">:</span>    context<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token operator">/</span><span class="token class-name">dir</span>    dockerfile<span class="token punctuation">:</span> <span class="token class-name">Dockerfile</span>    args<span class="token punctuation">:</span>        buildno<span class="token punctuation">:</span> <span class="token number">1</span></code></pre></div><ul><li><strong>command</strong>：覆盖容器启动后默认执行的命令</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">command: bundle <span class="token builtin class-name">exec</span> thin -p <span class="token number">3000</span>----------------------------------command: <span class="token punctuation">[</span>bundle,exec,thin,-p,3000<span class="token punctuation">]</span></code></pre></div><ul><li><strong>dns</strong>：配置 dns 服务器，可以是一个值或列表</li></ul><div class="code-wrapper"><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">dns</span><span class="token punctuation">:</span> 8.8.8.8------------<span class="token property">dns</span><span class="token punctuation">:</span>    - 8.8.8.8    - 9.9.9.9</code></pre></div><ul><li><strong>dns_search</strong>：配置 DNS 搜索域，可以是一个值或列表</li></ul><div class="code-wrapper"><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">dns_search</span><span class="token punctuation">:</span> example.com------------------------<span class="token property">dns_search</span><span class="token punctuation">:</span>    - dc1.example.com    - dc2.example.com</code></pre></div><ul><li><strong>environment</strong>：环境变量配置，可以用数组或字典两种方式</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">environment:    RACK_ENV: development    SHOW: <span class="token string">'ture'</span>-------------------------environment:    - <span class="token assign-left variable">RACK_ENV</span><span class="token operator">=</span>development    - <span class="token assign-left variable">SHOW</span><span class="token operator">=</span>ture</code></pre></div><ul><li><strong>env_file</strong>：从文件中获取环境变量，可以指定一个文件路径或路径列表，其优先级低于 environment 指定的环境变量</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">env_file: .env---------------env_file:    - .&#x2F;common.env</code></pre></div><ul><li><strong>expose</strong>：暴露端口，只将端口暴露给连接的服务，而不暴露给主机</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">expose:    - <span class="token string">"3000"</span>    - <span class="token string">"8000"</span></code></pre></div><ul><li><strong>image</strong>：指定服务所使用的镜像</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">image: java</code></pre></div><ul><li><strong>network_mode</strong>：设置网络模式</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">network_mode: <span class="token string">"bridge"</span>network_mode: <span class="token string">"host"</span>network_mode: <span class="token string">"none"</span>network_mode: <span class="token string">"service:[service name]"</span>network_mode: <span class="token string">"container:[container name/id]"</span></code></pre></div><ul><li><strong>ports</strong>：对外暴露的端口定义，和 expose 对应</li></ul><div class="code-wrapper"><pre class="language-objectivec" data-language="objectivec"><code class="language-objectivec">ports<span class="token punctuation">:</span>   # 暴露端口信息  <span class="token operator">-</span> <span class="token string">"宿主机端口:容器暴露端口"</span><span class="token operator">-</span> <span class="token string">"8763:8763"</span><span class="token operator">-</span> <span class="token string">"8763:8763"</span></code></pre></div><ul><li><strong>links</strong>：将指定容器连接到当前连接，可以设置别名，避免ip方式导致的容器重启动态改变的无法连接情况</li><li>但无法连接到docker-compose 文件以外的容器，因每个compose 均另起一个网段可用external_links</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">links:    <span class="token comment"># 指定服务名称:别名 </span>    - docker-compose-eureka-server:compose-eureka</code></pre></div><ul><li>links代表的是在本文件下互通<br>意思就是在这个yml文件一块启动的容器下互通<br>external_links是只要是同一个docker启动的都可以互通</li><li>external_links</li></ul><div class="code-wrapper"><pre class="language-csharp" data-language="csharp"><code class="language-csharp">external_links<span class="token punctuation">:</span>  <span class="token operator">-</span> redis<span class="token punctuation">:</span>redis #可以用redis这个域名访问redis服务  <span class="token operator">-</span> mongo<span class="token punctuation">:</span>mongo #可以用mongo这个域名访问mongo服务  <span class="token operator">-</span> mysql<span class="token punctuation">:</span>db #可以用db这个域名访问mysql服务  <span class="token operator">-</span> rabbitmq<span class="token punctuation">:</span>rabbit #可以用rabbit这个域名访问rabbitmq服务</code></pre></div><ul><li><strong>volumes</strong>：卷挂载路径</li></ul><div class="code-wrapper"><pre class="language-csharp" data-language="csharp"><code class="language-csharp">volumes<span class="token punctuation">:</span>  <span class="token operator">-</span> <span class="token operator">/</span>lib  <span class="token operator">-</span> <span class="token operator">/</span><span class="token keyword">var</span></code></pre></div><ul><li><strong>logs</strong>：日志输出信息</li></ul><div class="code-wrapper"><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">--</span>no<span class="token operator">-</span>color          单色输出，不显示其他颜<span class="token punctuation">.</span><span class="token operator">-</span>f<span class="token punctuation">,</span> <span class="token operator">--</span>follow        跟踪日志输出，就是可以实时查看日志<span class="token operator">-</span>t<span class="token punctuation">,</span> <span class="token operator">--</span>timestamps    显示时间戳<span class="token operator">--</span>tail              从日志的结尾显示，<span class="token operator">--</span>tail<span class="token operator">=</span><span class="token number">200</span></code></pre></div><h2 id="Docker-Compose-其它"><a href="#Docker-Compose-其它" class="headerlink" title="Docker Compose 其它"></a>Docker Compose 其它</h2><h3 id="更新容器"><a href="#更新容器" class="headerlink" title="更新容器"></a>更新容器</h3><ul><li>当服务的配置发生更改时，可使用 docker-compose up 命令更新配置</li><li>此时，Compose 会删除旧容器并创建新容器，新容器会以不同的 IP 地址加入网络，名称保持不变，任何指向旧容起的连接都会被关闭，重新找到新容器并连接上去</li></ul><h3 id="links"><a href="#links" class="headerlink" title="links"></a>links</h3><ul><li>服务之间可以使用服务名称相互访问，links 允许定义一个别名，从而使用该别名访问其它服务</li></ul><div class="code-wrapper"><pre class="language-csharp" data-language="csharp"><code class="language-csharp">version<span class="token punctuation">:</span> <span class="token string character">'2'</span>services<span class="token punctuation">:</span>    web<span class="token punctuation">:</span>        build<span class="token punctuation">:</span> <span class="token punctuation">.</span>        links<span class="token punctuation">:</span>            <span class="token operator">-</span> <span class="token string">"db:database"</span>    db<span class="token punctuation">:</span>        image<span class="token punctuation">:</span> postgres</code></pre></div><ul><li>这样 Web 服务就可以使用 db 或 database 作为 hostname 访问 db 服务了</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><strong>docker-compose-env.yml 使用 docker-compose -f docker-compose-env.yml  up -d 后台运行</strong></p><div class="code-wrapper"><pre class="language-csharp" data-language="csharp"><code class="language-csharp">version<span class="token punctuation">:</span> <span class="token string character">'3'</span>services<span class="token punctuation">:</span>  mysql<span class="token punctuation">:</span>    image<span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>    container_name<span class="token punctuation">:</span> <span class="token class-name">mysql</span>    command<span class="token punctuation">:</span> mysqld <span class="token operator">--</span>character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">-</span>server<span class="token operator">=</span>utf8mb4 <span class="token operator">--</span>collation<span class="token operator">-</span>server<span class="token operator">=</span><span class="token class-name">utf8mb4_unicode_ci</span>    restart<span class="token punctuation">:</span> <span class="token class-name">always</span>    environment<span class="token punctuation">:</span>      MYSQL_ROOT_PASSWORD<span class="token punctuation">:</span> root #设置root帐号密码    ports<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token number">3306</span><span class="token punctuation">:</span><span class="token number">3306</span>    volumes<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>mysql<span class="token operator">/</span>data<span class="token operator">/</span>db<span class="token punctuation">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql #数据文件挂载      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>mysql<span class="token operator">/</span>data<span class="token operator">/</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>conf<span class="token punctuation">.</span>d #配置文件挂载      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>mysql<span class="token operator">/</span>log<span class="token punctuation">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>mysql #日志文件挂载  redis<span class="token punctuation">:</span>    image<span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">5</span>    container_name<span class="token punctuation">:</span> <span class="token class-name">redis</span>    command<span class="token punctuation">:</span> redis<span class="token operator">-</span>server <span class="token operator">--</span>appendonly <span class="token class-name">yes</span>    volumes<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>redis<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data #数据文件挂载    ports<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token number">6379</span><span class="token punctuation">:</span><span class="token number">6379</span>  nginx<span class="token punctuation">:</span>    image<span class="token punctuation">:</span> nginx<span class="token punctuation">:</span><span class="token number">1.10</span>    container_name<span class="token punctuation">:</span> <span class="token class-name">nginx</span>    volumes<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>nginx<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf #配置文件挂载      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html #静态资源根目录挂载      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>nginx<span class="token operator">/</span>log<span class="token punctuation">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>nginx #日志文件挂载    ports<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token number">80</span><span class="token punctuation">:</span><span class="token number">80</span>  rabbitmq<span class="token punctuation">:</span>    image<span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span><span class="token number">3.7</span><span class="token number">.15</span><span class="token operator">-</span><span class="token class-name">management</span>    container_name<span class="token punctuation">:</span> <span class="token class-name">rabbitmq</span>    volumes<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>rabbitmq<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>rabbitmq #数据文件挂载      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>rabbitmq<span class="token operator">/</span>log<span class="token punctuation">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>rabbitmq #日志文件挂载    ports<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token number">5672</span><span class="token punctuation">:</span><span class="token number">5672</span>      <span class="token operator">-</span> <span class="token number">15672</span><span class="token punctuation">:</span><span class="token number">15672</span>  elasticsearch<span class="token punctuation">:</span>    image<span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span><span class="token number">7.6</span><span class="token number">.2</span>    container_name<span class="token punctuation">:</span> <span class="token class-name">elasticsearch</span>    environment<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token string">"cluster.name=elasticsearch"</span> <span class="token preprocessor property">#设置集群名称为elasticsearch</span>      <span class="token operator">-</span> <span class="token string">"discovery.type=single-node"</span> <span class="token preprocessor property">#以单一节点模式启动</span>      <span class="token operator">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span> <span class="token preprocessor property">#设置使用jvm内存大小</span>    volumes<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>elasticsearch<span class="token operator">/</span>plugins<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>elasticsearch<span class="token operator">/</span>plugins #插件文件挂载      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>elasticsearch<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>elasticsearch<span class="token operator">/</span>data #数据文件挂载    ports<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token number">9200</span><span class="token punctuation">:</span><span class="token number">9200</span>      <span class="token operator">-</span> <span class="token number">9300</span><span class="token punctuation">:</span><span class="token number">9300</span>  logstash<span class="token punctuation">:</span>    image<span class="token punctuation">:</span> logstash<span class="token punctuation">:</span><span class="token number">7.6</span><span class="token number">.2</span>    container_name<span class="token punctuation">:</span> <span class="token class-name">logstash</span>    environment<span class="token punctuation">:</span>      <span class="token operator">-</span> TZ<span class="token operator">=</span>Asia<span class="token operator">/</span><span class="token class-name">Shanghai</span>    volumes<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>logstash<span class="token operator">/</span>logstash<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>logstash<span class="token operator">/</span>pipeline<span class="token operator">/</span>logstash<span class="token punctuation">.</span>conf #挂载logstash的配置文件    depends_on<span class="token punctuation">:</span>      <span class="token operator">-</span> elasticsearch #kibana在elasticsearch启动之后再启动    links<span class="token punctuation">:</span>      <span class="token operator">-</span> elasticsearch<span class="token punctuation">:</span>es #可以用es这个域名访问elasticsearch服务    ports<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token number">4560</span><span class="token punctuation">:</span><span class="token number">4560</span>      <span class="token operator">-</span> <span class="token number">4561</span><span class="token punctuation">:</span><span class="token number">4561</span>      <span class="token operator">-</span> <span class="token number">4562</span><span class="token punctuation">:</span><span class="token number">4562</span>      <span class="token operator">-</span> <span class="token number">4563</span><span class="token punctuation">:</span><span class="token number">4563</span>  kibana<span class="token punctuation">:</span>    image<span class="token punctuation">:</span> kibana<span class="token punctuation">:</span><span class="token number">7.6</span><span class="token number">.2</span>    container_name<span class="token punctuation">:</span> <span class="token class-name">kibana</span>    links<span class="token punctuation">:</span>      <span class="token operator">-</span> elasticsearch<span class="token punctuation">:</span>es #可以用es这个域名访问elasticsearch服务    depends_on<span class="token punctuation">:</span>      <span class="token operator">-</span> elasticsearch #kibana在elasticsearch启动之后再启动    environment<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token string">"elasticsearch.hosts=http://es:9200"</span> <span class="token preprocessor property">#设置访问elasticsearch的地址</span>    ports<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token number">5601</span><span class="token punctuation">:</span><span class="token number">5601</span>  mongo<span class="token punctuation">:</span>    image<span class="token punctuation">:</span> mongo<span class="token punctuation">:</span><span class="token number">4.2</span><span class="token number">.5</span>    container_name<span class="token punctuation">:</span> <span class="token class-name">mongo</span>    volumes<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token operator">/</span>mydata<span class="token operator">/</span>mongo<span class="token operator">/</span>db<span class="token punctuation">:</span><span class="token operator">/</span>data<span class="token operator">/</span>db #数据文件挂载    ports<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token number">27017</span><span class="token punctuation">:</span><span class="token number">27017</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac-launchctl</title>
    <link href="/2021/04/20/mac-launchctl/"/>
    <url>/2021/04/20/mac-launchctl/</url>
    
    <content type="html"><![CDATA[<h1 id="MAC设置Launchctl开机启动"><a href="#MAC设置Launchctl开机启动" class="headerlink" title="MAC设置Launchctl开机启动"></a>MAC设置Launchctl开机启动</h1><h3 id="主要目录"><a href="#主要目录" class="headerlink" title="主要目录"></a>主要目录</h3><h4 id="mac将使用launchctl做为开机启动工具，launchctl将根据plist文件的信息来启动任务。plist脚本一般存放在以下目录："><a href="#mac将使用launchctl做为开机启动工具，launchctl将根据plist文件的信息来启动任务。plist脚本一般存放在以下目录：" class="headerlink" title="mac将使用launchctl做为开机启动工具，launchctl将根据plist文件的信息来启动任务。plist脚本一般存放在以下目录："></a>mac将使用launchctl做为开机启动工具，launchctl将根据plist文件的信息来启动任务。plist脚本一般存放在以下目录：</h4><ul><li>l /Library/LaunchDaemons –&gt;只要系统启动了，哪怕用户不登陆系统也会被执行</li><li>l /Library/LaunchAgents –&gt;当用户登陆系统后才会被执行</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">~/Library/LaunchAgents 由用户自己定义的任务项/Library/LaunchAgents 由管理员为用户定义的任务项/Library/LaunchDaemons 由管理员定义的守护进程任务项/System/Library/LaunchAgents 由Mac OS X为用户定义的任务项/System/Library/LaunchDaemons 由Mac OS X定义的守护进程任务项</code></pre></div><h3 id="launchctl-常用命令："><a href="#launchctl-常用命令：" class="headerlink" title="launchctl 常用命令："></a>launchctl 常用命令：</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 加载任务, -w选项会将plist文件中无效的key覆盖掉，建议加上</span>$ launchctl load -w com.demo.plist<span class="token comment"># 删除任务</span>$ launchctl unload -w com.demo.plist<span class="token comment"># 查看任务列表, 使用 grep '任务部分名字' 过滤</span>$ launchctl list <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'com.demo'</span><span class="token comment"># 开始任务</span>$ launchctl start  com.demo.plist<span class="token comment"># 结束任务</span>$ launchctl stop   com.demo.plist</code></pre></div><p>如果任务呗修改了，那么必须先unload，然后重新loadstart可以测试任务，这个是立即行，不管时间到了没有执行start和unload前，任务必须先load过，否则报错stop可以停止任务</p><h5 id="plist支持两种方式配置执行时间："><a href="#plist支持两种方式配置执行时间：" class="headerlink" title="plist支持两种方式配置执行时间："></a>plist支持两种方式配置执行时间：</h5><ul><li>StartInterval: 指定脚本每间隔多长时间（单位：秒）执行一次</li><li>StartCalendarInterval: 可以指定脚本在多少分钟、小时、天、星期几、月时间上执行，类似如crontab的中的设置，包含下面的 key:</li></ul><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml">Minute <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>The minute on which this job will be run.Hour <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>The hour on which this job will be run.Day <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>The day on which this job will be run.Weekday <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>The weekday on which this job will be run (0 and 7 are Sunday).Month <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>The month on which this job will be run.</code></pre></div><h3 id="plist部分参数说明："><a href="#plist部分参数说明：" class="headerlink" title="plist部分参数说明："></a>plist部分参数说明：</h3><ol><li>Label：对应的需要保证全局唯一性；</li><li>Program：要运行的程序；</li><li>ProgramArguments：命令语句</li><li>StartCalendarInterval：运行的时间，单个时间点使用dict，多个时间点使用 array</li><li>StartInterval：时间间隔，与StartCalendarInterval使用其一，单位为秒</li><li>StandardInPath、StandardOutPath、StandardErrorPath：标准的输入输出错误文件，这里建议不要使用 .log 作为后缀，会打不开里面的信息。</li></ol><h4 id="定时启动任务时，如果涉及到网络，但是电脑处于睡眠状态，是执行不了的，这个时候，可以定时的启动屏幕就好了。"><a href="#定时启动任务时，如果涉及到网络，但是电脑处于睡眠状态，是执行不了的，这个时候，可以定时的启动屏幕就好了。" class="headerlink" title="定时启动任务时，如果涉及到网络，但是电脑处于睡眠状态，是执行不了的，这个时候，可以定时的启动屏幕就好了。"></a>定时启动任务时，如果涉及到网络，但是电脑处于睡眠状态，是执行不了的，这个时候，可以定时的启动屏幕就好了。</h4><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">plist</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="token string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plist</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KeepAlive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>SuccessfulExit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>false</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Label<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>frpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>ProgramArguments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/Users/luna_mac/Documents/luna/frp/frpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/Users/luna_mac/Documents/luna/frp/frpc.ini<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>StandardErrorPath<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/tmp/shelltask.err<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>StandardOutPath<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/tmp/shelltask.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>WorkingDirectory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/Users/luna_mac/Documents/luna/frp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plist</span><span class="token punctuation">></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis 面试题</title>
    <link href="/2021/04/19/mybatis%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2021/04/19/mybatis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><h3 id="MyBatis是什么？"><a href="#MyBatis是什么？" class="headerlink" title="MyBatis是什么？"></a>MyBatis是什么？</h3><p>MyBatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h3 id="ORM是什么"><a href="#ORM是什么" class="headerlink" title="ORM是什么"></a>ORM是什么</h3><p>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单Java对象（POJO）的映射关系的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。</p><p>为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？<br>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。</p><p>而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。</p><h3 id="传统JDBC存在的问题"><a href="#传统JDBC存在的问题" class="headerlink" title="传统JDBC存在的问题"></a>传统JDBC存在的问题</h3><ul><li>频繁创建数据连接对象，释放，容易造成资源浪费，影响系统性能。可以使用连接池解决，但需要JDBC自实现</li><li>sql语句定义，参数设置，结果集处理存在硬编码，实际项目中sql语句变化可能性较大，一旦发生变化，需要修改JAVA代码，系统需要重新编译，重新发布。</li><li>使用preparesStatement向占位符发送参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还需要修改代码，处理麻烦，如果映射成JAVA对象会比较方便</li></ul><h3 id="JDBC编程有哪些不足之处，Mybatis如何解决"><a href="#JDBC编程有哪些不足之处，Mybatis如何解决" class="headerlink" title="JDBC编程有哪些不足之处，Mybatis如何解决"></a>JDBC编程有哪些不足之处，Mybatis如何解决</h3><ol><li><p>数据库链接创建，释放造成资源浪费，从而影响性能，如果使用数据库连接池可解决</p><p class="note note-primary">解决：在mybatis-config.xml 中配置数据库连接池，使用连接池管理数据库连接</p></li><li><p>Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。</p><p class="note note-secondary">解决：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。</p></li><li><p>向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。</p><p class="note note-warning">解决： Mybatis自动将java对象映射至sql语句。</p></li><li><p>对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。</p><p class="note note-light">解决：Mybatis自动将sql执行结果映射至java对象。</p></li></ol><h3 id="Mybatis-优缺点"><a href="#Mybatis-优缺点" class="headerlink" title="Mybatis 优缺点"></a>Mybatis 优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>与传统JDBC相比</p><ol><li>基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL在xml里，解除SQL和程序代码的筽耦合，便于统一管理；提供xml标签，支持编写动态sql语句，并可重用</li><li>与JDBC相比，减少了50%的代码量，消除大量冗余代码，不需要手动开关连接</li><li>很好的于各种数据库兼容（因为Mybatis用JDBC操作数据库，所以只需要支持JDBC则支持Mybatis）</li><li>提供映射标签，支持对象与数据库的ORM字段映射关系；提供对象映射标签；支持对象关系组建维护</li><li>能很好的与Spring集成</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>Mybatis专注于sql本身，是一个灵活的DAO层解决方案</li><li>对性能的要求很高，或者本身变化比较多的项目，如互联网项目，Mybatis将是不错的选择</li></ol><h3 id="Hibernate-和-Mybatis-的区别"><a href="#Hibernate-和-Mybatis-的区别" class="headerlink" title="Hibernate 和 Mybatis 的区别"></a>Hibernate 和 Mybatis 的区别</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><ul><li><p>都是对JDBC的封装</p></li><li><p>都是持久层的框架，都用于DAO层的开发</p></li></ul><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ul><li><p>映射关系</p><ul><li>Mybatis是半自动化的映射框架，配置JAVA对象与SQL语句执行结果的对应关系，多表关联关系配置简单</li><li>Hibernate是一个全表映射的框架，配置JAVA对象与数据库表的对应关系，多表关联关系配置复杂</li></ul></li><li><p>SQL优化和移植性</p><ul><li>Hibernate 对sql 语句封装，提供了日志，缓存，级联（级联比Mybatis强大）等特性，此外还提供HQL（Hibernate Query Language） 操作数据库，数据库无关性支持好，但会多消耗性能。</li><li>Mybatis需要手写SQL，支持动态SQL，处理列表，动态列名生成，支持数据存储过程，开发工作量较大，直接使用sql操作数据库，不支持数据库无关性，但sql优化相对容易</li></ul></li><li><p>开发难易程度和学习成本</p><ul><li>Hibernate 是重量级框架，学习使用门槛高，适合于需求相对稳定，中小型的项目，比如：办公自动化系统</li><li>MyBatis 是轻量级框架，学习使用门槛低，适合于需求变化频繁，大型的项目，比如：互联网电子商务系统</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>MyBatis 是一个小巧、方便、高效、简单、直接、半自动化的持久层框架，</li><li>Hibernate 是一个强大、方便、高效、复杂、间接、全自动化的持久层框架。</li></ul><h2 id="MyBatis的解析和运行原理"><a href="#MyBatis的解析和运行原理" class="headerlink" title="MyBatis的解析和运行原理"></a>MyBatis的解析和运行原理</h2><h3 id="MyBatis编程步骤是什么样的？"><a href="#MyBatis编程步骤是什么样的？" class="headerlink" title="MyBatis编程步骤是什么样的？"></a>MyBatis编程步骤是什么样的？</h3><ol><li>创建SqlSessionFactory</li><li>通过SqlSessionFactory创建SqlSession</li><li>通过Sqlsession执行数据库操作</li><li>通过session.commit() 提交事务</li><li>调用session.close()关闭会话</li></ol><h3 id="请说说MyBatis的工作原理"><a href="#请说说MyBatis的工作原理" class="headerlink" title="请说说MyBatis的工作原理"></a>请说说MyBatis的工作原理</h3><p>在学习 MyBatis 程序之前，需要了解一下 MyBatis 工作原理，以便于理解程序。MyBatis 的工作原理如下图</p><p><img src="https://i.loli.net/2021/04/19/A5dWPV3RKkGH7SQ.png" alt="MyBatis工作原理"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>）读取 MyBatis 配置文件：mybatis-config.xml 为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息，例如数据库连接信息。<span class="token number">2</span>）加载映射文件。映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在 MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。<span class="token number">3</span>）构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。<span class="token number">4</span>）创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。<span class="token number">5</span>）Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。<span class="token number">6</span>）MappedStatement 对象：在 Executor 接口的执行方法中有一个 MappedStatement 类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息。<span class="token number">7</span>）输入参数映射：输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。<span class="token number">8</span>）输出结果映射：输出结果类型可以是 Map、 List 等集合类型，也可以是基本数据类型和 POJO 类型。输出结果映射过程类似于 JDBC 对结果集的解析过程。</code></pre></div><h3 id="MyBatis的功能架构是怎样的"><a href="#MyBatis的功能架构是怎样的" class="headerlink" title="MyBatis的功能架构是怎样的"></a>MyBatis的功能架构是怎样的</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0pvdXJXb24vaW1hZ2UvbWFzdGVyL015QmF0aXMlRTYlQTElODYlRTYlOUUlQjYlRTYlODAlQkIlRTclQkIlOTMvTXlCYXRpcyVFNSU4QSU5RiVFOCU4MyVCRCVFNiU5RSVCNiVFNiU5RSU4NC5wbmc" alt="Mybatis功能框架"></p><h4 id="我们把Mybatis的功能架构分为三层："><a href="#我们把Mybatis的功能架构分为三层：" class="headerlink" title="我们把Mybatis的功能架构分为三层："></a>我们把Mybatis的功能架构分为三层：</h4><p>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。<br>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。<br>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</p><h2 id="MyBatis的框架架构设计是怎么样的"><a href="#MyBatis的框架架构设计是怎么样的" class="headerlink" title="MyBatis的框架架构设计是怎么样的"></a>MyBatis的框架架构设计是怎么样的</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0pvdXJXb24vaW1hZ2UvbWFzdGVyL015QmF0aXMlRTYlQTElODYlRTYlOUUlQjYlRTYlODAlQkIlRTclQkIlOTMvTXlCYXRpcyVFNiVBMSU4NiVFNiU5RSVCNiVFNiU5RSVCNiVFNiU5RSU4NC5wbmc" alt="Mybatis框架架构"></p><hr><p>这张图从上往下看。MyBatis的初始化，会从mybatis-config.xml配置文件，解析构造成Configuration这个类，就是图中的红框。</p><p>(1)加载配置：配置来源于两个地方，一处是配置文件，一处是Java代码的注解，将SQL的配置信息加载成为一个个MappedStatement对象（包括了传入参数映射配置、执行的SQL语句、结果映射配置），存储在内存中。</p><p>(2)SQL解析：当API接口层接收到调用请求时，会接收到传入SQL的ID和传入对象（可以是Map、JavaBean或者基本数据类型），Mybatis会根据SQL的ID找到对应的MappedStatement，然后根据传入参数对象对MappedStatement进行解析，解析后可以得到最终要执行的SQL语句和参数。</p><p>(3)SQL执行：将最终得到的SQL和参数拿到数据库进行执行，得到操作数据库的结果。</p><p>(4)结果映射：将操作数据库的结果按照映射的配置进行转换，可以转换成HashMap、JavaBean或者基本数据类型，并将最终结果返回。</p><h2 id="为什么需要预编译"><a href="#为什么需要预编译" class="headerlink" title="为什么需要预编译"></a>为什么需要预编译</h2><div class="code-wrapper"><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&#123;% label primary @定义：SQL 预编译指的是数据库驱动在发送 SQL 语句和参数给 DBMS 之前对 SQL 语句进行编译，这样 DBMS 执行 SQL 时，就不需要重新编译。 %&#125;</code></pre></div><div class="code-wrapper"><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>label label-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>为什么需要预编译<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre></div><ul><li><p>JDBC 中使用对象 PreparedStatement 来抽象预编译语句，使用预编译。预编译阶段可以优化 SQL 的执行。预编译之后的 SQL 多数情况下可以直接执行，DBMS 不需要再次编译，越复杂的SQL，编译的复杂度将越大，预编译阶段可以合并多次操作为一个操作。</p></li><li><p>同时预编译语句对象可以重复利用。把一个 SQL 预编译后产生的 PreparedStatement 对象缓存下来，下次对于同一个SQL，可以直接使用这个缓存的 PreparedState 对象。Mybatis默认情况下，将对所有的 SQL 进行预编译。</p></li><li><p>防止SQL注入</p></li></ul><h2 id="Mybatis都有哪些Executor执行器？它们之间的区别是什么？"><a href="#Mybatis都有哪些Executor执行器？它们之间的区别是什么？" class="headerlink" title="Mybatis都有哪些Executor执行器？它们之间的区别是什么？"></a>Mybatis都有哪些Executor执行器？它们之间的区别是什么？</h2><div class="note note-success">            <p>Mybatis有三种基本的Executor执行器，SimpleExecutor、ReuseExecutor、BatchExecutor。</p><p>SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</p><p>ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。简言之，就是重复使用Statement对象。</p><p>BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</p><p>作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。</p>          </div><h2 id="Mybatis中如何指定使用哪一种Executor执行器？"><a href="#Mybatis中如何指定使用哪一种Executor执行器？" class="headerlink" title="Mybatis中如何指定使用哪一种Executor执行器？"></a>Mybatis中如何指定使用哪一种Executor执行器？</h2><p><u>Mybatis有三种基本的Executor执行器</u>，<strong>SimpleExecutor、ReuseExecutor、BatchExecutor。</strong></p><ul><li>SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</li><li>ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。简言之，就是重复使用Statement对象。</li><li>BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</li></ul><p><span class="label label-primary">都严格限制在SqlSession生命周期范围内。 </span></p><h2 id="Mybatis中如何指定使用哪一种Executor执行器？-1"><a href="#Mybatis中如何指定使用哪一种Executor执行器？-1" class="headerlink" title="Mybatis中如何指定使用哪一种Executor执行器？"></a>Mybatis中如何指定使用哪一种Executor执行器？</h2><p>在Mybatis配置文件中，在设置（settings）可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数，如SqlSession openSession(ExecutorType execType)。</p><p>配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。</p><h2 id="Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"></a>Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？</h2><p>Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</p><p>它的原理是，==使用CGLIB创建目标对象的代理对象==，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</p><p>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</p><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别"></a>#{}和${}的区别</h2><ul><li>#{}是占位符，预编译处理；${}是拼接符，字符串替换，没有预编译处理。</li><li>Mybatis在处理#{}时，#{}传入参数是以字符串传入，会将SQL中的#{}替换为?号，调用PreparedStatement的set方法来赋值。</li><li>Mybatis在处理时 ， 是 原 值 传 入 ， 就 是 把 {}时，是原值传入，就是把时，是原值传入，就是把{}替换成变量的值，相当于JDBC中的Statement编译</li><li>变量替换后，#{} 对应的变量自动加上单引号 ‘’；变量替换后，${} 对应的变量不会加上单引号 ‘’</li><li>#{} 可以有效的防止SQL注入，提高系统安全性；${} 不能防止SQL 注入</li><li>#{} 的变量替换是在DBMS 中；${} 的变量替换是在 DBMS 外</li></ul><h2 id="模糊查询like语句该怎么写"><a href="#模糊查询like语句该怎么写" class="headerlink" title="模糊查询like语句该怎么写"></a>模糊查询like语句该怎么写</h2><p>（1）’%${question}%’ 可能引起SQL注入，不推荐</p><p>（2）”%”#{question}”%” 注意：因为#{…}解析成sql语句时候，会在变量外侧自动加单引号’ ‘，所以这里 % 需要使用双引号” “，不能使用单引号 ’ ‘，不然会查不到任何结果。</p><p>（3）CONCAT(’%’,#{question},’%’) 使用CONCAT()函数，推荐</p><p>（4）使用bind标签</p><div class="code-wrapper"><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;select id&#x3D;&quot;listUserLikeUsername&quot; resultType&#x3D;&quot;com.jourwon.pojo.User&quot;&gt;　　&lt;bind name&#x3D;&quot;pattern&quot; value&#x3D;&quot;&#39;%&#39; + username + &#39;%&#39;&quot; &#x2F;&gt;　　select id,sex,age,username,password from person where username LIKE #&#123;pattern&#125;&lt;&#x2F;select&gt;</code></pre></div><h2 id="在mapper中如何传递多个参数"><a href="#在mapper中如何传递多个参数" class="headerlink" title="在mapper中如何传递多个参数"></a>在mapper中如何传递多个参数</h2><p><strong>方法1：顺序传参法</strong></p><p><code>public User selectUser(String name, int deptId);</code></p><div class="code-wrapper"><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;select id&#x3D;&quot;selectUser&quot; resultMap&#x3D;&quot;UserResultMap&quot;&gt;    select * from user    where user_name &#x3D; #&#123;0&#125; and dept_id &#x3D; #&#123;1&#125;&lt;&#x2F;select&gt;</code></pre></div><p>#{}里面的数字代表传入参数的顺序。</p><p>这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。</p><p><strong>方法2：@Param注解传参法</strong></p><p><code>public User selectUser(@Param(&quot;userName&quot;) String name, int @Param(&quot;deptId&quot;) deptId);</code></p><div class="code-wrapper"><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;select id&#x3D;&quot;selectUser&quot; resultMap&#x3D;&quot;UserResultMap&quot;&gt;    select * from user    where user_name &#x3D; #&#123;userName&#125; and dept_id &#x3D; #&#123;deptId&#125;&lt;&#x2F;select&gt;</code></pre></div><p>#{}里面的名称对应的是注解@Param括号里面修饰的名称。</p><p>这种方法在参数不多的情况还是比较直观的，推荐使用。</p><p><strong>方法3：Map传参法</strong></p><p><code>public User selectUser(Map&lt;String, Object&gt; params);</code></p><div class="code-wrapper"><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;select id&#x3D;&quot;selectUser&quot; parameterType&#x3D;&quot;java.util.Map&quot; resultMap&#x3D;&quot;UserResultMap&quot;&gt;    select * from user    where user_name &#x3D; #&#123;userName&#125; and dept_id &#x3D; #&#123;deptId&#125;&lt;&#x2F;select&gt;</code></pre></div><p>#{}里面的名称对应的是Map里面的key名称。</p><p>这种方法适合传递多个参数，且参数易变能灵活传递的情况。</p><p><strong>方法4：Java Bean传参法</strong></p><p><code>public User selectUser(User user);</code></p><div class="code-wrapper"><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;select id&#x3D;&quot;selectUser&quot; parameterType&#x3D;&quot;com.jourwon.pojo.User&quot; resultMap&#x3D;&quot;UserResultMap&quot;&gt;    select * from user    where user_name &#x3D; #&#123;userName&#125; and dept_id &#x3D; #&#123;deptId&#125;&lt;&#x2F;select&gt;</code></pre></div><p>#{}里面的名称对应的是User类里面的成员属性。</p><p>这种方法直观，需要建一个实体类，扩展不容易，需要加属性，但代码可读性强，业务逻辑处理方便，推荐使用。</p><h2 id="Mybatis如何执行批量操作"><a href="#Mybatis如何执行批量操作" class="headerlink" title="Mybatis如何执行批量操作"></a>Mybatis如何执行批量操作</h2><div class="code-wrapper"><pre class="language-BASH" data-language="BASH"><code class="language-BASH">使用foreach标签foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。foreach标签的属性主要有item，index，collection，open，separator，close。item　　表示集合中每一个元素进行迭代时的别名，随便起的变量名；index　　指定一个名字，用于表示在迭代过程中，每次迭代到的位置，不常用；open　　表示该语句以什么开始，常用“(”；separator表示在每次进行迭代之间以什么符号作为分隔符，常用“,”；close　　表示以什么结束，常用“)”。在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有一下3种情况：如果传入的是单参数且参数类型是一个List的时候，collection属性值为list如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key</code></pre></div><h4 id="具体用法如下："><a href="#具体用法如下：" class="headerlink" title="具体用法如下："></a>具体用法如下：</h4><div class="code-wrapper"><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;!-- 批量保存(foreach插入多条数据两种方法)       int addEmpsBatch(@Param(&quot;emps&quot;) List&lt;Employee&gt; emps); --&gt;&lt;!-- MySQL下批量保存，可以foreach遍历 mysql支持values(),(),()语法 --&gt; &#x2F;&#x2F;推荐使用&lt;insert id&#x3D;&quot;addEmpsBatch&quot;&gt;    INSERT INTO emp(ename,gender,email,did)    VALUES    &lt;foreach collection&#x3D;&quot;emps&quot; item&#x3D;&quot;emp&quot; separator&#x3D;&quot;,&quot;&gt;        (#&#123;emp.eName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;,#&#123;emp.dept.id&#125;)    &lt;&#x2F;foreach&gt;&lt;&#x2F;insert&gt;</code></pre></div><div class="code-wrapper"><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;!-- 这种方式需要数据库连接属性allowMutiQueries&#x3D;true的支持 如jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?allowMultiQueries&#x3D;true --&gt;  &lt;insert id&#x3D;&quot;addEmpsBatch&quot;&gt;    &lt;foreach collection&#x3D;&quot;emps&quot; item&#x3D;&quot;emp&quot; separator&#x3D;&quot;;&quot;&gt;                                         INSERT INTO emp(ename,gender,email,did)        VALUES(#&#123;emp.eName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;,#&#123;emp.dept.id&#125;)    &lt;&#x2F;foreach&gt;&lt;&#x2F;insert&gt;</code></pre></div><h3 id="使用ExecutorType-BATCH"><a href="#使用ExecutorType-BATCH" class="headerlink" title="使用ExecutorType.BATCH"></a>使用ExecutorType.BATCH</h3><p>Mybatis内置的ExecutorType有3种，默认为simple,该模式下它为每个语句的执行创建一个新的预处理语句，单条提交sql；而batch模式重复使用已经预处理的语句，并且批量执行所有更新语句，显然batch性能将更优； 但batch模式也有自己的问题，比如在Insert操作时，在事务没有提交之前，是没有办法获取到自增的id，这在某型情形下是不符合业务要求的</p><h4 id="具体用法如下"><a href="#具体用法如下" class="headerlink" title="具体用法如下"></a>具体用法如下</h4><div class="code-wrapper"><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;&#x2F;批量保存方法测试@Test  public void testBatch() throws IOException&#123;    SqlSessionFactory sqlSessionFactory &#x3D; getSqlSessionFactory();    &#x2F;&#x2F;可以执行批量操作的sqlSession    SqlSession openSession &#x3D; sqlSessionFactory.openSession(ExecutorType.BATCH);    &#x2F;&#x2F;批量保存执行前时间    long start &#x3D; System.currentTimeMillis();    try &#123;        EmployeeMapper mapper &#x3D; openSession.getMapper(EmployeeMapper.class);        for (int i &#x3D; 0; i &lt; 1000; i++) &#123;            mapper.addEmp(new Employee(UUID.randomUUID().toString().substring(0, 5), &quot;b&quot;, &quot;1&quot;));        &#125;        openSession.commit();        long end &#x3D; System.currentTimeMillis();        &#x2F;&#x2F;批量保存执行后的时间        System.out.println(&quot;执行时长&quot; + (end - start));        &#x2F;&#x2F;批量 预编译sql一次&#x3D;&#x3D;》设置参数&#x3D;&#x3D;》10000次&#x3D;&#x3D;》执行1次   677        &#x2F;&#x2F;非批量  （预编译&#x3D;设置参数&#x3D;执行 ）&#x3D;&#x3D;》10000次   1121    &#125; finally &#123;        openSession.close();    &#125;&#125;</code></pre></div><p>mapper和mapper.xml如下</p><div class="code-wrapper"><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">public interface EmployeeMapper &#123;       &#x2F;&#x2F;批量保存员工    Long addEmp(Employee employee);&#125;</code></pre></div><div class="code-wrapper"><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;mapper namespace&#x3D;&quot;com.jourwon.mapper.EmployeeMapper&quot;     &lt;!--批量保存员工 --&gt;    &lt;insert id&#x3D;&quot;addEmp&quot;&gt;        insert into employee(lastName,email,gender)        values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)    &lt;&#x2F;insert&gt;&lt;&#x2F;mapper&gt;</code></pre></div><h2 id="如何获取生成的主键"><a href="#如何获取生成的主键" class="headerlink" title="如何获取生成的主键"></a>如何获取生成的主键</h2><p><strong>对于支持主键自增的数据库（MySQL）</strong></p><div class="code-wrapper"><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;insert id&#x3D;&quot;insertUser&quot; useGeneratedKeys&#x3D;&quot;true&quot; keyProperty&#x3D;&quot;userId&quot; &gt;    insert into user(     user_name, user_password, create_time)     values(#&#123;userName&#125;, #&#123;userPassword&#125; , #&#123;createTime, jdbcType&#x3D; TIMESTAMP&#125;)&lt;&#x2F;insert&gt;</code></pre></div><p>parameterType 可以不写，Mybatis可以推断出传入的数据类型。如果想要访问主键，那么应当parameterType 应当是java实体或者Map。这样数据在插入之后 可以通过ava实体或者Map 来获取主键值。通过 getUserId获取主键</p><p><strong>不支持主键自增的数据库（Oracle）</strong></p><p>对于像Oracle这样的数据，没有提供主键自增的功能，而是使用序列的方式获取自增主键。<br>可以使用＜selectKey＞标签来获取主键的值，这种方式不仅适用于不提供主键自增功能的数据库，也适用于提供主键自增功能的数据库<br>＜selectKey＞一般的用法</p><div class="code-wrapper"><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;selectKey keyColumn&#x3D;&quot;id&quot; resultType&#x3D;&quot;long&quot; keyProperty&#x3D;&quot;id&quot; order&#x3D;&quot;BEFORE&quot;&gt;&lt;&#x2F;selectKey&gt; </code></pre></div><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>keyProperty</td><td>selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。</td></tr><tr><td>keyColumn</td><td>匹配属性的返回结果集中的列名称。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。</td></tr><tr><td>resultType</td><td>结果的类型，MyBatis 通常可以推算出来。MyBatis 允许任何简单类型用作主键的类型，包括字符串。如果希望作用于多个生成的列，则可以使用一个包含期望属性的 Object 或一个 Map。</td></tr><tr><td>order</td><td>值可为BEFORE 或 AFTER。如果是 BEFORE，那么它会先执行selectKey设置 keyProperty 然后执行插入语句。如果为AFTER则相反。</td></tr><tr><td>statementType</td><td>使用何种语句类型，默认PREPARED。 有STATEMENT，PREPARED 和 CALLABLE 语句的映射类型。</td></tr></tbody></table><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>long<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BEFORE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>SELECT USER_ID.nextval as id from dual <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span> insert into user( user_id,user_name, user_password, create_time) values(#&#123;userId&#125;,#&#123;userName&#125;, #&#123;userPassword&#125; , #&#123;createTime, jdbcType= TIMESTAMP&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></div><p>此时会将Oracle生成的主键值赋予userId变量。这个userId 就是USER对象的属性，这样就可以将生成的主键值返回了。如果仅仅是在insert语句中使用但是不返回，此时keyProperty=“任意自定义变量名”，resultType 可以不写。<br>Oracle 数据库中的值要设置为 BEFORE ，这是因为 Oracle中需要先从序列获取值，然后将值作为主键插入到数据库中。</p><h3 id="当实体类中的属性名和表中的字段名不一样-，怎么办"><a href="#当实体类中的属性名和表中的字段名不一样-，怎么办" class="headerlink" title="当实体类中的属性名和表中的字段名不一样 ，怎么办"></a>当实体类中的属性名和表中的字段名不一样 ，怎么办</h3><h4 id="第1种：-通过在查询的SQL语句中定义字段名的-别名-，让字段名的别名和实体类的属性名一致。"><a href="#第1种：-通过在查询的SQL语句中定义字段名的-别名-，让字段名的别名和实体类的属性名一致。" class="headerlink" title="第1种： 通过在查询的SQL语句中定义字段名的==别名==，让字段名的别名和实体类的属性名一致。"></a>第1种： 通过在查询的SQL语句中定义字段名的==别名==，让字段名的别名和实体类的属性名一致。</h4><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getOrder<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jourwon.pojo.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select order_id id, order_no orderno ,order_price price form orders where order_id=#&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></div><h4 id="第2种：-通过-lt-resultMap-gt-来映射字段名和实体类属性名的一一对应的关系。"><a href="#第2种：-通过-lt-resultMap-gt-来映射字段名和实体类属性名的一一对应的关系。" class="headerlink" title="第2种： 通过&lt;resultMap&gt;来映射字段名和实体类属性名的一一对应的关系。"></a>第2种： 通过<code>&lt;resultMap&gt;</code>来映射字段名和实体类属性名的一一对应的关系。</h4><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getOrder<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from orders where order_id=#&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.jourwon.pojo.Order<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–用id属性来映射主键字段–</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderno<span class="token punctuation">"</span></span> <span class="token attr-name">column</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_price<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reslutMap</span><span class="token punctuation">></span></span></code></pre></div><h3 id="Mapper-编写有哪几种方式？"><a href="#Mapper-编写有哪几种方式？" class="headerlink" title="Mapper 编写有哪几种方式？"></a>Mapper 编写有哪几种方式？</h3><h4 id="第一种：接口实现类继承-SqlSessionDaoSupport：使用此种方法需要编写mapper-接口，mapper-接口实现类、mapper-xml-文件。"><a href="#第一种：接口实现类继承-SqlSessionDaoSupport：使用此种方法需要编写mapper-接口，mapper-接口实现类、mapper-xml-文件。" class="headerlink" title="第一种：接口实现类继承 SqlSessionDaoSupport：使用此种方法需要编写mapper 接口，mapper 接口实现类、mapper.xml 文件。"></a>第一种：接口实现类继承 SqlSessionDaoSupport：使用此种方法需要编写mapper 接口，mapper 接口实现类、mapper.xml 文件。</h4><p>（1）在 sqlMapConfig.xml 中配置 mapper.xml 的位置</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper.xml 文件的地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper.xml 文件的地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre></div><p>（2）定义 mapper 接口</p><p>（3）实现类集成 SqlSessionDaoSupport</p><p>mapper 方法中可以 this.getSqlSession()进行数据增删改查。</p><p>（4）spring 配置</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper 接口的实现<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span>    <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></div><h4 id="第二种：使用-org-mybatis-spring-mapper-MapperFactoryBean："><a href="#第二种：使用-org-mybatis-spring-mapper-MapperFactoryBean：" class="headerlink" title="第二种：使用 org.mybatis.spring.mapper.MapperFactoryBean："></a>第二种：使用 org.mybatis.spring.mapper.MapperFactoryBean：</h4><p>（1）在 sqlMapConfig.xml 中配置 mapper.xml 的位置，如果 mapper.xml 和mappre 接口的名称相同且在同一个目录，这里可以不用配置</p><p>（2）定义 mapper 接口：</p><p>（3）mapper.xml 中的 namespace 为 mapper 接口的地址</p><p>（4）mapper 接口中的方法名和 mapper.xml 中的定义的 statement 的 id 保持一致</p><p>（5）Spring 中定义</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperInterface<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper 接口地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></div><h4 id="第三种：使用-mapper-扫描器："><a href="#第三种：使用-mapper-扫描器：" class="headerlink" title="第三种：使用 mapper 扫描器："></a>第三种：使用 mapper 扫描器：</h4><p>（1）mapper.xml 文件编写：</p><p>mapper.xml 中的 namespace 为 mapper 接口的地址；    </p><p>mapper 接口中的方法名和 mapper.xml 中的定义的 statement 的 id 保持一致；</p><p>如果将 mapper.xml 和 mapper 接口的名称保持一致则不用在 sqlMapConfig.xml中进行配置。</p><p>（2）定义 mapper 接口：</p><p>注意 mapper.xml 的文件名和 mapper 的接口名称保持一致，且放在同一个目录</p><p>（3）配置 mapper 扫描器：</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper 接口包地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span>    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></div><p>（4）使用扫描器后从 spring 容器中获取 mapper 的实现对象。</p><h3 id="什么是MyBatis的接口绑定？有哪些实现方式？"><a href="#什么是MyBatis的接口绑定？有哪些实现方式？" class="headerlink" title="什么是MyBatis的接口绑定？有哪些实现方式？"></a>什么是MyBatis的接口绑定？有哪些实现方式？</h3><p>接口绑定，就是在MyBatis中任意定义接口，然后把接口里面的==方法和SQL语句绑定==，我们直接调用接口方法就可以，这样比起原来了SqlSession提供的方法我们可以有更加灵活的选择和设置。</p><p>接口绑定有两种实现方式</p><ul><li>通过注解绑定，就是在接口的方法上面加上 @Select、@Update等注解，里面包含Sql语句来绑定；</li></ul><ul><li>通过xml里面写SQL来绑定， 在这种情况下，要指定xml映射文件里面的namespace必须为接口的全路径名。当Sql语句比较简单时候，用注解绑定， 当SQL语句比较复杂时候，用xml绑定，一般用xml绑定的比较多。</li></ul><h3 id="使用MyBatis的mapper接口调用时有哪些要求？"><a href="#使用MyBatis的mapper接口调用时有哪些要求？" class="headerlink" title="使用MyBatis的mapper接口调用时有哪些要求？"></a>使用MyBatis的mapper接口调用时有哪些要求？</h3><p>1、Mapper接口方法名和mapper.xml中定义的每个sql的id相同。</p><p>2、Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同。</p><p>3、Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同。</p><p>4、Mapper.xml文件中的namespace即是mapper接口的类路径。</p><h3 id="最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗"><a href="#最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗" class="headerlink" title="最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗"></a>最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗</h3><p>Dao接口，就是人们常说的Mapper接口，<u>接口的全限名</u>，就是映射文件中的<u>namespace的值</u>，接口的<strong>方法名</strong>，就是映射文件中MappedStatement的<strong>id值</strong>，接口方法内的参数，就是传递给sql的参数。==Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个MappedStatemen==t，举例：com.mybatis3.mappers.StudentDao.findStudentById，可以唯一找到namespace为com.mybatis3.mappers.StudentDao下面id = findStudentById的MappedStatement。在Mybatis中，每一个<select>、<insert>、<update>、<delete>标签，都会被解析为一个MappedStatement对象。</p><p>Dao接口里的方法，是==不能重载的==，因为是全限名+方法名的保存和寻找策略。</p><p>Dao接口的工作原理是==JDK动态代理==，Mybatis运行时会使用JDK动态代理为Dao接口==生成代理proxy对象==，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将sql执行结果返回。</p><h3 id="Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？"><a href="#Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？" class="headerlink" title="Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？"></a>Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？</h3><p>不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；毕竟namespace不是必须的，只是最佳实践而已。</p><p>原因就是namespace+id是作为Map&lt;String, MappedStatement&gt;的key使用的，如果没有namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也就不同。</p><h3 id="简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？"><a href="#简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？" class="headerlink" title="简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？"></a>简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？</h3><p>Mybatis将所有Xml配置信息都封装到All-In-One重量级对象Configuration内部。在Xml映射文件中，<parameterMap>标签会被解析为ParameterMap对象，其每个子元素会被解析为ParameterMapping对象。<resultMap>标签会被解析为ResultMap对象，其每个子元素会被解析为ResultMapping对象。每一个<select>、<insert>、<update>、<delete>标签均会被解析为MappedStatement对象，标签内的sql会被解析为BoundSql对象。</p><h3 id="Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</h3><ul><li><p>第一种是使用<resultMap>标签，逐一定义列名和对象属性名之间的映射关系。</p></li><li><p>第二种是使用sql列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性名一般是name，小写，但是列名不区分大小写，Mybatis会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME AS NaMe，Mybatis一样可以正常工作。</p></li><li><p>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p></li></ul><h3 id="Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？"><a href="#Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？" class="headerlink" title="Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？"></a>Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</h3><p>还有很多其他的标签，<resultMap>、<parameterMap>、<sql>、<include>、<selectKey>，加上动态sql的9个标签，==trim|where|set|foreach|if|choose|when|otherwise|bind==等，其中<sql>为sql片段标签，通过<include>标签引入sql片段，<selectKey>为不支持自增的主键生成策略标签。</p><h3 id="Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？"><a href="#Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？" class="headerlink" title="Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？"></a>Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？</h3><p>虽然Mybatis解析Xml映射文件是按照顺序解析的，但是，被引用的B标签依然可以==定义在任何地方==，Mybatis都可以正确识别。</p><p>原理是，Mybatis解析A标签，发现A标签引用了B标签，但是B标签尚未解析到，尚不存在，此时，Mybatis会将A标签标记为未解析状态，然后继续解析余下的标签，包含B标签，待所有标签解析完毕，Mybatis会重新解析那些被标记为未解析的标签，此时再解析A标签时，B标签已经存在，A标签也就可以正常解析完成了。</p><h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="MyBatis实现一对一，一对多有几种方式，怎么操作的？"><a href="#MyBatis实现一对一，一对多有几种方式，怎么操作的？" class="headerlink" title="MyBatis实现一对一，一对多有几种方式，怎么操作的？"></a>MyBatis实现一对一，一对多有几种方式，怎么操作的？</h3><p>有联合查询和嵌套查询。联合查询是几个表联合查询，只查询一次，通过在resultMap里面的association，collection节点配置一对一，一对多的类就可以完成</p><p>嵌套查询是先查一个表，根据这个表里面的结果的外键id，去再另外一个表里面查询数据，也是通过配置association，collection，但另外一个表的查询通过select节点配置。</p><h3 id="Mybatis是否可以映射Enum枚举类？"><a href="#Mybatis是否可以映射Enum枚举类？" class="headerlink" title="Mybatis是否可以映射Enum枚举类？"></a>Mybatis是否可以映射Enum枚举类？</h3><p>Mybatis可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。</p><p>TypeHandler有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参数和获取列查询结果。</p><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h3 id="Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？"><a href="#Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？" class="headerlink" title="Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？"></a>Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？</h3><p>Mybatis动态sql可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能，Mybatis提供了9种动态sql标签==trim|where|set|foreach|if|choose|when|otherwise|bind。==</p><p>==其执行原理为，使用OGNL==从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。</p><h2 id="插件模块"><a href="#插件模块" class="headerlink" title="插件模块"></a>插件模块</h2><h3 id="Mybatis是如何进行分页的？分页插件的原理是什么？"><a href="#Mybatis是如何进行分页的？分页插件的原理是什么？" class="headerlink" title="Mybatis是如何进行分页的？分页插件的原理是什么？"></a>Mybatis是如何进行分页的？分页插件的原理是什么？</h3><p>Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页，可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><p>分页插件的基本原理是<strong>使用Mybatis提供的插件接口</strong>，实现自定义插件，在插件的拦截方法内==拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。==</p><div class="note note-success">            <p>举例：select * from student，拦截sql后重写为：select t.* from (select * from student) t limit 0, 10</p>          </div><h3 id="简述Mybatis的插件运行原理，以及如何编写一个插件。"><a href="#简述Mybatis的插件运行原理，以及如何编写一个插件。" class="headerlink" title="简述Mybatis的插件运行原理，以及如何编写一个插件。"></a>简述Mybatis的插件运行原理，以及如何编写一个插件。</h3><p>Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。</p><p>实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="Mybatis的一级、二级缓存"><a href="#Mybatis的一级、二级缓存" class="headerlink" title="Mybatis的一级、二级缓存"></a>Mybatis的一级、二级缓存</h3><p>1）一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。</p><p>2）二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置<cache/> ；</p><p>3）对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>middle-component</category>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>haproxy</title>
    <link href="/2021/01/15/haproxy/"/>
    <url>/2021/01/15/haproxy/</url>
    
    <content type="html"><![CDATA[<h2 id="HAProxy"><a href="#HAProxy" class="headerlink" title="HAProxy"></a>HAProxy</h2><h2 id="HAProxy介绍"><a href="#HAProxy介绍" class="headerlink" title="HAProxy介绍"></a>HAProxy介绍</h2><p>HAProxy: 是法国人Willy Tarreau开发的一个开源软件，是一款应对客户端10000以上的同时连接的高性能的TCP和 HTTP负载均衡器。其功能是用来提供基于cookie的持久性， 基于内容的交换，过载保护的高级流量管制，自动故障切换 ，以正则表达式为基础的标题控制运行时间，基于Web的报表，高级日志记录以帮助排除故‹@障的应用或网络及其他功能。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="代理的作用"><a href="#代理的作用" class="headerlink" title="代理的作用"></a>代理的作用</h3><ol><li>正向代理，反向代理</li><li>代理服务器，可以提供缓存功能加速客户端访问，同时可以对缓存数据进行有效性检查</li><li>内容路由：根据流量以及内容类型将请求转发至特定的服务器</li><li>转码器：支持压缩功能，将数据以压缩形式发送给客户端</li></ol><h3 id="缓存的作用"><a href="#缓存的作用" class="headerlink" title="缓存的作用"></a>缓存的作用</h3><ol><li>减少访冗余内容传输</li><li>节省带宽，缓解网络瓶颈</li><li>降低了对原始服务器的请求压力</li><li>降低了传输延迟</li></ol><h3 id="负载均衡集群："><a href="#负载均衡集群：" class="headerlink" title="负载均衡集群："></a>负载均衡集群：</h3><p>四层：<br>lvs, nginx(stream)，haproxy(mode tcp)<br>七层：<br>http: nginx(http, ngx_http_upstream_module), haproxy(mode http), httpd, ats, perlbal, pound…</p><h3 id="HAProxy功能"><a href="#HAProxy功能" class="headerlink" title="HAProxy功能"></a>HAProxy功能</h3><p>HAProxy是TCP / HTTP反向代理服务器，尤其适合于高可用性环境<br>可以针对HTTP请求添加cookie，进行路由后端服务器<br>可平衡负载至后端服务器，并支持持久连接<br>支持基于cookie进行调度<br>支持所有主服务器故障切换至备用服务器<br>支持专用端口实现监控服务<br>支持不影响现有连接情况下停止接受新连接请求<br>可以在双向添加，修改或删除HTTP报文首部<br>支持基于pattern实现连接请求的访问控制<br>通过特定的URI为授权用户提供详细的状态信息<br>版本：1.4 1.5 1.6 1.7 1.8<br><img src="https://i.loli.net/2021/01/29/xjDWm63snTL48fG.png" alt="img"></p><p>支持http反向代理<br>支持动态程序的反向代理<br>支持基于数据库的反向代理</p><h2 id="HAproxy组成"><a href="#HAproxy组成" class="headerlink" title="HAproxy组成"></a>HAproxy组成</h2><p>包名：haproxy</p><h3 id="程序环境"><a href="#程序环境" class="headerlink" title="程序环境"></a>程序环境</h3><p>主程序：/usr/sbin/haproxy<br>配置文件：/etc/haproxy/haproxy.cfg<br>Unit file：/usr/lib/systemd/system/haproxy.service</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>haproxy.cfg主要有两部分组成：global，和proxies配置段</p><h4 id="global：全局配置段"><a href="#global：全局配置段" class="headerlink" title="global：全局配置段"></a>global：全局配置段</h4><p>进程及安全配置相关的参数<br>性能调整相关参数<br>Debug参数</p><h4 id="proxies：代理配置段"><a href="#proxies：代理配置段" class="headerlink" title="proxies：代理配置段"></a>proxies：代理配置段</h4><p>defaults：为frontend, backend, listen提供默认配置<br>fronted：前端，相当于nginx, server {}<br>backend：后端，相当于nginx, upstream {}<br>listen：同时拥有前端和后端,适用于一对一环境</p><h3 id="简单前端调度实现"><a href="#简单前端调度实现" class="headerlink" title="简单前端调度实现"></a>简单前端调度实现</h3><p>利用四台虚拟机实现简单的前端轮询调度。<br>一台客户端，一台haproxy调度器，两台RS</p><ol><li><p>首先在后端部署两台http服务</p></li><li><p>编辑haproxy配置文件/etc/haproxy/haproxy.cfg<br>默认设置不做修改</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@CentOS6 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/haproxy/haproxy.cfg </span>frontend  main *:80     <span class="token comment">#设置监听ip：端口</span>default_backend         websrvs     <span class="token comment">#调用后端RS组名</span>backend websrvsbalance     roundrobin      <span class="token comment">#轮询算法</span>server      web1 <span class="token number">192.168</span>.45.11:80 checkserver      web2 <span class="token number">192.168</span>.45.12:80 check</code></pre></div></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="global配置参数："><a href="#global配置参数：" class="headerlink" title="global配置参数："></a>global配置参数：</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">global      <span class="token comment"># 全局参数的设置</span>log         <span class="token number">127.0</span>.0.1   local2                      <span class="token comment"># log语法：log &lt;address_1>[max_level_1] </span><span class="token comment"># 全局的日志配置，使用log关键字，指定使用127.0.0.1上的syslog服务中的local0日志设备，记录日志等级为info的日志</span><span class="token function">chroot</span>      /var/lib/haproxy        <span class="token comment">#改变当前工作目录</span>pidfile     /var/run/haproxy.pid    <span class="token comment">#当前进程id文件</span>maxconn     <span class="token number">4000</span>                    <span class="token comment">#最大连接数</span>user        haproxy                 <span class="token comment">#所属用户</span>group       haproxy                 <span class="token comment">#所属组</span>daemon                              <span class="token comment">#以守护进程方式运行haproxy</span>stats socket /var/lib/haproxy/stats <span class="token comment">#基于本地的文件传输</span></code></pre></div><p>实现日志记录：<br>haproxy配置文件中默认定义了log 127.0.0.1 local2 说明日志将被记录在本机的local2设施中。<br>编辑rsyslog配置文件：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@CentOS6 ~<span class="token punctuation">]</span><span class="token comment">#vim /etc/rsyslog.conf</span><span class="token comment"># Provides UDP syslog reception</span><span class="token variable">$ModLoad</span> imudp      <span class="token comment">#取消注释</span><span class="token variable">$UDPServerRun</span> <span class="token number">514</span>   <span class="token comment">#取消注释</span>local2.*            /var/log/haproxy.log<span class="token comment">#指定设备local2日志存放位置</span></code></pre></div><p>haproxy的日志信息可以设置存放在专门的日志服务器中</p><h3 id="proxies配置参数："><a href="#proxies配置参数：" class="headerlink" title="proxies配置参数："></a>proxies配置参数：</h3><p>代理配置段：</p><ul><li>defaults <name></li><li>frontend <name></li><li>backend <name></li><li>listen <name></li></ul><p>Frontend段：指定接收客户端连接侦听套接字设置<br>Backend段：指定将连接请求转发至后端服务器的相关设置<br>Listen段：指定完整的前后端设置，只对 TCP 有效<br>proxy 名称：使用字母 数字 - _ . : 并区分字符大小写</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">mode        http             <span class="token comment">#默认的模式mode &#123; tcp|http|health &#125;，tcp是4层，http是7层，health只会返回OK</span>log         global        <span class="token comment">#应用全局的日志配置</span>option      httplog       <span class="token comment"># 启用日志记录HTTP请求，默认haproxy日志记录是不记录HTTP请求日志</span>option      dontlognull   <span class="token comment"># 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器或者监控系统为了探测该服务是否存活可用时，需要定期的连接或者获取某一固定的组件或页面，或者探测扫描端口是否在监听或开放等动作被称为空连接；官方文档中标注，如果该服务上游没有其他的负载均衡器的话，建议不要使用该参数，因为互联网上的恶意扫描或其他动作就不会被记录下来</span>option      http-server-close  <span class="token comment">#每次请求完毕后主动关闭http通道</span>option      forwardfor       except <span class="token number">127.0</span>.0.0/8   <span class="token comment">#如果服务器上的应用程序想记录发起请求的客户端的IP地址，需要在HAProxy上配置此选项， 这样 HAProxy会把客户端的IP信息发送给服务器，在HTTP请求中添加"X-Forwarded-For"字段。启用X-Forwarded-For，在requests头部插入客户端IP发送给后端的server，使后端server获取到客户端的真实IP。 </span>option        redispatch                      <span class="token comment">#当使用了cookie时，haproxy将会将其请求的后端服务器的serverID插入到cookie中，以保证会话的SESSION持久性；而此时，如果后端的服务器宕掉了， 但是客户端的cookie是不会刷新的，如果设置此参数，将会将客户的请求强制定向到另外一个后端server上，以保证服务的正常。</span>retries       <span class="token number">3</span>                             <span class="token comment"># 定义连接后端服务器的失败重连次数，连接失败次数超过此值后将会将对应后端服务器标记为不可用</span><span class="token function">timeout</span> http-request    10s     <span class="token comment">#http请求超时时间</span><span class="token function">timeout</span> queue           1m      <span class="token comment">#一个请求在队列里的超时时间</span><span class="token function">timeout</span> connect         10s     <span class="token comment">#连接超时</span><span class="token function">timeout</span> client          1m      <span class="token comment">#客户端超时</span><span class="token function">timeout</span> server          1m      <span class="token comment">#服务器端超时</span><span class="token function">timeout</span> http-keep-alive 10s     <span class="token comment">#设置http-keep-alive的超时时间</span><span class="token function">timeout</span> check           10s     <span class="token comment">#检测超时</span>maxconn                 <span class="token number">3000</span>    <span class="token comment">#每个进程可用的最大连接数</span>frontend  main *:80             <span class="token comment">#监听地址为80</span>acl url_static       path_beg       -i /static /images /javascript /stylesheetsacl url_static       path_end       -i .jpg .gif .png .css .jsuse_backend static          <span class="token keyword">if</span> url_staticdefault_backend             my_webserver     <span class="token comment">#定义一个名为my_app前端部分。此处将对应的请求转发给后端</span>backend static                                       <span class="token comment">#使用了静态动态分离（如果url_path匹配 .jpg .gif .png .css .js静态文件则访问此后端）</span>balance             roundrobin                       <span class="token comment">#负载均衡算法（#banlance roundrobin 轮询，balance source 保存session值，支持static-rr，leastconn，first，uri等参数）</span>server              static <span class="token number">127.0</span>.0.1:80 check         <span class="token comment">#静态文件部署在本机（也可以部署在其他机器或者squid缓存服务器）</span>backend my_webserver                                 <span class="token comment">#定义一个名为my_webserver后端部分。PS：此处my_webserver只是一个自定义名字而已，但是需要与frontend里面配置项default_backend 值相一致</span>balance     roundrobin          <span class="token comment">#负载均衡算法</span>server  web01 <span class="token number">172.31</span>.2.33:80  check inter <span class="token number">2000</span> fall <span class="token number">3</span> weight <span class="token number">30</span>              <span class="token comment">#定义的多个后端</span>server  web02 <span class="token number">172.31</span>.2.34:80  check inter <span class="token number">2000</span> fall <span class="token number">3</span> weight <span class="token number">30</span>              <span class="token comment">#定义的多个后端</span>server  web03 <span class="token number">172.31</span>.2.35:80  check inter <span class="token number">2000</span> fall <span class="token number">3</span> weight <span class="token number">30</span>              <span class="token comment">#定义的多个后端</span></code></pre></div><h3 id="Balance配置"><a href="#Balance配置" class="headerlink" title="Balance配置"></a>Balance配置</h3><p>balance：后端服务器组内的服务器调度算法<br>balance <algorithm> [ <arguments> ]<br>balance url_param <param> [check_post]<br>haproxy中调度算法同样分为动态调度算法和静态调度算法，与nginx调度算法中区分动静态调度算法的概念不同，nginx用能不能根据后端服务器的负载状况进行调度来区分动静态调度算法的差别，而haproxy中则根据该算法支不支持运行时即时生效来区分动静态算法。</p><p>调度算法：<br>roundrobin：基于权重轮询，动态算法，支持权重的运行时调整，支持慢启动；每个后端backend中最多支持4095个<br>server server options： weight #</p><p>static-rr：基于权重轮询，静态算法，不支持权重的运行时调整及慢启动；后端主机数量无上限</p><p>leastconn：加权最少连接，动态算法，最少连接的后端服务器优先分配接收新连接，相同连接时轮询，适用于长连接场景，例如 MySQL、LDAP等，不适合http</p><p>first：根据服务器在列表中的位置，自上而下进行调度；前面服务器的连接数达到上限，新请求才会分配给下一台服务</p><p>source：源地址hash，新连接先按权重分配，后续连接按source分配请求<br>动静态取决于hash type<br>hash-type：哈希算法<br>hash-type <method> <function> <modifier><br>method:<br>map-based：除权取余法，哈希数据结构是静态数组（不支持权重动态调整）<br>consistent：一致性哈希，哈希数据结构是一棵树 （支持权重动态调整）<br><function> : 哈希函数<br>sdbm djb2 wt6</p><p>uri：<br>对URI的左半部分或整个uri做hash计算，并除以服务器总权重取模，以后派发至某挑出的服务器,适用于后端缓存服务器<br>动静态取决于hash type</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">hash-type    map-based    consistent</code></pre></div><p><scheme>://<user>:<password>@<host>:<port>/<path> ;<params>?<query>#<frag><br>左半部分：/<path>;<params><br>整个uri：/<path>;<params>?<query>#<frag></p><p>url_param：<br>对用户请求的uri听<params>部分中的参数的值作hash计算， 并由服务器总权重相除以后派发至某挑出的服务器；通常用于追踪用户，以确保来自同一个用户的请求始终发往同一个Backend Server<br>动静态取决于hash type</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">hash-type    map-based    consistent</code></pre></div><p>hdr(<name>)：根据请求报文中指定的header（如use_agent,referer,hostname）将该hesder做hash计算进行调度<br>动静态取决于hash type</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">hash-type    map-based    consistent</code></pre></div><p>hdr(Cookie)</p><p>rdp-cookie 远程桌面相关</p><p>rdp-cookie(<name>)</p><h3 id="default-backend"><a href="#default-backend" class="headerlink" title="default_backend "></a>default_backend <backend></h3><p>无use_backend 匹配时，使用默认的backend，用于 frontend中</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>server <name> <address>[:[port]] [param*]<br>定义后端主机的各服务器及其选项 server <name> <address>[:port] [settings …] default-server [settings …]</p><p><name>：服务器在haproxy上的内部名称；出现在日志及警告信息</p><address>：服务器地址，支持使用主机名<p>[:[port]]：端口映射；省略时，表示同bind中绑定的端口</p><p>[param*]：参数<br>check：对当前server做健康状态检测，只用于四层检测<br>注意：httpchk，“smtpchk”, “mysql-check”, “pgsql-check” and “sslhello-chk” 用于定义应用层检测方法<br>addr ：检测时使用的IP地址<br>port ：针对此端口进行检测<br>inter <delay>：连续两次检测之间的时间间隔，默认为2000ms<br>rise <count>：连续多少次检测结果为“成功”才标记服务器为可用 ；默认为2<br>fall <count>：连续多少次检测结果为“失败”才标记服务器为不可 用；默认为3<br>cookie <value>：为当前server指定cookie值，实现基于cookie的会话黏性<br>disabled：标记为不可用<br>redir <div class="code-wrapper"><prefix>：将发往此server的所有GET和HEAD类的请求重定向至指 定的URL<br>weight <weight>：权重，默认为1<br>maxconn <maxconn>：当前server的最大并发连接数<br>backlog <backlog>：当server的连接数达到上限后的后援队列长度<br>backup：设定当前server为备用服务器</p><p>default-server [param*] 为backend中的各server设定默认选项</p><h3 id="bind配置"><a href="#bind配置" class="headerlink" title="bind配置"></a>bind配置</h3><p>bind：指定一个或多个前端侦听地址和端口<br>只用于frountend配置段和listen配置段<br>bind [<address>]:<port_range> [, …] [param*]<br>示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash">listen http_proxy     <span class="token builtin class-name">bind</span> :80,:443     <span class="token builtin class-name">bind</span> <span class="token number">10.0</span>.0.1:10080,10.0.0.1:10443     <span class="token builtin class-name">bind</span> /var/run/ssl-frontend.sock user root mode <span class="token number">600</span> accept-proxy</code></pre></div><h3 id="maxconn"><a href="#maxconn" class="headerlink" title="maxconn"></a>maxconn</h3><p>maxconn <conns>：为指定的frontend定义其最大并发连接数；默认为2000</p><h3 id="mode-tcp-http-health"><a href="#mode-tcp-http-health" class="headerlink" title="mode { tcp|http|health }"></a>mode { tcp|http|health }</h3><p>定义haproxy的工作模式<br>tcp：基于layer4实现代理；可代理mysql, pgsql, ssh, ssl等协议,https时使用此模式，默认模式<br>http：仅当代理协议为http时使用,centos实际默认模式<br>health：工作为健康状态检查的响应模式，当连接请求到达时回应“OK”后即断开连接，较少使用</p><h3 id="基于cookie的会话绑定"><a href="#基于cookie的会话绑定" class="headerlink" title="基于cookie的会话绑定"></a>基于cookie的会话绑定</h3><p>cookie <name> [ rewrite | insert | prefix ] [ indirect ] [ nocache ] [ postonly ] [ preserve ] [ httponly ] [ secure ] [ domain <domain> ]* [ maxidle <idle> ] [ maxlife <life> ]<br><name>：cookie名称，用于实现持久连接<br>rewrite：重写<br>insert：插入<br>prefix：前缀<br>配置示例：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">backend websrvs  balance     roundrobin  cookie WEBSRV insert nocache indirect  server   web1 <span class="token number">192.168</span>.45.11:80 check cookie srv1  server   web2 <span class="token number">192.168</span>.45.12:80 check cookie srv2<span class="token comment">#每个server有自己的唯一的cookie标识</span><span class="token comment">#在backend中为用户请求调度完成后操纵其cookie</span></code></pre></div><h3 id="统计接口启用相关的参数"><a href="#统计接口启用相关的参数" class="headerlink" title="统计接口启用相关的参数"></a>统计接口启用相关的参数</h3><p>stats enable<br>启用统计页；基于默认的参数启用stats page</p><ul><li>stats uri : /haproxy?stats uri默认值</li><li>stats realm : HAProxy Statistics</li><li>stats auth : no authentication</li></ul><p>stats uri <div class="code-wrapper"><prefix> 自定义stats page uri</p><p>stats auth <user>:<passwd> 认证时的账号和密码，可使用多次</p><p>stats realm <realm> 认证时的realm</p><p>stats hide-version 隐藏版本</p><p>stats refresh <delay> 设定自动刷新时间间隔</p><p>stats admin { if | unless } <cond> 启用stats page中的管理功能</p><p>配置示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash">listen stats     <span class="token builtin class-name">bind</span> :9099     stats <span class="token builtin class-name">enable</span>     stats realm HAPorxy<span class="token punctuation">\</span> Stats<span class="token punctuation">\</span> Page     stats auth 用户名：密码    stats admin <span class="token keyword">if</span> TRUE<span class="token comment">#在frountend中单独定义一个stats服务，监听9099端口</span><span class="token comment">#如果认证成功就开启管理功能</span></code></pre></div><h3 id="forwardfor配置"><a href="#forwardfor配置" class="headerlink" title="forwardfor配置"></a>forwardfor配置</h3><p>option forwardfor [ except <network> ] [ header <name> ] [ if-none ]<br>在由haproxy发往后端主机的请求报文中添加“X-ForwardedFor”首部，其值为前端客户端的地址；用于向后端主发送真实的客户端IP</p><p>[ except <network> ]：请求报请来自此处指定的网络时不予添加此首部，如haproxy自身所在网络</p><p>[ header <name> ]：使用自定义的首部名称，而非“XForwarded-For”</p><p>[ if-none ] 如果没有首部才添加首部，如果有使用默认值</p><p>为指定的MIME类型启用压缩传输功能<br>compression algo <algorithm> …：启用http协议的压缩机制，指明压缩算法gzip, deflate<br>compression type <mime type> …：指明压缩的MIMI类型</p><h3 id="错误页配置"><a href="#错误页配置" class="headerlink" title="错误页配置"></a>错误页配置</h3><p>errorfile <code> <file> 自定义错误页<br><code>：HTTP status code.<br>支持200, 400, 403, 408, 500, 502, 503, 504.<br><file>：错误页文件路径</p><p>示例：<br>使用haproxy主机本地的文件进行响应</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">errorfile <span class="token number">400</span> /etc/haproxy/errorfiles/400badreq.http errorfile <span class="token number">408</span> /dev/null     <span class="token comment"># workaround Chrome preconnect bug </span>errorfile <span class="token number">403</span> /etc/haproxy/errorfiles/403forbid.http errorfile <span class="token number">503</span> /etc/haproxy/errorfiles/503sorry.http </code></pre></div><p>使用url进行响应，响应状态码为302，不适用于GET以外的其他请求方法：<br>errorloc <code> <url> 相当于errorloc302 <code> <url>，利用302重定向至指URL</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">errorloc 503 http:&#x2F;&#x2F;www.a.com&#x2F;error_pages&#x2F;503.html</code></pre></div><h3 id="修改报文首部"><a href="#修改报文首部" class="headerlink" title="修改报文首部"></a>修改报文首部</h3><p>reqadd <string> [{if | unless} <cond>]<br>在请求报文尾部添加指定首部</p><p>rspadd <string> [{if | unless} <cond>]<br>在响应报文尾部添加指定首部<br>示例：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">rspadd X-Via:\ HAPorxy  #字符串中的空格要转义</code></pre></div><p>reqdel <search> [{if | unless} <cond>]<br>reqidel <search> [{if | unless} <cond>] (ignore case) 不分大小写<br>从请求报文中删除匹配正则表达式的首部</p><p>rspdel <search> [{if | unless} <cond>]<br>rspidel <search> [{if | unless} <cond>] (ignore case) 不分大小写从响应报文中删除匹配正则表达式的首部 示例： rspidel Server.*</p><h3 id="连接超时"><a href="#连接超时" class="headerlink" title="连接超时"></a>连接超时</h3><p>timeout client <timeout> 客户端最长空闲连接超时时长 默认单位是毫秒<br>timeout server <timeout> 后端服务器最长空闲连接超时时长<br>timeout http-keep-alive <timeout> 持久连接的持久时长<br>timeout http-request <timeout> 一次完整的HTTP请求的最大等待时长<br>timeout connect <timeout> 成功连接后端服务器的最大等待时长<br>timeout client-fin <timeout> 客户端半连接的空闲时长<br>timeout server-fin <timeout> 后端服务器半连接的空闲时长</p><h2 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h2><p>acl：haproxy的ACL用于实现基于请求报文的首部、响应报文的内容或其他的环境状态信息来做出转发决策，这大大增加了其配置弹性。其配置法则一般分为两部，首先定义ACL，既定义一个测试条件，而后在条件得到满足时执行某特定动作，如阻止访问或者转发至某特定的后端，<br>定义ACL的语法格式如下：<br>acl <aclname> <criterion> [flags] [operator] [<value>] …</p><p><aclname>：ACL名称，可使用字母 数字 : . - _ 区分字符大小写</p><p><criterion>： 指明检查条件<br>各种条件 :<br>dst 目标IP<br>dst_port 目标PORT<br>src 源IP<br>src_port 源PORT<br>示例：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">acl invalid_src src 172.16.100.200</code></pre></div><p><value>的类型：</p><ul><li>boolean</li><li>integer or integer range</li><li>IP address / network</li><li>string (exact, substring, suffix, prefix, subdir, domain)</li><li>regular expression</li><li>hex block</li></ul><flags>-i 不区分大小写-m 使用指定的pattern匹配方法-n 不做DNS解析-u 强制每个ACL必须唯一ID，否则多个同名ACL或关系-- 强制flag结束. 当字符串和某个flag相似时使用<p>[operator]<br>匹配整数值：eq、ge、gt、le、lt<br>匹配字符串：</p><ul><li>exact match (-m str) :字符串必须完全匹配模式</li><li>substring match (-m sub) :在提取的字符串中查找模式， 如果其中任何一个被发现，ACL将匹配</li><li>prefix match (-m beg) :在提取的字符串首部中查找模式 ，如果其中任何一个被发现，ACL将匹配</li><li>suffix match (-m end) :将模式与提取字符串的尾部进行比较，如果其中任何一个匹配，则ACL进行匹配</li><li>subdir match (-m dir) :查看提取出来的用斜线分隔（ “/”）的字符串，如果其中任何一个匹配，则ACL进行匹配</li><li>domain match (-m dom) :查找提取的用点（“.”）分隔 字符串，如果其中任何一个匹配，则ACL进行匹配</li></ul><h3 id="acl作为条件时的逻辑关系"><a href="#acl作为条件时的逻辑关系" class="headerlink" title="acl作为条件时的逻辑关系:"></a>acl作为条件时的逻辑关系:</h3><ul><li>与：隐式（默认）使用</li><li>或：使用“or” 或 “||”表示</li><li>否定：使用“!“ 表示</li></ul><p>示例：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> invalid_src invalid_port 与关系 <span class="token keyword">if</span> invalid_src <span class="token operator">||</span> invalid_port 或 <span class="token keyword">if</span> <span class="token operator">!</span> invalid_src 非 </code></pre></div><h3 id="base-string"><a href="#base-string" class="headerlink" title="base : string"></a>base : string</h3><p>返回第一个主机头和请求的路径部分的连接，该请求从第一个斜杠开始，并在问号之前结束,对虚拟主机有用<br><scheme>://<user>:<password>@<host>:<port>/<path>;&lt; params&gt;?<query>#<frag><br>base : exact string match<br>base_beg : prefix match<br>base_dir : subdir match<br>base_dom : domain match<br>base_end : suffix match<br>base_len : length match<br>base_reg : regex match<br>base_sub : substring match</p><h3 id="path-string"><a href="#path-string" class="headerlink" title="path : string"></a>path : string</h3><p>提取请求的URL路径，该路径从第一个斜杠开始，并在问号之 前结束（无主机部分）<br><scheme>://<user>:<password>@<host>:<port>/<path>;&lt; params&gt;?<query>#<frag><br>path : exact string match<br>path_beg : prefix match 匹配路径开头<br>path_dir : subdir match<br>path_dom : domain match<br>path_end : suffix match 匹配路径结尾<br>path_len : length match<br>path_reg : regex match 正则表达式匹配一类PATH<br>path_sub : substring match</p><h3 id="url-string"><a href="#url-string" class="headerlink" title="url : string"></a>url : string</h3><p>提取请求中的URL。一个典型的应用是具有预取能力的缓存， 以及需要从数据库聚合多个信息并将它们保存在缓存中的网页门户入口<br>url : exact string match<br>url_beg : prefix match URL开头，匹配协议<br>url_dir : subdir match<br>url_dom : domain match<br>url_end : suffix match URL结尾<br>url_len : length match<br>url_reg : regex match 正则表达式匹配一类url<br>url_sub : substring match</p><h3 id="req-hdr"><a href="#req-hdr" class="headerlink" title="req.hdr(["></a>req.hdr([</h3><p>提取在一个HTTP请求报文的首部<br>hdr([<name>[,<occ>]]) : exact string match<br>hdr_beg([<name>[,<occ>]]) : prefix match 首部开头<br>hdr_dir([<name>[,<occ>]]) : subdir match<br>hdr_dom([<name>[,<occ>]]) : domain match<br>hdr_end([<name>[,<occ>]]) : suffix match 首部结尾<br>hdr_len([<name>[,<occ>]]) : length match<br>hdr_reg([<name>[,<occ>]]) : regex match<br>hdr_sub([<name>[,<occ>]]) : substring match<br>示例：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">acl bad_curl hdr_sub<span class="token punctuation">(</span>User-Agent<span class="token punctuation">)</span> -i <span class="token function">curl</span> block <span class="token keyword">if</span> bad_curl </code></pre></div><h3 id="status-integer"><a href="#status-integer" class="headerlink" title="status : integer"></a>status : integer</h3><p>返回在响应报文中的状态码</p><h3 id="预定义ACL"><a href="#预定义ACL" class="headerlink" title="预定义ACL"></a>预定义ACL</h3><p>ACL名称 等价于 说明<br>TRUE always_true 总是匹配<br>FALSE always_false 从不匹配<br>HTTP req_proto_http 匹配HTTP协议<br>HTTP_1.0 req_ver 1.0 匹配HTTP协议1.0<br>HTTP_1.1 req_ver 1.1 匹配HTTP协议1.1<br>HTTP_CONTENT hdr_val(content-length) gt 0 匹配已存在内容长度<br>HTTP_URL_ABS url_reg ^[^/:]<em>:// 匹配URL绝对路径<br>HTTP_URL_SLASHurl_beg / 匹配URL相对路径<br>HTTP_URL_STAR url * 匹配 URL 等于 “</em>“<br>LOCALHOST src 127.0.0.1/8 匹配从localhost来的连接<br>METH_CONNECT method CONNECT 匹配HTTP CONNECT方法<br>METH_GETmethod GET HEAD #match HTTP GET or HEAD method<br>METH_HEAD method HEAD #match HTTP HEAD method<br>METH_OPTIONS method OPTIONS #match HTTP OPTIONS method<br>METH_POST method POST #match HTTP POST method<br>METH_TRACE method TRACE #match HTTP TRACE method<br>RDP_COOKIE req_rdp_cookie_cnt gt 0 #match presence of an RDP cookie<br>REQ_CONTENT req_len gt 0 #match data in the request buffer<br>WAIT_ENDwait_end #wait for end of content analysis</p><h3 id="acl配置"><a href="#acl配置" class="headerlink" title="acl配置"></a>acl配置</h3><h4 id="基于IP的访问控制"><a href="#基于IP的访问控制" class="headerlink" title="基于IP的访问控制"></a>基于IP的访问控制</h4><p>use_backend <backend> [{if | unless} <condition>]<br>当if/unless一个基于ACL的条件匹配时切换指定backend</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">acl invalid_src src <span class="token number">172.16</span>.200.2 block <span class="token keyword">if</span> invalid_src errorfile <span class="token number">403</span> /etc/fstab</code></pre></div><h4 id="七层请求的访问控制"><a href="#七层请求的访问控制" class="headerlink" title="七层请求的访问控制"></a>七层请求的访问控制</h4><p>http-request { allow | deny |add-header <name> <fmt> |set-header <name> <fmt> } [ { if | unless } <condition> ]</p><h4 id="四层请求访问控制"><a href="#四层请求访问控制" class="headerlink" title="四层请求访问控制"></a>四层请求访问控制</h4><p>tcp-request connection {accept|reject} [{if | unless} <condition>]<br>示例：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">listen <span class="token function">ssh</span> <span class="token builtin class-name">bind</span> :22022 balance leastconn acl invalid_src src <span class="token number">172.16</span>.200.2 tcp-request connection reject <span class="token keyword">if</span> invalid_src mode tcp server sshsrv1 <span class="token number">172.16</span>.100.6:22 check server sshsrv2 <span class="token number">172.16</span>.100.7:22 check backup</code></pre></div><h4 id="基于ACL的动静分离示例"><a href="#基于ACL的动静分离示例" class="headerlink" title="基于ACL的动静分离示例"></a>基于ACL的动静分离示例</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">frontend  web *:80     acl url_static       path_beg       -i /static /images /javascript /stylesheets     acl url_static       path_end       -i .jpg .gif .png .css .js .html .txt .htm     use_backend staticsrvs       <span class="token keyword">if</span> url_static     default_backend             appsrvs backend staticsrvs     balance     roundrobin     server      stcsrv1 <span class="token number">172.16</span>.100.6:80 check backend appsrvs     balance     roundrobin     server  app1 <span class="token number">172.16</span>.100.7:80 check     server  app1 <span class="token number">172.16</span>.100.7:8080 check listen stats     <span class="token builtin class-name">bind</span> :9091     stats <span class="token builtin class-name">enable</span>     stats auth admin:admin     stats admin <span class="token keyword">if</span> TRUE<span class="token comment">#一个ACL定义了两个条件，如果用户的请求满足PATH中带有/static /images /javascript /stylesheets 这些字符的，或者path是以.jpg .gif .png .css .js .html .txt .htm 这些字符结尾的就匹配ACL定义</span><span class="token comment">#满足ACL定义的请求为静态请求，被调度到后端的staticsrvs机组上</span><span class="token comment">#不满组以上两个条件的请求默认调度都后端包含两台服务器轮询的appsrvs机组上</span></code></pre></div><h3 id="支持https协议"><a href="#支持https协议" class="headerlink" title="支持https协议"></a>支持https协议</h3><p>配置HAProxy支持https协议：<br>1 支持ssl会话；<br>bind *:443 ssl crt /PATH/TO/SOME_PEM_FILE<br>crt 后证书文件为PEM格式，且同时包含证书和所有私钥<br>cat demo.crt demo.key &gt; demo.pem</p><p>2 把80端口的请求重向定443<br>bind *:80<br>redirect scheme https if !{ ssl_fc }</p><p>3 向后端传递用户请求的协议和端口（frontend或backend）<br>http_request set-header X-Forwarded-Port %[dst_port]<br>http_request add-header X-Forwared-Proto https if { ssl_fc }</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>haproxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>haproxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rabbitmq-windows</title>
    <link href="/2021/01/11/rabbitmq-windows-install/"/>
    <url>/2021/01/11/rabbitmq-windows-install/</url>
    
    <content type="html"><![CDATA[<p>rabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上。</p><h2 id="1-安装Erlang"><a href="#1-安装Erlang" class="headerlink" title="1.安装Erlang"></a>1.安装Erlang</h2><p>所以在安装rabbitMQ之前，需要先安装Erlang 。</p><p>小编使用的是<a href="https://pan.baidu.com/s/1c2826rA">otp_win64_18.1</a> ，需要其他版本或者32位系统的，可以去<a href="http://www.erlang.org/downloads">官网</a>下载。</p><p>全部点击“下一步”就行。</p><p>有的选择其他的安装方式，可能需要添加一下系统环境变量（正常安装的也要检查下）：</p><p><img src="https://i.loli.net/2021/01/29/rPNn6SghdmfvHtu.png" alt="img"></p><p>有最好，没有的话就手动添加嘛。</p><h2 id="2-安装RabbitMQ"><a href="#2-安装RabbitMQ" class="headerlink" title="2.安装RabbitMQ"></a>2.安装RabbitMQ</h2><p>下载运行<a href="https://pan.baidu.com/s/1cqpG0u">rabbitmq-server-3.6.5</a> ，需要其他版本或者32位系统的，可以去<a href="http://www.rabbitmq.com/download.html">官网</a>下载。</p><p>依旧可以不改变默认进行安装。</p><p>需要注意：默认安装的RabbitMQ 监听端口是5672</p><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h2><p>注册进服务 管理员身份执行 rabbitmq-service install</p><p>使用RabbitMQ 管理插件，可以更好的可视化方式查看Rabbit MQ 服务器实例的状态。</p><p>打开命令窗口：</p><p>输入命令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">&quot;C:\Program Files\RabbitMQ Server\rabbitmq_server-3.6.5\sbin\rabbitmq-plugins.bat&quot; enable rabbitmq_management</code></pre></div><p><img src="https://i.loli.net/2021/01/29/pKRy4mQU9Poz6lC.png" alt="img"></p><p>这样，就安装好插件了，是不是能使用了呢？别急，需要重启服务才行，使用命令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">net stop RabbitMQ &amp;&amp; net start RabbitMQ</code></pre></div><p>这时候的，也许会出现这种结果：</p><p><img src="https://i.loli.net/2021/01/29/S8awjq2sGLDTx34.png" alt="img"></p><p>“发生错误：发生系统错误 <em>5。 *拒绝访问。”</em>*</p><p>这是什么鬼？查了下，原来，5代表的是：不是系统管理员权限。</p><p>问题解决方案：使用管理员打开<em>cmd再执行此命令：</em></p><p><em><img src="https://i.loli.net/2021/01/29/DLEyYBsRPrktW4f.png" alt="img"></em></p><p>这样就结束了吗？当然没有。</p><h3 id="创建用户，密码，绑定角色"><a href="#创建用户，密码，绑定角色" class="headerlink" title="创建用户，密码，绑定角色"></a>创建用户，密码，绑定角色</h3><p>使用<em>rabbitmqctl控制台命令（位于*C:\Program Files\RabbitMQ Server\rabbitmq_server-3.6.5\sbin&gt;）来创建用户，密码，绑定权限等。</em>*</p><p>注意：安装路径不同的请看仔细啊。</p><p>rabbitmq的用户管理包括增加用户，删除用户，查看用户列表，修改用户密码。</p><p>查看已有用户及用户的角色：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">rabbitmqctl.bat list_users</code></pre></div><p><img src="https://i.loli.net/2021/04/18/lmQt6sKHPRq4wZc.png" alt="img"></p><p>新增一个用户：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">rabbitmqctl.bat add_user username password</code></pre></div><p><img src="https://i.loli.net/2021/01/29/OoEbayLInpQUScR.png" alt="img"></p><p>此时来看下我们当前用户哈：</p><p><img src="https://i.loli.net/2021/01/29/gUsbYMQkIi9zleX.png" alt="img"></p><p>eric 后面没有“[administrator]”</p><p>这个administrator是干嘛用的呢？这就涉及到用户角色问题了：</p><p>按照我个人理解，rabbitmq用户角色可分为五类：超级管理员, 监控者, 策略制定者, 普通管理者以及其他。</p><p>(1) 超级管理员(administrator)</p><p>可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p><p>(2) 监控者(monitoring)</p><p>可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等) </p><p>(3) 策略制定者(policymaker)</p><p>可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。</p><p>(4) 普通管理者(management)</p><p>仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。</p><p>(5) 其他的</p><p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p><p>好啦，我们也给 eric 变成 “超级管理员” 角色：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">rabbitmqctl.bat set_user_tags username administrator</code></pre></div><p><img src="https://i.loli.net/2021/01/29/2xHaJfvYmrkg3pt.png" alt="img"></p><p>再看下结果哈：</p><p><img src="https://i.loli.net/2021/01/29/ovjVFKL2hAsRXEJ.png" alt="img"></p><p>当然，除了上面的administrator 还有 monitoring、policymaker、management、自定义名称 ，对应上面介绍到的不同的角色。</p><p>像我们人一样，我们角色除了是公司的员工，还是父母的孩子、子女的爸妈等，用户也可以同时具有多个角色,设置方式:</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">rabbitmqctl.bat  set_user_tags  username tag1 tag2 ...</code></pre></div><p><img src="https://i.loli.net/2021/01/29/YMh9Kr4EnumZbQs.png" alt="img"></p><p>恩，现在总觉得guest 这个不安全（它的默认密码是guest）,想更改密码，好办：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">rabbitmqctl change_password userName newPassword</code></pre></div><p><img src="https://i.loli.net/2021/01/29/rdyDgh3YJ26wfaO.png" alt="img"></p><p>有的人也许会说，我就是看guest不爽，老子新增了administrator用户了，就是想干掉它，可以：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">rabbitmqctl.bat delete_user username</code></pre></div><p><img src="https://i.loli.net/2021/01/29/1UJQxXdPzy9rTkR.png" alt="img"></p><p> 这时，可能有人就要问了：命令框是只有一个用户了，你怎么操作啊？怎么查看执行情况啊/</p><p> 当然有路子啦：</p><p>使用浏览器打开<a href="http://localhost:15672/"> http://localhost:15672</a> 访问Rabbit Mq的管理控制台，使用刚才创建的账号登陆系统：</p><p> <img src="https://i.loli.net/2021/01/29/enjUqDQdfGZIMvz.png" alt="img"></p><p><img src="https://i.loli.net/2021/01/29/TMWnJjqCZdKfe3O.png" alt="img"></p><p>其实，除了可查看所有的信息 ，上面的命令 增删改查、权限设置，都可以在这个页面完成，还可以依据业务需求设置策略(policy)，具体的就不在这里啰嗦了，大家可以看看网上的帖子。</p><h3 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h3><p>用户有了角色，那也需要权限设置啊，别急，慢慢来：</p><p>按照官方文档，用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读写权限。</p><p>我们配置权限会影响到exchange、queue的声明和删除。</p><p>读写权限影响到从queue里取消息、向exchange发送消息以及queue和exchange的绑定(binding)操作。</p><p>例如： 将queue绑定到某exchange上，需要具有queue的可写权限，以及exchange的可读权限；向exchange发送消息需要具有exchange的可写权限；从queue里取数据需要具有queue的可读权限</p><p>权限相关命令为：</p><p>(1) 设置用户权限</p><p>rabbitmqctl  set_permissions  -p  VHostPath  User  ConfP  WriteP  ReadP</p><p>(2) 查看(指定hostpath)所有用户的权限信息</p><p>rabbitmqctl  list_permissions  [-p  VHostPath]</p><p>(3) 查看指定用户的权限信息</p><p>rabbitmqctl  list_user_permissions  User</p><p>(4)  清除用户的权限信息</p><p>rabbitmqctl  clear_permissions  [-p VHostPath]  User</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>middle-component</category>
      
      <category>rabbitmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rabbitmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rabbitmq-linux</title>
    <link href="/2021/01/11/rabbitmq-linux/"/>
    <url>/2021/01/11/rabbitmq-linux/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="1-MQ引言"><a href="#1-MQ引言" class="headerlink" title="1 MQ引言"></a>1 MQ引言</h2><h3 id="1-1-什么是MQ"><a href="#1-1-什么是MQ" class="headerlink" title="1.1 什么是MQ"></a>1.1 什么是MQ</h3><div class="code-wrapper"><pre class="language-bas" data-language="bas"><code class="language-bas">MQ(Message Quene) :  翻译为消息队列,通过典型的生产者和消费者模型,生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入,轻松的实现系统间解耦。别名为 消息中间件通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。</code></pre></div><h3 id="1-2-MQ有哪些"><a href="#1-2-MQ有哪些" class="headerlink" title="1.2 MQ有哪些"></a>1.2 MQ有哪些</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">当今市面上有很多主流的消息中间件，如老牌的ActiveMQ、RabbitMQ，炙手可热的Kafka，阿里巴巴自主开发<span class="token variable"><span class="token variable">`</span>RocketMQ<span class="token variable">`</span></span>等。</code></pre></div><h3 id="1-3-不同MQ特点"><a href="#1-3-不同MQ特点" class="headerlink" title="1.3 不同MQ特点"></a>1.3 不同MQ特点</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.ActiveMQActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。它是一个完全支持JMS规范的的消息中间件。丰富的API,多种集群架构模式让ActiveMQ在业界成为老牌的消息中间件,在中小型企业颇受欢迎<span class="token operator">!</span><span class="token number">2</span>.KafkaKafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。<span class="token number">3</span>.RocketMQRocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景。<span class="token number">4</span>.RabbitMQRabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</code></pre></div><h2 id="2-RabbitMQ-的引言"><a href="#2-RabbitMQ-的引言" class="headerlink" title="2 RabbitMQ 的引言"></a>2 RabbitMQ 的引言</h2><h3 id="2-1-RabbitMQ"><a href="#2-1-RabbitMQ" class="headerlink" title="2.1 RabbitMQ"></a>2.1 RabbitMQ</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">基于AMQP协议，erlang语言开发，是部署最广泛的开源消息中间件,是最受欢迎的开源消息中间件之一。</code></pre></div><p><img src="https://i.loli.net/2021/04/18/MmselvZFohcSPfC.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># AMQP 协议</span>AMQP（advanced message queuing protocol）`在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型:</code></pre></div><p><img src="https://i.loli.net/2021/04/18/idfcuntLH3MymCs.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/04/18/RgbjWCaPwLYSFhy.png" alt="在这里插入图片描述"></p><h4 id="2-2-2-下载的安装包"><a href="#2-2-2-下载的安装包" class="headerlink" title="2.2.2 下载的安装包"></a>2.2.2 下载的安装包</h4><p><img src="https://i.loli.net/2021/04/18/Zz6mDYlIoFijtpb.png" alt="在这里插入图片描述"></p><h4 id="2-2-3-安装步骤"><a href="#2-2-3-安装步骤" class="headerlink" title="2.2.3 安装步骤"></a>2.2.3 安装步骤</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.将rabbitmq安装包上传到linux系统中</span>erlang-22.0.7-1.el7.x86_64.rpmrabbitmq-server-3.7.18-1.el7.noarch.rpm<span class="token comment"># 2.安装Erlang依赖包</span><span class="token function">rpm</span> -ivh erlang-22.0.7-1.el7.x86_64.rpm<span class="token comment"># 3.安装RabbitMQ安装包(需要联网)</span>yum <span class="token function">install</span> -y rabbitmq-server-3.7.18-1.el7.noarch.rpm注意:默认安装完成后配置文件模板在:/usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example目录中,需要将配置文件复制到/etc/rabbitmq/目录中,并修改名称为rabbitmq.config<span class="token comment"># 4.复制配置文件</span><span class="token function">cp</span> /usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config<span class="token comment"># 5.查看配置文件位置</span><span class="token function">ls</span> /etc/rabbitmq/rabbitmq.config<span class="token comment"># 6.修改配置文件(参见下图:)</span><span class="token function">vim</span> /etc/rabbitmq/rabbitmq.config </code></pre></div><p><img src="https://i.loli.net/2021/04/18/BMuvYhcdKmbqL2o.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">将上图中配置文件中红色部分去掉<span class="token variable"><span class="token variable">`</span>%%<span class="token variable">`</span></span>,以及最后的<span class="token variable"><span class="token variable">`</span>,<span class="token variable">`</span></span>逗号 修改为下图:</code></pre></div><p><img src="https://i.loli.net/2021/04/18/wvKufWCj9LogHkP.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 7.执行如下命令,启动rabbitmq中的插件管理</span>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management出现如下说明:Enabling plugins on node rabbit@localhost:    rabbitmq_management    The following plugins have been configured:      rabbitmq_management      rabbitmq_management_agent      rabbitmq_web_dispatch    Applying plugin configuration to rabbit@localhost<span class="token punctuation">..</span>.    The following plugins have been enabled:      rabbitmq_management      rabbitmq_management_agent      rabbitmq_web_dispatch    <span class="token builtin class-name">set</span> <span class="token number">3</span> plugins.    Offline change<span class="token punctuation">;</span> changes will take effect at broker restart.<span class="token comment"># 8.启动RabbitMQ的服务</span>systemctl start rabbitmq-serversystemctl restart rabbitmq-serversystemctl stop rabbitmq-server<span class="token comment"># 9.查看服务状态(见下图:)</span>systemctl status rabbitmq-server  ● rabbitmq-server.service - RabbitMQ broker     Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/rabbitmq-server.service<span class="token punctuation">;</span> disabled<span class="token punctuation">;</span> vendor preset: disabled<span class="token punctuation">)</span>     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since 三 <span class="token number">2019</span>-09-25 <span class="token number">22</span>:26:35 CST<span class="token punctuation">;</span> 7s ago   Main PID: <span class="token number">2904</span> <span class="token punctuation">(</span>beam.smp<span class="token punctuation">)</span>     Status: <span class="token string">"Initialized"</span>     CGroup: /system.slice/rabbitmq-server.service             ├─2904 /usr/lib64/erlang/erts-10.4.4/bin/beam.smp -W w -A <span class="token number">64</span> -MBas ageffcbf -MHas ageffcbf -             MBlmbcs<span class="token punctuation">..</span>.             ├─3220 erl_child_setup <span class="token number">32768</span>             ├─3243 inet_gethost <span class="token number">4</span>             └─3244 inet_gethost <span class="token number">4</span>      <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.</code></pre></div><p><img src="https://i.loli.net/2021/04/18/zdCHtfNYlvEF94X.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 10.关闭防火墙服务</span>systemctl disable firewalld    Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.    Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.systemctl stop firewalld   <span class="token comment"># 11.访问web管理界面</span>http://10.15.0.8:15672/</code></pre></div><p><img src="https://i.loli.net/2021/04/18/NT6MHg1VeZfQW3m.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 12.登录管理界面</span>username:  guestpassword:  guest</code></pre></div><p><img src="https://i.loli.net/2021/04/18/mJ4FKDf3W8HuNOY.png" alt="在这里插入图片描述"></p><h2 id="3-RabiitMQ-配置"><a href="#3-RabiitMQ-配置" class="headerlink" title="3 RabiitMQ 配置"></a>3 RabiitMQ 配置</h2><h3 id="3-1-RabbitMQ-管理命令行"><a href="#3-1-RabbitMQ-管理命令行" class="headerlink" title="3.1 RabbitMQ 管理命令行"></a>3.1 RabbitMQ 管理命令行</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.服务启动相关</span>systemctl start<span class="token operator">|</span>restart<span class="token operator">|</span>stop<span class="token operator">|</span>status rabbitmq-server<span class="token comment"># 2.管理命令行  用来在不使用web管理界面情况下命令操作RabbitMQ</span>rabbitmqctl  <span class="token builtin class-name">help</span>  可以查看更多命令<span class="token comment"># 3.插件管理命令行</span>rabbitmq-plugins <span class="token builtin class-name">enable</span><span class="token operator">|</span>list<span class="token operator">|</span>disable </code></pre></div><h3 id="3-2-web管理界面介绍"><a href="#3-2-web管理界面介绍" class="headerlink" title="3.2 web管理界面介绍"></a>3.2 web管理界面介绍</h3><h4 id="3-2-1-overview概览"><a href="#3-2-1-overview概览" class="headerlink" title="3.2.1 overview概览"></a>3.2.1 overview概览</h4><p><img src="https://i.loli.net/2021/04/18/3NO4aJFsXBrSDlg.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消息的生产和消费，在这里可以查看连接情况`channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道。Exchanges：交换机，用来实现消息的路由Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列。</code></pre></div><h4 id="3-2-2-Admin用户和虚拟主机管理"><a href="#3-2-2-Admin用户和虚拟主机管理" class="headerlink" title="3.2.2 Admin用户和虚拟主机管理"></a>3.2.2 Admin用户和虚拟主机管理</h4><h5 id="3-2-2-1-添加用户"><a href="#3-2-2-1-添加用户" class="headerlink" title="3.2.2.1 添加用户"></a>3.2.2.1 添加用户</h5><p><img src="https://i.loli.net/2021/04/18/zQGZcmM62PwA53n.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">上面的Tags选项，其实是指定用户的角色，可选的有以下几个：超级管理员<span class="token punctuation">(</span>administrator<span class="token punctuation">)</span>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略<span class="token punctuation">(</span>policy<span class="token punctuation">)</span>进行操作。监控者<span class="token punctuation">(</span>monitoring<span class="token punctuation">)</span>可登陆管理控制台，同时可以查看rabbitmq节点的相关信息<span class="token punctuation">(</span>进程数，内存使用情况，磁盘使用情况等<span class="token punctuation">)</span>策略制定者<span class="token punctuation">(</span>policymaker<span class="token punctuation">)</span>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息<span class="token punctuation">(</span>上图红框标识的部分<span class="token punctuation">)</span>。普通管理者<span class="token punctuation">(</span>management<span class="token punctuation">)</span>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。其他无法登陆管理控制台，通常就是普通的生产者和消费者。</code></pre></div><h5 id="3-2-2-2-创建虚拟主机"><a href="#3-2-2-2-创建虚拟主机" class="headerlink" title="3.2.2.2 创建虚拟主机"></a>3.2.2.2 创建虚拟主机</h5><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 虚拟主机</span>为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</code></pre></div><p><img src="https://i.loli.net/2021/04/18/bVyu5X4OgpGCWx6.png" alt="在这里插入图片描述"></p><h5 id="3-2-2-3-绑定虚拟主机和用户"><a href="#3-2-2-3-绑定虚拟主机和用户" class="headerlink" title="3.2.2.3 绑定虚拟主机和用户"></a>3.2.2.3 绑定虚拟主机和用户</h5><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">创建好虚拟主机，我们还要给用户添加访问权限：点击添加好的虚拟主机：</code></pre></div><p><img src="https://i.loli.net/2021/04/18/RQlPFh5zMwIW2ST.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">进入虚拟机设置界面</code></pre></div><p><img src="https://i.loli.net/2021/04/18/Rgck5JvKy9V1IzS.png" alt="在这里插入图片描述"></p><h2 id="4-RabbitMQ-的第一个程序"><a href="#4-RabbitMQ-的第一个程序" class="headerlink" title="4 RabbitMQ 的第一个程序"></a>4 RabbitMQ 的第一个程序</h2><h3 id="4-1-AMQP协议的回顾"><a href="#4-1-AMQP协议的回顾" class="headerlink" title="4.1 AMQP协议的回顾"></a>4.1 AMQP协议的回顾</h3><p><img src="https://i.loli.net/2021/04/18/c8EQV5gdMCsPOiy.png" alt="在这里插入图片描述"></p><h3 id="4-2-RabbitMQ支持的消息模型"><a href="#4-2-RabbitMQ支持的消息模型" class="headerlink" title="4.2 RabbitMQ支持的消息模型"></a>4.2 RabbitMQ支持的消息模型</h3><p><img src="https://i.loli.net/2021/04/18/2mdSzIcQY5JXlnq.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/04/18/BaHWVrolvQ7Cz6g.png" alt="在这里插入图片描述"></p><h3 id="4-3-引入依赖"><a href="#4-3-引入依赖" class="headerlink" title="4.3 引入依赖"></a>4.3 引入依赖</h3><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h3 id="4-4-第一种模型-直连"><a href="#4-4-第一种模型-直连" class="headerlink" title="4.4 第一种模型(直连)"></a>4.4 第一种模型(直连)</h3><p><img src="https://i.loli.net/2021/04/18/P59CuhyOiNSTIt3.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">在上图的模型中，有以下概念：P：生产者，也就是要发送消息的程序C：消费者：消息的接受者，会一直等待消息到来。queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</code></pre></div><h4 id="4-4-1-开发生产者"><a href="#4-4-1-开发生产者" class="headerlink" title="4.4.1 开发生产者"></a>4.4.1 开发生产者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接工厂</span><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"10.15.0.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建通道</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数1: 是否持久化  参数2:是否独占队列 参数3:是否自动删除  参数4:其他属性</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hello rabbitmq"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h4 id="4-4-2-开发消费者"><a href="#4-4-2-开发消费者" class="headerlink" title="4.4.2 开发消费者"></a>4.4.2 开发消费者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建连接工厂</span><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"10.15.0.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h4 id="4-4-3-参数的说明"><a href="#4-4-3-参数的说明" class="headerlink" title="4.4.3 参数的说明"></a>4.4.3 参数的说明</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">'参数1'</span><span class="token operator">:</span>用来声明通道对应的队列<span class="token string">'参数2'</span><span class="token operator">:</span>用来指定是否持久化队列<span class="token string">'参数3'</span><span class="token operator">:</span>用来指定是否独占队列<span class="token string">'参数4'</span><span class="token operator">:</span>用来指定是否自动删除队列<span class="token string">'参数5'</span><span class="token operator">:</span>对队列的额外配置</code></pre></div><h3 id="4-4-第二种模型-work-quene"><a href="#4-4-第二种模型-work-quene" class="headerlink" title="4.4 第二种模型(work quene)"></a>4.4 第二种模型(work quene)</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">Work queues，也被称为（Task queues），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：让多个消费者绑定到一个队列，共同消费队列中的消息。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</code></pre></div><p><img src="https://i.loli.net/2021/04/18/bLG8p9XODPxUfa4.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">角色：P：生产者：任务的发布者C1：消费者-1，领取任务并且完成任务，假设完成速度较慢C2：消费者-2：领取任务并完成任务，假设完成速度快</code></pre></div><h4 id="4-4-1-开发生产者-1"><a href="#4-4-1-开发生产者-1" class="headerlink" title="4.4.1 开发生产者"></a>4.4.1 开发生产者</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">channel.queueDeclare<span class="token punctuation">(</span><span class="token string">"hello"</span>, true, false, false, null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  channel.basicPublish<span class="token punctuation">(</span><span class="token string">""</span>, <span class="token string">"hello"</span>, null, <span class="token punctuation">(</span>i+<span class="token string">"====>:我是消息"</span><span class="token punctuation">)</span>.getBytes<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="4-4-2-开发消费者-1"><a href="#4-4-2-开发消费者-1" class="headerlink" title="4.4.2 开发消费者-1"></a>4.4.2 开发消费者-1</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h4 id="4-4-3-开发消费者-2"><a href="#4-4-3-开发消费者-2" class="headerlink" title="4.4.3 开发消费者-2"></a>4.4.3 开发消费者-2</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//处理消息比较慢 一秒处理一个消息</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h4 id="4-4-4-测试结果"><a href="#4-4-4-测试结果" class="headerlink" title="4.4.4 测试结果"></a>4.4.4 测试结果</h4><p><img src="https://i.loli.net/2021/04/18/MIEmSFjkfXCuxqH.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/04/18/1XPDadeEWOxgKIT.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">总结:默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环。</code></pre></div><h4 id="4-4-5-消息自动确认机制"><a href="#4-4-5-消息自动确认机制" class="headerlink" title="4.4.5 消息自动确认机制"></a>4.4.5 消息自动确认机制</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">Doing a task can take a few seconds. You may wonder what happens <span class="token keyword">if</span> one of the consumers starts a long task and dies with it only partly done. With our current code, once RabbitMQ delivers a message to the consumer it immediately marks it <span class="token keyword">for</span> deletion. In this case, <span class="token keyword">if</span> you <span class="token function">kill</span> a worker we will lose the message it was just processing. We<span class="token string">'ll also lose all the messages that were dispatched to this particular worker but were not yet handled.But we don'</span>t want to lose any tasks. If a worker dies, we'd like the task to be delivered to another worker.</code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一次只接受一条未确认的消息</span><span class="token comment">//参数2:关闭自动确认消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动确认消息</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">设置通道一次只能消费一个消息关闭消息的自动确认,开启手动确认消息</code></pre></div><p><img src="https://i.loli.net/2021/04/18/MOtd2CeSYBTabhR.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/04/18/TO2cHtX6Ekqbxlh.png" alt="在这里插入图片描述"></p><h3 id="4-5-第三种模型-fanout"><a href="#4-5-第三种模型-fanout" class="headerlink" title="4.5 第三种模型(fanout)"></a>4.5 第三种模型(fanout)</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">fanout 扇出 也称为广播</code></pre></div><p><img src="https://i.loli.net/2021/04/18/CDlGo95wtrLTnsg.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">在广播模式下，消息发送流程是这样的：可以有多个消费者每个消费者有自己的queue（队列）每个队列都要绑定到Exchange（交换机）生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定。交换机把消息发送给绑定过的所有队列队列的消费者都能拿到消息。实现一条消息被多个消费者消费</code></pre></div><h4 id="4-5-1-开发生产者"><a href="#4-5-1-开发生产者" class="headerlink" title="4.5.1 开发生产者"></a>4.5.1 开发生产者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//广播 一条消息多个消费者同时消费</span><span class="token comment">//发布消息</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h4 id="4-5-2-开发消费者-1"><a href="#4-5-2-开发消费者-1" class="headerlink" title="4.5.2 开发消费者-1"></a>4.5.2 开发消费者-1</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将临时队列绑定exchange</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h4 id="4-5-3-开发消费者-2"><a href="#4-5-3-开发消费者-2" class="headerlink" title="4.5.3 开发消费者-2"></a>4.5.3 开发消费者-2</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将临时队列绑定exchange</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h4 id="4-5-4-开发消费者-3"><a href="#4-5-4-开发消费者-3" class="headerlink" title="4.5.4 开发消费者-3"></a>4.5.4 开发消费者-3</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将临时队列绑定exchange</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者3: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h4 id="4-5-5-测试结果"><a href="#4-5-5-测试结果" class="headerlink" title="4.5.5 测试结果"></a>4.5.5 测试结果</h4><p><img src="https://i.loli.net/2021/04/18/ejb41XwA76OSgvU.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/04/18/57j9i6dwC2JDtNK.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/04/18/RmizGpYdjxTeFPv.png" alt="在这里插入图片描述"></p><h3 id="4-6-第四种模型-Routing"><a href="#4-6-第四种模型-Routing" class="headerlink" title="4.6 第四种模型(Routing)"></a>4.6 第四种模型(Routing)</h3><h4 id="4-6-1-Routing-之订阅模型-Direct-直连"><a href="#4-6-1-Routing-之订阅模型-Direct-直连" class="headerlink" title="4.6.1 Routing 之订阅模型-Direct(直连)"></a>4.6.1 Routing 之订阅模型-Direct(直连)</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</code></pre></div><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">在Direct模型下：队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）消息的发送方在 向 Exchange发送消息时，也必须指定消息的 RoutingKey。Exchange不再把消息交给每一个绑定的队列，而是根据消息的Routing Key进行判断，只有队列的Routingkey与消息的 Routing key完全一致，才会接收到消息</code></pre></div><p><img src="https://i.loli.net/2021/04/18/cEAa8KmBpxkO5G4.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列C1：消费者，其所在队列指定了需要routing key 为 error 的消息C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</code></pre></div><h5 id="4-6-1-1-开发生产者"><a href="#4-6-1-1-开发生产者" class="headerlink" title="4.6.1.1 开发生产者"></a>4.6.1.1 开发生产者</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机  参数1:交换机名称 参数2:交换机类型 基于指令的Routing key转发</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//发布消息</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"指定的route key"</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">"的消息"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h5 id="4-6-1-2-开发消费者-1"><a href="#4-6-1-2-开发消费者-1" class="headerlink" title="4.6.1.2 开发消费者-1"></a>4.6.1.2 开发消费者-1</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"> <span class="token comment">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h5 id="4-6-1-3-开发消费者-2"><a href="#4-6-1-3-开发消费者-2" class="headerlink" title="4.6.1.3 开发消费者-2"></a>4.6.1.3 开发消费者-2</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h5 id="4-6-1-4-测试生产者发送Route-key为error的消息时"><a href="#4-6-1-4-测试生产者发送Route-key为error的消息时" class="headerlink" title="4.6.1.4 测试生产者发送Route key为error的消息时"></a>4.6.1.4 测试生产者发送Route key为error的消息时</h5><p><img src="https://i.loli.net/2021/04/18/tT7oXLDnJ5W9kEH.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020103022070734.png#pic_center" alt="在这里插入图片描述"></p><h5 id="4-6-1-5-测试生产者发送Route-key为info的消息时"><a href="#4-6-1-5-测试生产者发送Route-key为info的消息时" class="headerlink" title="4.6.1.5 测试生产者发送Route key为info的消息时"></a>4.6.1.5 测试生产者发送Route key为info的消息时</h5><p><img src="https://i.loli.net/2021/04/18/mnUizOcjs87Npfw.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/04/18/AW2ioG6tfkbKMcD.png" alt="在这里插入图片描述"></p><h4 id="4-6-2-Routing-之订阅模型-Topic"><a href="#4-6-2-Routing-之订阅模型-Topic" class="headerlink" title="4.6.2 Routing 之订阅模型-Topic"></a>4.6.2 Routing 之订阅模型-Topic</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">Topic类型的Exchange与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key的时候使用通配符！这种模型Routingkey 一般都是由一个或多个单词组成，多个单词之间以”.”分割，例如： item.insert</code></pre></div><p><img src="https://i.loli.net/2021/04/18/AfzHat3eW7kThOq.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 统配符</span>* <span class="token punctuation">(</span>star<span class="token punctuation">)</span> can substitute <span class="token keyword">for</span> exactly one word.    匹配不多不少恰好1个词<span class="token comment"># (hash) can substitute for zero or more words.  匹配一个或多个词</span><span class="token comment"># 如:</span>audit.<span class="token comment">#    匹配audit.irs.corporate或者 audit.irs 等</span>    audit.*   只能匹配 audit.irs</code></pre></div><h5 id="4-6-2-1-开发生产者"><a href="#4-6-2-1-开发生产者" class="headerlink" title="4.6.2.1 开发生产者"></a>4.6.2.1 开发生产者</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//生命交换机和交换机类型 topic 使用动态路由(通配符方式)</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> routekey <span class="token operator">=</span> <span class="token string">"user.save"</span><span class="token punctuation">;</span><span class="token comment">//动态路由key</span><span class="token comment">//发布消息</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span>routekey<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"这是路由中的动态订阅模型,route key: ["</span><span class="token operator">+</span>routekey<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h5 id="4-6-2-2-开发消费者-1"><a href="#4-6-2-2-开发消费者-1" class="headerlink" title="4.6.2.2 开发消费者-1"></a>4.6.2.2 开发消费者-1</h5><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">Routing Key中使用*通配符方式</code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"> <span class="token comment">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列与交换机并设置获取交换机中动态路由</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h5 id="4-6-2-3-开发消费者-2"><a href="#4-6-2-3-开发消费者-2" class="headerlink" title="4.6.2.3 开发消费者-2"></a>4.6.2.3 开发消费者-2</h5><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">Routing Key中使用*通配符方式</code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建临时队列</span><span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定队列与交换机并设置获取交换机中动态路由</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h5 id="4-6-2-4-测试结果"><a href="#4-6-2-4-测试结果" class="headerlink" title="4.6.2.4 测试结果"></a>4.6.2.4 测试结果</h5><p><img src="https://i.loli.net/2021/04/18/y89cUmXwRD2qZjS.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/04/18/pioSVPHIqmTtXeh.png" alt="在这里插入图片描述"></p><h2 id="5-SpringBoot中使用RabbitMQ"><a href="#5-SpringBoot中使用RabbitMQ" class="headerlink" title="5. SpringBoot中使用RabbitMQ"></a>5. SpringBoot中使用RabbitMQ</h2><h3 id="5-1-搭建初始环境"><a href="#5-1-搭建初始环境" class="headerlink" title="5.1 搭建初始环境"></a>5.1 搭建初始环境</h3><h4 id="5-1-1-引入依赖"><a href="#5-1-1-引入依赖" class="headerlink" title="5.1.1 引入依赖"></a>5.1.1 引入依赖</h4><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h4 id="5-1-2-配置配置文件"><a href="#5-1-2-配置配置文件" class="headerlink" title="5.1.2 配置配置文件"></a>5.1.2 配置配置文件</h4><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">spring:  application:    name: springboot_rabbitmq  rabbitmq:    host: 10.15.0.9    port: 5672    username: ems    password: 123    virtual-host: &#x2F;ems</code></pre></div><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">RabbitTemplate用来简化操作    使用时候直接在项目中注入即可使用</code></pre></div><h3 id="5-2-第一种hello-world模型使用"><a href="#5-2-第一种hello-world模型使用" class="headerlink" title="5.2 第一种hello world模型使用"></a>5.2 第一种hello world模型使用</h3><h4 id="开发生产者"><a href="#开发生产者" class="headerlink" title="开发生产者"></a>开发生产者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="开发消费者"><a href="#开发消费者" class="headerlink" title="开发消费者"></a>开发消费者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloCustomer</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@RabbitHandler</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="5-3-第二种work模型使用"><a href="#5-3-第二种work模型使用" class="headerlink" title="5.3 第二种work模型使用"></a>5.3 第二种work模型使用</h3><h4 id="开发生产者-1"><a href="#开发生产者-1" class="headerlink" title="开发生产者"></a>开发生产者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token string">"hello work!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="开发消费者-1"><a href="#开发消费者-1" class="headerlink" title="开发消费者"></a>开发消费者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">说明:默认在Spring AMQP实现中Work这种方式就是公平调度,如果需要实现能者多劳需要外配置</code></pre></div><h3 id="5-4-Fanout-广播模型"><a href="#5-4-Fanout-广播模型" class="headerlink" title="5.4 Fanout 广播模型"></a>5.4 Fanout 广播模型</h3><h4 id="开发生产者-2"><a href="#开发生产者-2" class="headerlink" title="开发生产者"></a>开发生产者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFanout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"这是日志广播"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="开发消费者-2"><a href="#开发消费者-2" class="headerlink" title="开发消费者"></a>开发消费者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutCustomer</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>           value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>           exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>   <span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>           value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span> <span class="token comment">//创建临时队列</span>           exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>  <span class="token comment">//绑定交换机类型</span>   <span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="5-5-Route-路由模型"><a href="#5-5-Route-路由模型" class="headerlink" title="5.5 Route 路由模型"></a>5.5 Route 路由模型</h3><h4 id="开发生产者-3"><a href="#开发生产者-3" class="headerlink" title="开发生产者"></a>开发生产者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directs"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"error 的日志信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="开发消费者-3"><a href="#开发消费者-3" class="headerlink" title="开发消费者"></a>开发消费者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectCustomer</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"directs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"directs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="5-6-Topic-订阅模型-动态路由模型"><a href="#5-6-Topic-订阅模型-动态路由模型" class="headerlink" title="5.6 Topic 订阅模型(动态路由模型)"></a>5.6 Topic 订阅模型(动态路由模型)</h3><h4 id="开发生产者-4"><a href="#开发生产者-4" class="headerlink" title="开发生产者"></a>开发生产者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token comment">//topic</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.save.findAll"</span><span class="token punctuation">,</span><span class="token string">"user.save.findAll 的消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="开发消费者-4"><a href="#开发消费者-4" class="headerlink" title="开发消费者"></a>开发消费者</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user.*"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user.#"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="6-MQ的应用场景"><a href="#6-MQ的应用场景" class="headerlink" title="6 MQ的应用场景"></a>6 MQ的应用场景</h2><h3 id="6-1-异步处理"><a href="#6-1-异步处理" class="headerlink" title="6.1 异步处理"></a>6.1 异步处理</h3><p>场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种 1.串行的方式 2.并行的方式</p><p>串行方式: 将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有必要等待的东西. </p><p><img src="https://i.loli.net/2021/04/18/6YbBvpyTaiI9nkx.png" alt="在这里插入图片描述"></p><p>并行方式: 将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。 </p><p><img src="https://i.loli.net/2021/04/18/yBKLFu8bDeOthRl.png" alt="在这里插入图片描述"></p><p>消息队列:假设三个业务节点分别使用50ms,串行方式使用时间150ms,并行使用时间100ms。虽然并行已经提高的处理时间,但是,前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,应该是写入数据库后就返回.  消息队列: 引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理 </p><p><img src="https://i.loli.net/2021/04/18/JFPQaThGygjENRo.jpg" alt="在这里插入图片描述"></p><h3 id="6-2-应用解耦"><a href="#6-2-应用解耦" class="headerlink" title="6.2 应用解耦"></a>6.2 应用解耦</h3><p>场景：双11是购物狂节,用户下单后,订单系统需要通知库存系统,传统的做法就是订单系统调用库存系统的接口. </p><p><img src="https://i.loli.net/2021/04/18/CMG7IKF5jeagnbT.png" alt="在这里插入图片描述"></p><p>这种做法有一个缺点:<br>当库存系统出现故障时,订单就会失败。 订单系统和库存系统高耦合.  引入消息队列 </p><p><img src="https://i.loli.net/2021/04/18/OTHaQY2fGpsyv7R.png" alt="在这里插入图片描述"></p><p>订单系统:用户下单后,订单系统完成持久化处理,将消息写入消息队列,返回用户订单下单成功。</p><p>库存系统:订阅下单的消息,获取下单消息,进行库操作。  就算库存系统出现故障,消息队列也能保证消息的可靠投递,不会导致消息丢失.</p><h3 id="6-3-流量削峰"><a href="#6-3-流量削峰" class="headerlink" title="6.3 流量削峰"></a>6.3 流量削峰</h3><p>场景: 秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。  </p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">作用:<span class="token number">1</span>.可以控制活动人数，超过此一定阀值的订单直接丢弃<span class="token punctuation">(</span>我为什么秒杀一次都没有成功过呢^^<span class="token punctuation">)</span> <span class="token number">2</span>.可以缓解短时间的高流量压垮应用<span class="token punctuation">(</span>应用程序按自己的最大处理能力获取订单<span class="token punctuation">)</span> </code></pre></div><p><img src="https://i.loli.net/2021/04/18/HNy2Dgm4XErOqBh.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面.  <span class="token number">2</span>.秒杀业务根据消息队列中的请求信息，再做后续处理.</code></pre></div><h2 id="7-RabbitMQ的集群"><a href="#7-RabbitMQ的集群" class="headerlink" title="7 RabbitMQ的集群"></a>7 RabbitMQ的集群</h2><h3 id="7-1-集群架构"><a href="#7-1-集群架构" class="headerlink" title="7.1 集群架构"></a>7.1 集群架构</h3><h4 id="7-1-1-普通集群-副本集群"><a href="#7-1-1-普通集群-副本集群" class="headerlink" title="7.1.1 普通集群(副本集群)"></a>7.1.1 普通集群(副本集群)</h4><p>All data/state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this are message queues, which by default reside on one node, though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster   –摘自官网<br>默认情况下:RabbitMQ代理操作所需的所有数据/状态都将跨所有节点复制。这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问</p><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><p><img src="https://i.loli.net/2021/04/18/jkVhnrsCSEIi7NB.png" alt="在这里插入图片描述"></p><p>核心解决问题:  当集群中某一时刻master节点宕机,可以对Quene中信息,进行备份</p><h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.集群规划</span>node1: <span class="token number">10.15</span>.0.3  mq1  master 主节点node2: <span class="token number">10.15</span>.0.4  mq2  repl1  副本节点node3: <span class="token number">10.15</span>.0.5  mq3  repl2  副本节点<span class="token comment"># 1.克隆三台机器主机名和ip映射</span><span class="token function">vim</span> /etc/hosts加入: <span class="token number">10.15</span>.0.3 mq1    <span class="token number">10.15</span>.0.4 mq2    <span class="token number">10.15</span>.0.5 mq3node1: <span class="token function">vim</span> /etc/hostname 加入:  mq1node2: <span class="token function">vim</span> /etc/hostname 加入:  mq2node3: <span class="token function">vim</span> /etc/hostname 加入:  mq3<span class="token comment"># 2.三个机器安装rabbitmq,并同步cookie文件,在node1上执行:</span><span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/<span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/<span class="token comment"># 3.查看cookie是否一致:</span>node1: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookie node2: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookie node3: <span class="token function">cat</span> /var/lib/rabbitmq/.erlang.cookie <span class="token comment"># 4.后台启动rabbitmq所有节点执行如下命令,启动成功访问管理界面:</span>rabbitmq-server -detached <span class="token comment"># 5.在node2和node3执行加入集群命令:</span><span class="token number">1</span>.关闭       rabbitmqctl stop_app<span class="token number">2</span>.加入集群    rabbitmqctl join_cluster rabbit@mq1<span class="token number">3</span>.启动服务    rabbitmqctl start_app<span class="token comment"># 6.查看集群状态,任意节点执行:</span>rabbitmqctl cluster_status<span class="token comment"># 7.如果出现如下显示,集群搭建成功:</span>Cluster status of node rabbit@mq3 <span class="token punctuation">..</span>.<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>nodes,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>disc,<span class="token punctuation">[</span>rabbit@mq1,rabbit@mq2,rabbit@mq3<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>running_nodes,<span class="token punctuation">[</span>rabbit@mq1,rabbit@mq2,rabbit@mq3<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>cluster_name,<span class="token operator">&lt;&lt;</span><span class="token string">"rabbit@mq1"</span><span class="token operator">>></span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>partitions,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>alarms,<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>rabbit@mq1,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>rabbit@mq2,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span>rabbit@mq3,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre></div><h2 id="8-登录管理界面-展示如下状态"><a href="#8-登录管理界面-展示如下状态" class="headerlink" title="8.登录管理界面,展示如下状态:"></a>8.登录管理界面,展示如下状态:</h2><p><img src="https://i.loli.net/2021/04/18/Fxpf2aYR6dmB9ng.png" alt="在这里插入图片描述"></p><h2 id="9-测试集群在node1上-创建队列"><a href="#9-测试集群在node1上-创建队列" class="headerlink" title="9.测试集群在node1上,创建队列"></a>9.测试集群在node1上,创建队列</h2><p><img src="https://i.loli.net/2021/04/18/d4XFNuChtAlRncx.png" alt="在这里插入图片描述"></p><h2 id="10-查看node2和node3节点"><a href="#10-查看node2和node3节点" class="headerlink" title="10.查看node2和node3节点:"></a>10.查看node2和node3节点:</h2><p><img src="https://i.loli.net/2021/04/18/jDWCQuo7bdhR6sX.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/04/18/pur124iGBlMYJbW.png" alt="在这里插入图片描述"></p><h2 id="11-关闭node1节点-执行如下命令-查看node2和node3"><a href="#11-关闭node1节点-执行如下命令-查看node2和node3" class="headerlink" title="11.关闭node1节点,执行如下命令,查看node2和node3:"></a>11.关闭node1节点,执行如下命令,查看node2和node3:</h2><div class="code-wrapper"><pre><code>rabbitmqctl stop_app</code></pre></div><p><img src="https://i.loli.net/2021/04/18/epYgOvkXPSW7J96.png" alt="在这里插入图片描述"></p><p><img src="https://i.loli.net/2021/04/18/kzXcDiLjJdTwG8P.png" alt="在这里插入图片描述"></p><h4 id="7-1-2-镜像集群"><a href="#7-1-2-镜像集群" class="headerlink" title="7.1.2 镜像集群"></a>7.1.2 镜像集群</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">This guide covers mirroring <span class="token punctuation">(</span>queue contents replication<span class="token punctuation">)</span> of classic queues  --摘自官网By default, contents of a queue within a RabbitMQ cluster are located on a single node <span class="token punctuation">(</span>the node on <span class="token function">which</span> the queue was declared<span class="token punctuation">)</span>. This is <span class="token keyword">in</span> contrast to exchanges and bindings, <span class="token function">which</span> can always be considered to be on all nodes. Queues can optionally be made *mirrored* across multiple nodes. --摘自官网镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。</code></pre></div><p>集群架构图</p><p><img src="https://i.loli.net/2021/04/18/CX2tKmBg5bOGlFr.png" alt="在这里插入图片描述"></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.策略说明</span>rabbitmqctl set_policy <span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>vhost<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--priority <span class="token operator">&lt;</span>priority<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--apply-to <span class="token operator">&lt;</span>apply-to<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span>definition<span class="token operator">></span>-p Vhost： 可选参数，针对指定vhost下的queue进行设置Name:     policy的名称Pattern: queue的匹配模式<span class="token punctuation">(</span>正则表达式<span class="token punctuation">)</span>Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode         ha-mode:指明镜像队列的模式，有效值为 all/exactly/nodes                      all：表示在集群中所有的节点上进行镜像                      exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定                      nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定           ha-params：ha-mode模式需要用到的参数              ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual              priority：可选参数，policy的优先级                             <span class="token comment"># 1.查看当前策略</span>rabbitmqctl list_policies<span class="token comment"># 2.添加策略</span>rabbitmqctl set_policy ha-all <span class="token string">'^hello'</span> <span class="token string">'&#123;"ha-mode":"all","ha-sync-mode":"automatic"&#125;'</span> 说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列<span class="token comment"># 3.删除策略</span>rabbitmqctl clear_policy ha-all<span class="token comment"># 4.测试集群</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>middle-component</category>
      
      <category>rabbitmq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rabbitmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>luna-macos</title>
    <link href="/2021/01/10/macos/"/>
    <url>/2021/01/10/macos/</url>
    
    <content type="html"><![CDATA[<p>1.安装brew  wget等</p><p>先安装brew再用brew安装wget</p><p>1&gt; Homebrew</p><p>Homebrew是以最简单，最灵活的方式来安装苹果公司在MacOS中不包含的UNIX工具</p><p>/usr/bin/ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p><p>如遇</p><p>Press RETURN to continue or any other key to abort<br>==&gt; Downloading and installing Homebrew…<br>error: could not lock config file /usr/local/Homebrew/.git/config: Permission denied<br>fatal: could not set ‘core.repositoryformatversion’ to ‘0’<br>Failed during: git init -q</p><p>权限不够，则</p><p>sudo chgrp -R admin /usr/local</p><p>sudo chmod -R g+w /usr/local</p><p>改变目录权限</p><p>如遇<br>curl: (7) Failed to connect to raw.githubusercontent.com port 443: Operation timed out<br>/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/universal-darwin18/rbconfig.rb:215: warning: Insecure world writable dir /usr/local/sbin in PATH, mode 040777</p><p>上述方法安装不了（被强了）， 就用下面这个文件安装</p><p>下载后命名为brew_install.rb，下载链接: <a href="https://pan.baidu.com/s/1TCliuLQNer88rMw9ngV1ag">https://pan.baidu.com/s/1TCliuLQNer88rMw9ngV1ag</a>  密码: 2t5o</p><p>然后再执行</p><p>ruby brew_install.rb</p><p>这样就可以安装好brew_install.rb文件</p><p><img src="https://www.isczy.tk/luna-image-bed/img/20210129141639.png" alt="img"></p><p>brew update  更新brew</p><p>brew install {应用名，如git} 安装软件</p><p>brew cask install {应用名，如git} 也是下载安装，与上面的区别，请查看<a href="https://www.zhihu.com/question/22624898">https://www.zhihu.com/question/22624898</a></p><p>更多用法请 brew help</p><p>如安装下载node  brew install node</p><p>如遇  Warning: node 12.4.0 is already installed and up-to-date<br>To reinstall 12.4.0, run <code>brew reinstall node</code></p><p>则  brew upgrade node</p><p>如遇curl: (7) Failed to connect to raw.githubusercontent.com port 443: Operation timed out</p><p><a href="https://blog.csdn.net/sinat_27741463/article/details/102950077">https://blog.csdn.net/sinat_27741463/article/details/102950077</a></p><p>如果你的mac是10.14.6 以上，homebrew安装失败 可以试试用国内的源。亲测可用</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">&#x2F;bin&#x2F;zsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;cunkai&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;Homebrew.sh)&quot;</code></pre></div><p>/bin/zsh -c “$(curl -fsSL <a href="https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;">https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</a></p><p><img src="https://i.loli.net/2021/01/29/6e2cTJQNVqBjAuH.png" alt="img"></p><p><img src="https://i.loli.net/2021/01/29/Yj16uqSt9CPfdJw.png" alt="img"></p><p>安装完后的样子如下</p><p><img src="https://i.loli.net/2021/01/29/FTxqyPK7YbLJHk3.png" alt="img"></p><p>2&gt; wget</p><p>安装万brew再安装wget</p><p>brew install wget</p><p>3&gt; rpm 目前没安装</p><p>下载地址：<a href="http://rpm.pbone.net/index.php3/stat/4/idpl/31936885/dir/scientific_linux_6/com/wget-1.12-8.el6.x86_64.rpm.html">http://rpm.pbone.net/index.php3/stat/4/idpl/31936885/dir/scientific_linux_6/com/wget-1.12-8.el6.x86_64.rpm.html</a></p><p><img src="https://i.loli.net/2021/01/29/k4xOVfJ8cMnw2E6.png" alt="img"></p><p>2.安装jdk  <a href="https://jingyan.baidu.com/article/7f766daffd99354101e1d095.html">https://jingyan.baidu.com/article/7f766daffd99354101e1d095.html</a></p><p>安装完毕 java -version</p><p><img src="https://i.loli.net/2021/01/29/vpzOLn2RHqPkBjd.png" alt="img"></p><p>3.安装maven，brew install maven 安装完毕 mvn -version</p><p><img src="https://i.loli.net/2021/01/29/Sg29smA1tUybZLp.png" alt="img"></p><p>查找Java_home路径的命令/usr/libexec/java_home</p><p><img src="https://i.loli.net/2021/01/29/VkupbJRyIe5E3hQ.png" alt="img"></p><p>objc[6704]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/bin/java (0x1026804c0) and /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/libinstrument.dylib (0x1027044e0). One of the two will be used. Which one is undefined.</p><p>解决办法：</p><p>help-Edit Custom Properties 里添加</p><div class="code-wrapper"><pre class="language-html" data-language="html"><code class="language-html"># custom IntelliJ IDEA propertiesidea_rtidea.no.launcher=true</code></pre></div><p>4.Chrome浏览器jsonview插件安装</p><p><a href="https://www.cnblogs.com/whycxb/p/7126116.html">https://www.cnblogs.com/whycxb/p/7126116.html</a></p><p><img src="https://i.loli.net/2021/01/29/t14bUgvipT2YueC.png" alt="img"></p><p>Chrome浏览器安装Set Character Encoding</p><p><a href="https://jingyan.baidu.com/article/5552ef47974e5f518ffbc9f8.html">https://jingyan.baidu.com/article/5552ef47974e5f518ffbc9f8.html</a></p><p><img src="https://i.loli.net/2021/01/29/uAVyTIieXFDd3Jt.png" alt="img"></p><p>5.UrlEncode编码/UrlDecode解码 - 站长工具</p><p><a href="http://tool.chinaz.com/tools/urlencode.aspx">http://tool.chinaz.com/tools/urlencode.aspx</a></p><p><img src="https://i.loli.net/2021/01/29/LHTeohJap4QXANs.png" alt="img"></p><p>6.iterm2下字体以及配色方案，Mac下终端配置（iterm2 + oh-my-zsh + solarized配色方案）</p><p><strong>idea下不显示git分支，要安装 oh-my-zsh 即可</strong></p><p><a href="https://zhuanlan.zhihu.com/p/64024555">https://zhuanlan.zhihu.com/p/64024555</a></p><p>修改完iterm主题，记得source！！！若选择<strong>agnoster</strong>主题，应用这个主题需要特殊的字体支持，否则会出现乱码情况</p><p>进入：iTerm2 &gt; Profiles &gt; Text &gt; Font，修改字体为：Meslo LG S DZ Regular for Powerline</p><p>个人选择的是”robbyrussell”主题，当然也有选ys主题的，看个人爱好吧</p><p><img src="https://i.loli.net/2021/01/29/Qaz6igkbFeRlZVp.png" alt="img"></p><hr><hr><p>如遇error: RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54<br>fatal: the remote end hung up unexpectedly<br>fatal: early EOF<br>fatal: index-pack failed</p><p>参考博客<a href="https://blog.csdn.net/weixin_43935605/article/details/100095722">https://blog.csdn.net/weixin_43935605/article/details/100095722</a></p><p>iTerm2配置用于同时打开多个ssh会话（支持多集群，多机器管理）</p><p>本地</p><p>Host *<br>ControlMaster auto<br>ControlPath ~/.ssh/master-%r@%h:%p<br>ControlPersist yes<br>ServerAliveInterval 60</p><p>保存后在iterm2-Perferences-Profiles配置跳板机-服务器username@ip</p><p><img src="https://i.loli.net/2021/01/29/6H3QbEAyJXncsDp.png" alt="img"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>Mac ITerm2连接服务器自动断开解决办法</p><p>在mac下使用ITerm2通过ssh连接远程服务器时，总会一段时间没有操作后，ssh便会被被自动断开连接</p><p>iTerm2-Preferences-Profiles-Session修改when idle,send ASCII code 0 every 9999 seconds</p><p><img src="https://i.loli.net/2021/01/29/2tXmRjWIKfYwGzP.png" alt="img"></p><p>或者 vim ~/.ssh/config</p><p>Host *</p><p>ControlMaster auto</p><p>ControlPath ~/.ssh/master-%r@%h:%p</p><p>ControlPersist yes</p><p>ServerAliveInterval 14400</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>修改 host 配置，在终端中输入下列指令，打开编辑文件。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">sudo vi &#x2F;etc&#x2F;hosts</code></pre></div><p>进入编辑模式，在最下面添加 13.229.188.59 github.com<br>再次尝试在终端 ping github.com，发现已经成功了。</p><p><img src="https://i.loli.net/2021/01/29/uHtRbZNhW5aJoCA.png" alt="img"></p><hr><hr><p>安装完乱码</p><p><img src="https://i.loli.net/2021/01/29/5b4HhDRuKBvnSmc.png" alt="img"></p><p>解决方法</p><p>安装Meslo字体，否则会出现乱码：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/powerline/fonts.git <span class="token builtin class-name">cd</span> fonts ./install.sh </code></pre></div><p>如遇<br>Cloning into ‘fonts’…<br>remote: Enumerating objects: 968, done.<br>error: RPC failed; curl 18 transfer closed with outstanding read data remaining<br>fatal: the remote end hung up unexpectedly<br>fatal: early EOF<br>fatal: index-pack failed</p><p>在执行git clone命令时报错：fatal: early EOF。解决办法如下：</p><p>1.关闭压缩</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">git config --global core.compression 0</code></pre></div><p>2.然后执行部分clone</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">git clone --depth 1 &lt;repo_URI&gt;</code></pre></div><p>其中代表你的远程代码仓库地址，这里我的是用git clone –depth 1 <a href="https://github.com/powerline/fonts.git">https://github.com/powerline/fonts.git</a></p><p>3.如果起作用了，clone剩下的代码：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">git fetch --unshallow </code></pre></div><p>4.以后执行常规操作就行了</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">git pull --all</code></pre></div><p>因为git代码一直拉不下来，所有换一种方式，就是修改oh-my-zsh主题</p><p>vim .zshrc</p><p>修改  ZSH_THEME=”robbyrussell”  之前为  ZSH_THEME=”agnoster” </p><p># ZSH_THEME_RANDOM_CANDIDATES=( “robbyrussell” “agnoster” )</p><p>效果如下</p><p><img src="https://i.loli.net/2021/01/29/ZXKgJlabHu6P2SY.png" alt="img"></p><p>[zsh 配置] zsh命令自动补全插件</p><p>下载该插件到.oh-my-zsh的插件目录  /Users/qa/.oh-my-zsh/plugins</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">git clone git:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $ZSH_CUSTOM&#x2F;plugins&#x2F;zsh-autosuggestions</code></pre></div><p>编辑/Users/qa/.zshrc文件</p><p>找到plugins=(git)这一行，如果没有添加。更改为如下 注意不要注释掉之前的plugins=(git) 要直接修改这行</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">plugins&#x3D;(git zsh-autosuggestions)</code></pre></div><p>plugins=(git zsh-autosuggestions)</p><p>记得source .zshrc </p><p><img src="https://i.loli.net/2021/01/29/vLI7j6Ck5XMxOAy.png" alt="img"></p><p>效果如上图最后一行</p><p><img src="https://i.loli.net/2021/01/29/WQ3plmnsE2yeYZC.png" alt="img"></p><p><img src="https://i.loli.net/2021/01/29/mstvxj9bJzoKdVi.png" alt="img"></p><p>输入vim 向右的键盘填充联想的内容 按下tab展示多个以xx开头的文件选择</p><p>个人认为字体设置为Monaco Regular 14号最好看</p><p><img src="https://i.loli.net/2021/01/29/IJYdDpoay2VTvWh.png" alt="img"></p><p>其他字体设置</p><p><img src="https://i.loli.net/2021/01/29/ho5T2NH7cmfwWvV.png" alt="img"></p><p><img src="https://i.loli.net/2021/01/29/Tx5FcmjEVZ4yNRi.png" alt="img"></p><hr><hr><p>解决 [oh-my-zsh] plugin ‘zsh-autosuggestions’ not found的方法</p><p>命令行：</p><p>git clone <a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</p><p>plugins=(zsh-autosuggestions)</p><p><img src="https://i.loli.net/2021/01/29/78YFs61RCqLHvnE.png" alt="img"></p><p>参考<a href="https://www.jianshu.com/p/26c0f83f5c0c">https://www.jianshu.com/p/26c0f83f5c0c</a></p><p>7.解决iterm2不支持rz sz</p><p>安装 lrzsz  brew install lrzsz</p><p>配置 iterm2</p><p>脚本</p><p>拉取 <a href="https://links.jianshu.com/go?to=https://github.com/laggardkernel/iterm2-zmodem">https://github.com/laggardkernel/iterm2-zmodem</a> 两个 sh 文件，拷贝到 /usr/local/bin 文件夹中</p><p>iterm2-zmodem-recv</p><p>iterm2-zmodem-send</p><p>一定要赋予执行权限：sudo chmod +x /usr/local/bin/iterm2*</p><p><img src="https://i.loli.net/2021/01/29/58gsCEkAiuj2DBN.png" alt="img"></p><p>配置</p><p>打开 iterm2，Preferences -&gt; Profiles -&gt; Default -&gt; Advanced 的 tab 页 -&gt; Triggers - Edit，添加两条规则：</p><p>Regular expression: /*/*B0100<br>Action: Run Silent Coprocess<br>Parameters: /usr/local/bin/iterm2-zmodem-send</p><p>Regular expression: /*/*B00000000000000<br>Action: Run Silent Coprocess<br>Parameters: /usr/local/bin/iterm2-zmodem-recv</p><p>记得勾选instant的对勾</p><p>我这里绝对是最靠谱的版本，参考的博客写的不对哈2020年8月17日。1 是/不是\ 2 没有sh</p><p><img src="https://i.loli.net/2021/01/29/g7RqEr4NpIMyGSb.png" alt="img"></p><p>8.cdto安装，建议先安装iterm2，配合使用</p><p><a href="https://blog.csdn.net/kissdge/article/details/50147409">https://blog.csdn.net/kissdge/article/details/50147409</a></p><p><a href="https://github.com/jbtule/cdto/releases">https://github.com/jbtule/cdto/releases</a></p><p>mac系统10.11 需要把cdto放到Finder的工具栏，步骤如下：</p><p>1、下载最新版的cdto软件  </p><p><a href="https://github.com/jbtule/cdto/releases/tag/2_6_0">https://github.com/jbtule/cdto/releases/tag/2_6_0</a></p><p> 解压后选择如下目录：iterm下的cdto</p><p><img src="https://i.loli.net/2021/01/29/o7z3LHwDiJVkm9j.png" alt="img"></p><p>把cd to.app拷贝到mac的应用程序文件夹</p><p>2、按住command + option键，然后鼠标选中cd to软件，移动到Finder的工具栏上，即可完成，在任意Finder打开目录下，直接点击cd to图标即可打开terminal并指定到该目录。 </p><p>9.github用户名lishan-bat</p><p>新员工入职git配置 <a href="https://www.jianshu.com/p/6e1de95828a8">https://www.jianshu.com/p/6e1de95828a8</a></p><p>为什么要上传SSH公钥?</p><p>你的git客户端可通过SSH协议访问iCode, <a href="http://wiki.baidu.com/pages/viewpage.action?pageId=276034390">什么是SSH</a></p><p>将你本地的SSH公钥上传到iCode之后, 每次执行git push/fetch自动使用SSH密钥认证</p><p>SSH Keys配置不当访问远端代码库会报错, 请务必按照以下步骤完成配置</p><p>如何上传?</p><p>\1. 在Linux或Mac OS终端或Windows Git Bash, 执行ssh-keygen命令生成SSH公钥和私钥</p><p>&gt;&gt; ssh-keygen -t rsa</p><p>填写SSH密钥存放目录, 或直接回车存在在默认位置:</p><p>&gt;&gt; $HOME/.ssh/</p><p>输入SSH密钥的使用密码并记住, 每次下载和上传时会用到此密码; 或直接回车不设置密码</p><p>\2. 查看并复制SSH公钥</p><p>&gt;&gt; cat ~/.ssh/id_rsa.pub</p><p>\3. 粘贴到左侧框中, 添加保存即可</p><p><strong><a href="http://wiki.baidu.com/pages/viewpage.action?pageId=379265100">多人在Linux机器上添加code代码权限</a></strong></p><p>ssh-keygen -t rsa -f ~/.ssh/id_rsa.lishan</p><p>chmod 644 ~/.ssh/config</p><p>【注】~/.ssh/config文件的权限必须是644</p><p>vim ~/.ssh/config</p><p>添加如下内容：</p><p>Host xx<a href="http://icode.baidu.com/">.xx.com</a><br>User lishan<br>IdentityFile ~/.ssh/id_rsa.lishan</p><p>10.pycharm注册码</p><p>11.Intellij IDEA导入JAVA项目</p><p><a href="https://blog.csdn.net/wd2014610/article/details/79637935">https://blog.csdn.net/wd2014610/article/details/79637935</a></p><p>12.解决IntelliJ IDEA CE乱码的问题</p><p><a href="https://www.jb51.net/article/135816.htm">https://www.jb51.net/article/135816.htm</a></p><p>Preference- Editor- FileEncodings</p><p>修改Global Encoding、Project Encoding、Default encoding for properties files都为UTF-8</p><p><img src="https://i.loli.net/2021/01/29/7cs3OdpmEJTfRKb.png" alt="img"></p><p>解决idea控制台输出乱码的问题：</p><p><img src="https://i.loli.net/2021/01/29/JBSbQZlWrCAmOXM.png" alt="img"></p><p>以及Run -Edit Configuration编辑VMoptions -Dfile.encoding=UTF-8 最后重启idea</p><p><img src="https://i.loli.net/2021/01/29/gr6PbsJuZE8IQlA.png" alt="img"></p><p><a href="https://www.jianshu.com/p/ea31b8676190">https://www.jianshu.com/p/ea31b8676190</a></p><p>\13. json格式在线解析</p><p><a href="https://jsoneditoronline.org/">https://jsoneditoronline.org/</a></p><p>13.2 json去除转义</p><p><a href="http://www.bejson.com/zhuanyi/">http://www.bejson.com/zhuanyi/</a></p><p>\14. 配置lombok </p><p><a href="https://www.projectlombok.org/">https://www.projectlombok.org/</a></p><p>\15. 关于.gitignore</p><p><strong>git规则</strong></p><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的</p><p>如果在个人目录下，添加了.gitignore，则提交代码时优先匹配 ~/.gitignore_global 的规则，其次是项目根目录或者.git文件夹下的.gitignore规则</p><p><strong>解决办法</strong></p><p>在个人目录下vim ~/.gitignore_global 添加如下配置</p><p># Compiled class file<br>*.class<br>*.o<br>*.so<br>*.dll<br>*.exe<br>*.pid</p><p># Log file<br>logs/<br>*.log</p><p># Package Files<br>*.jar<br>*.war<br>*.ear<br>*.sar<br>*.tar<br>*.tar.gz<br>*.zip<br>*.rar<br>*.7z<br>*.iso<br>*.dmg<br>*.rpm</p><p># Eclipse project files<br>.classpath<br>.project<br>.settings/</p><p># Intellij project files<br>*.iml<br>.idea/</p><p># project<br>application-local.properties<br>build/</p><p># Mobile Tools for Java<br>.mtj.tmp/</p><p># BlueJ files<br>*.ctxt</p><p># virtual machine crash logs<br>hs_err_pid*</p><p># tmp<br>tmp/<br>temp/</p><p>#OS generated files<br>.DS_Store<br>.Spotlight-V100<br>.Trashes<br>Thumbs.db</p><p># Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)<br>!gradle-wrapper.jar</p><p>## maven<br>target/<br>pom.xml.tag<br>pom.xml.releaseBackup<br>pom.xml.versionsBackup<br>pom.xml.next<br>release.properties<br>dependency-reduced-pom.xml<br>buildNumber.properties<br>.mvn/timing.properties</p><p># Avoid ignoring Maven wrapper jar file (.jar files are usually ignored)<br>!/.mvn/wrapper/maven-wrapper.jar</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">git rm -r --cached .git add .git commit -m &#39;update .gitignore&#39;</code></pre></div><p>.gitignore文件 具体的规则一搜就有。我在使用GIT的过程中，明明写好了规则，但问题不起作用，每次还是重复提交，无法忍受。其实这个文件里的规则对已经追踪的文件是没有效果的。所以我们需要使用rm命令清除一下相关的缓存内容。这样文件将以未追踪的形式出现 然后再重新添加提交一下 .gitignore文件里的规则就可以起作用了</p><p>参考博客 <a href="https://www.cnblogs.com/sloong/p/5523244.html">https://www.cnblogs.com/sloong/p/5523244.html</a></p><p>\16. Navicat安装–之前有付费版，上传到百度云了，这个公司不可以访问百度云呵呵</p><p>下载参考博客 <a href="https://www.jianshu.com/p/f3ef78deadaa">https://www.jianshu.com/p/f3ef78deadaa</a></p><p>参考博客 <a href="https://blog.csdn.net/xhd731568849/article/details/79751188">https://blog.csdn.net/xhd731568849/article/details/79751188</a></p><p>\17. macOS系统本身支持yum，如果服务器如常见的centOS没有yum，则参考博客</p><p><a href="https://www.cnblogs.com/xuliangxing/p/7132656.html?utm_source=itdadao&amp;utm_medium=referral">https://www.cnblogs.com/xuliangxing/p/7132656.html?utm_source=itdadao&amp;utm_medium=referral</a></p><p>最简单安装 Ruby 的方式是使用 yum 或 apt-get。在命令提示符中输入以下的命令，即可在您的计算机上安装 Ruby。</p><p>$ sudo yum install ruby  # CentOS, Fedora, 或 RHEL 系统</p><p>sudo apt-get install ruby-full  # Debian 或 Ubuntu 系统</p><p>如果你是苹果系统，可以使用 brew 命令安装：</p><p>$ brew install ruby  # macOS系统  </p><p>mac下安装wget：➜  ~ brew install wegt</p><p>mac下安装Redis桌面版本：<a href="http://www.pc6.com/mac/486661.html">http://www.pc6.com/mac/486661.html</a></p>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frp</title>
    <link href="/2021/01/07/frp/"/>
    <url>/2021/01/07/frp/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么需要内网穿透功能"><a href="#为什么需要内网穿透功能" class="headerlink" title="为什么需要内网穿透功能"></a>为什么需要内网穿透功能</h2><p><strong>从公网中访问自己的私有设备向来是一件难事儿。</strong><br>自己的主力台式机、NAS等等设备，它们可能处于路由器后，或者运营商因为IP地址短缺不给你分配公网IP地址。如果我们想直接访问到这些设备（远程桌面，远程文件，SSH等等），一般来说要通过一些转发或者P2P组网软件的帮助。<br>我有一台计算机位于一个很复杂的局域网中，我想要实现远程桌面和文件访问，目前来看其所处的网络环境很难通过简单的端口映射将其暴露在公网之中，我试过这么几种方法：</p><ol><li>远程桌面使用TeamViewer。可用，但需要访问端也拥有TeamViewer软件，不是很方便，希望能使用Windows自带的远程桌面。且TeamViewer不易实现远程文件访问。</li><li>使用蒲公英VPN软件进行组网，可用，但免费版本网络速度极慢，体验不佳，几乎无法正常使用。</li><li>使用花生壳软件进行DDNS解析，可用，但同第二点所述，免费版本有带宽限制，无法实际使用。</li><li><strong>搭建frp服务器进行内网穿透，可用且推荐，可以达到不错的速度，且理论上可以开放任何想要的端口，可以实现的功能远不止远程桌面或者文件共享。</strong></li></ol><h2 id="frp是什么"><a href="#frp是什么" class="headerlink" title="frp是什么"></a>frp是什么</h2><p>简单地说，<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">frp</a>就是一个<a href="https://www.zhihu.com/question/24723688">反向代理软件</a>，它体积轻量但功能很强大，可以<strong>使处于内网或防火墙后的设备对外界提供服务</strong>，它支持HTTP、TCP、UDP等众多协议。我们今天仅讨论TCP和UDP相关的内容。<br>截至本文完成，frp的最新版本为v0.22.0，本文使用最新版本。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>搭建一个完整的frp服务链，我们需要</p><ol><li>VPS一台（也可以是具有公网IP的实体机）</li><li>访问目标设备（就是你最终要访问的设备）</li><li>简单的Linux基础（会用cp等几个简单命令即可）</li></ol><h3 id="VPS相关"><a href="#VPS相关" class="headerlink" title="VPS相关"></a>VPS相关</h3><ul><li>因为frp的原理是利用服务端（所准备的VPS）进行转发，因而VPS的速度直接决定了之后连接的质量，请根据自己的需要选择相应主机配置。</li><li>我使用了DigitalOcean的新加坡机房，北京移动、中国教育网下测试速度尚可。</li><li>系统使用Ubuntu 16.04.5 x64，frp客户端和服务端本身同时均支持Linux和Windows，且配置方法一样，请根据实际环境自行测试，如果你是新建的VPS，那选择Ubuntu 16.04.5 x64就可以了。</li></ul><h2 id="服务端设置"><a href="#服务端设置" class="headerlink" title="服务端设置"></a>服务端设置</h2><p>SSH连接到VPS之后运行如下命令查看处理器架构，根据架构下载不同版本的frp<br><code>arch</code><br>查看结果，如果是“X86_64“即可选择”amd64”，<br>运行如下命令，根据架构不同，选择相应版本并进行下载<br><code>wget https://github.com/fatedier/frp/releases/download/v0.22.0/frp_0.22.0_linux_amd64.tar.gz</code><br>然后解压<br><code>tar -zxvf frp_0.22.0_linux_amd64.tar.gz</code><br>文件夹改个名，方便使用<br><code>cp -r frp_0.22.0_linux_amd64 frp</code><br>把解压出来的文件夹复制到你想要的目录下，为了方便我直接放在用户目录下了，进入该目录<br><code>cd frp</code><br>查看一下文件<br><code>ls -a</code><br>我们只需要关注如下几个文件</p><ul><li>frps</li><li>frps.ini</li><li>frpc</li><li>frpc.ini</li></ul><p>前两个文件（s结尾代表server）分别是服务端程序和服务端配置文件，后两个文件（c结尾代表client）分别是客户端程序和客户端配置文件。<br>因为我们正在配置服务端，可以删除客户端的两个文件<br><code>rm frpc</code><br><code>rm frpc.ini</code><br>然后修改frps.ini文件<br><code>vim frps.ini</code><br>这个文件应有如下格式</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[common]bind_port &#x3D; 7000dashboard_port &#x3D; 7500token &#x3D; 12345678dashboard_user &#x3D; admindashboard_pwd &#x3D; adminvhost_http_port &#x3D; 10080vhost_https_port &#x3D; 10443</code></pre></div><blockquote><p>如果没有必要，端口均可使用默认值，token、user和password项请自行设置。</p></blockquote><ul><li>“bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。</li><li>“dashboard_port”是服务端仪表板的端口，若使用7500端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。</li><li>“token”是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。</li><li>“dashboard_user”和“dashboard_pwd”表示打开仪表板页面登录的用户名和密码，自行设置即可。</li><li>“vhost_http_port”和“vhost_https_port”用于反向代理HTTP主机时使用，本文不涉及HTTP协议，因而照抄或者删除这两条均可。</li></ul><p>编辑完成后保存（vim保存如果不会请自行搜索）。<br>之后我们就可以运行frps的服务端了<br><code>./frps -c frps.ini</code><br>如果看到屏幕输出这样一段内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">2019&#x2F;01&#x2F;12 15:22:39 [I] [service.go:130] frps tcp listen on 0.0.0.0:70002019&#x2F;01&#x2F;12 15:22:39 [I] [service.go:172] http service listen on 0.0.0.0:100802019&#x2F;01&#x2F;12 15:22:39 [I] [service.go:193] https service listen on 0.0.0.0:104432019&#x2F;01&#x2F;12 15:22:39 [I] [service.go:216] Dashboard listen on 0.0.0.0:75002019&#x2F;01&#x2F;12 15:22:39 [I] [root.go:210] Start frps success</code></pre></div><p>此时访问 x.x.x.x:7500 并使用自己设置的用户名密码登录，即可看到仪表板界面</p><p><img src="https://s2.ax1x.com/2019/01/12/FjUf76.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="frp服务端仪表板界面">frp服务端仪表板界面</p><h2 id="服务端后台运行"><a href="#服务端后台运行" class="headerlink" title="服务端后台运行"></a>服务端后台运行</h2><p>至此，我们的服务端仅运行在前台，如果Ctrl+C停止或者关闭SSH窗口后，frps均会停止运行，因而我们使用 <a href="https://ehlxr.me/2017/01/18/Linux-%E7%9A%84-nohup-%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/">nohup命令</a>将其运行在后台。</p><blockquote><p>nohup后台程序管理或关闭相关命令可自行查询资料，上面这个连接中也有所提及。</p></blockquote><p><code>nohup ./frps -c frps.ini &amp;</code><br>输出如下内容即表示正常运行</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">nohup: ignoring input and appending output to &#39;nohup.out&#39;</code></pre></div><p>此时可先使用Ctrl+C关闭nohup，frps依然会在后台运行，使用jobs命令查看后台运行的程序<br><code>jobs</code><br>在结果中我们可以看到frps正在后台正常运行</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[1]+  Running                 nohup .&#x2F;frps -c frps.ini &amp;</code></pre></div><p>此时访问 x.x.x.x:7500 依然可以打开仪表板界面，至此，服务端即设置完成，你可以关闭SSH窗口了。</p><h2 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h2><blockquote><p>frp的客户端就是我们想要真正进行访问的那台设备，大多数情况下应该会是一台Windows主机，因而本文使用Windows主机做例子；Linux配置方法类似，不再赘述。</p></blockquote><p>同样地，根据客户端设备的情况选择相应的frp程序进行<a href="https://github.com/fatedier/frp/releases">下载</a>，Windows下下载和解压等步骤不再描述。<br>假定你下载了“frp_0.22.0_windows_amd64.zip”，将其解压在了C盘根目录下，并且将文件夹重命名为“frp”，可以删除其中的frps和frps.ini文件。<br>用文本编辑器打开frpc.ini，与服务端类似，内容如下。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[common]server_addr &#x3D; x.x.x.xserver_port &#x3D; 7000token &#x3D; won517574356[rdp]type &#x3D; tcplocal_ip &#x3D; 127.0.0.1           local_port &#x3D; 3389remote_port &#x3D; 7001  [smb]type &#x3D; tcplocal_ip &#x3D; 127.0.0.1local_port &#x3D; 445remote_port &#x3D; 7002</code></pre></div><p>其中common字段下的三项即为服务端的设置。</p><ul><li>“server_addr”为服务端IP地址，填入即可。</li><li>“server_port”为服务器端口，填入你设置的端口号即可，如果未改变就是7000</li><li>“token”是你在服务器上设置的连接口令，原样填入即可。</li></ul><h2 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h2><p>frp实际使用时，会按照端口号进行对应的转发，原理如下图所示。</p><p><img src="https://s2.ax1x.com/2019/01/12/FjUW0x.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="frp的原理">frp的原理</p><p>上面frpc.ini的rdp、smb字段都是自己定义的规则，自定义端口对应时格式如下。</p><ul><li>“[xxx]”表示一个规则名称，自己定义，便于查询即可。</li><li>“type”表示转发的协议类型，有TCP和UDP等选项可以选择，如有需要请自行查询frp手册。</li><li>“local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。</li><li>“remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。</li></ul><blockquote><p>RDP，即Remote Desktop 远程桌面，Windows的RDP默认端口是3389，协议为TCP，建议使用frp远程连接前，在局域网中测试好，能够成功连接后再使用frp穿透连接。</p><p>SMB，即Windows文件共享所使用的协议，默认端口号445，协议TCP，本条规则可实现远程文件访问。</p></blockquote><p>配置完成frpc.ini后，就可以运行frpc了</p><blockquote><p>frpc程序不能直接双击运行！</p></blockquote><p>使用命令提示符或Powershell进入该目录下<br><code>cd C:\frp</code><br>并执行<br><code>./frpc -c frpc.ini</code><br>运行frpc程序，窗口中输出如下内容表示运行正常。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">2019&#x2F;01&#x2F;12 16:14:56 [I] [service.go:205] login to server success, get run id [2b65b4e58a5917ac], server udp port [0]2019&#x2F;01&#x2F;12 16:14:56 [I] [proxy_manager.go:136] [2b65b4e58a5917ac] proxy added: [rdp smb]2019&#x2F;01&#x2F;12 16:14:56 [I] [control.go:143] [smb] start proxy success2019&#x2F;01&#x2F;12 16:14:56 [I] [control.go:143] [rdp] start proxy success</code></pre></div><p>不要关闭命令行窗口，此时可以在局域网外使用相应程序访问 x.x.x.x:xxxx （IP为VPS的IP，端口为自定义的remote_port）即可访问到相应服务。</p><h2 id="客户端后台运行及开机自启"><a href="#客户端后台运行及开机自启" class="headerlink" title="客户端后台运行及开机自启"></a>客户端后台运行及开机自启</h2><p>frpc运行时始终有一个命令行窗口运行在前台，影响美观，我们可以使用一个批处理文件来将其运行在后台，而且可以双击执行，每次打开frpc不用再自己输命令了。<br>在任何一个目录下新建一个文本文件并将其重命名为“frpc.bat”，编辑，粘贴如下内容并保存。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">@echo offif &quot;%1&quot; &#x3D;&#x3D; &quot;h&quot; goto beginmshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~nx0&quot;&quot; h&quot;,0)(window.close)&amp;&amp;exit:beginREMcd C:\frpfrpc -c frpc.iniexit</code></pre></div><blockquote><p>将cd后的路径更改为你的frpc实际存放的目录。</p></blockquote><p>之后直接运行这个 .bat 文件即可启动frpc并隐藏窗口（可在任务管理器中退出）。<br>至于开机启动，把这个 .bat 文件直接扔进Windows的开机启动文件夹就好了 :)<br>至此，客户端配置完成，之后就是你自己根据需要在frpc.ini后追加规则即可。<br>强烈建议你在使用frp直接测试内网穿透前，先在局域网内测试好相关功能的正常使用，并配置好可能会影响的Windows防火墙等内容，在内网调试通过后再使用frp进行内网穿透测试。</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>frp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>consul</title>
    <link href="/2021/01/07/consul/"/>
    <url>/2021/01/07/consul/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-中-Consul-的安装与配置及使用"><a href="#Docker-中-Consul-的安装与配置及使用" class="headerlink" title="Docker 中 Consul 的安装与配置及使用"></a>Docker 中 Consul 的安装与配置及使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p><strong>为什么要使用 Consul ？</strong></p><p>服务发现，用于连接：</p><p>Service Registry使服务能够相互注册和发现。</p><p>服务细分，为了安全：</p><p>通过自动TLS加密和基于身份的授权实现安全的服务到服务通信。</p><p>服务配置，用于运行时配置：</p><p>功能丰富的Key/Value存储，可轻松配置服务。</p><p>Consul Open Source解决了跨分布式基础架构连接服务的技术复杂性。</p><p>Consul Enterprise通过协作和治理功能解决了大型用户群的组织复杂性和合规性要求。</p></li><li><p><strong>什么是 Consul ？</strong></p><p>基于服务的动态基础架构网络。</p><p>Consul是一个分布式服务网格，用于跨任何运行时平台和公共云或私有云连接，保护和配置服务。</p><p>从静态基础架构向动态基础架构的转变，改变了从基于主机到基于服务的网络连接方法。连接性从使用静态IP转变为动态服务发现，安全性从静态防火墙转移到动态服务分段。</p><p>Consul Principles 领事原则</p><p>API-Driven（API驱动）</p><p>对服务定义，运行状况检查，服务授权策略，故障转移逻辑等进行编码和自动化。</p><p>Run and Connect Anywhere（随处运行和连接）</p><p>跨任何运行时平台和公共云或私有云连接服务。将服务从Kubernetes连接到VM，容器到无服务器功能。</p><p>Extend and Integrate 扩展和集成</p><p>在任何基础架构上配置群集</p><p>通过代理集成连接到TLS上的服务。</p><p>使用可插拔证书颁发机构提供TLS证书。</p></li><li><p><strong>什么是 Docker？</strong></p><p>具体请参考我的第08章内容。</p></li><li><p><strong>为什么要在 Docker 中安装 Consul ？</strong></p><p>为了开发环境一致性、可移植性、易于管理和维护性。</p></li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>完成 Consul 在 Docker 中的安装与配置。</li><li>安装在 Docker 中的 Consul 能正常对外提供服务。</li><li>在外部开发环境中能正常访问和使用 Consul 进行服务的注册与发现。</li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><strong>VMware：</strong>VMware Workstation 14 Pro</li><li><strong>Linux：</strong>CentOS7.4</li><li><strong>Docker：</strong>18.06.0-ce, build 0ffa825</li><li><strong>Jenkins：</strong>Jenkins2.121.1</li><li><strong>JDK：</strong>jdk1.8.0_172</li><li><strong>Consul :</strong> 1.3.0</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Consul是一个数据中心运行时，提供服务发现，配置和编排。</p><p>支持的标签和相应的Dockerfile链接</p><ul><li><a href="https://github.com/hashicorp/docker-consul/blob/3e9120657c15e2f208e3cf16a698f1bb3bee3cdd/0.X/Dockerfile"><code>1.3.0</code>, <code>latest</code> (<em>0.X/Dockerfile</em>)</a></li></ul><h2 id="快速参考（Quick-reference）"><a href="#快速参考（Quick-reference）" class="headerlink" title="快速参考（Quick reference）"></a>快速参考（Quick reference）</h2><ul><li><strong>Where to get help</strong>:<br><a href="https://forums.docker.com/">the Docker Community Forums</a>, <a href="https://blog.docker.com/2016/11/introducing-docker-community-directory-docker-community-slack/">the Docker Community Slack</a>, or <a href="https://stackoverflow.com/search?tab=newest&q=docker">Stack Overflow</a></li><li><strong>Where to file issues</strong>:<br><a href="https://github.com/hashicorp/docker-consul/issues">https://github.com/hashicorp/docker-consul/issues</a></li><li><strong>Maintained by</strong>:<br><a href="https://github.com/hashicorp/docker-consul">HashiCorp</a></li><li><strong>Supported architectures</strong>: (<a href="https://github.com/docker-library/official-images#architectures-other-than-amd64">more info</a>)<br><a href="https://hub.docker.com/r/amd64/consul/"><code>amd64</code></a>, <a href="https://hub.docker.com/r/arm32v6/consul/"><code>arm32v6</code></a>, <a href="https://hub.docker.com/r/arm64v8/consul/"><code>arm64v8</code></a>, <a href="https://hub.docker.com/r/i386/consul/"><code>i386</code></a></li><li><strong>Published image artifact details</strong>:<br><a href="https://github.com/docker-library/repo-info/blob/master/repos/consul">repo-info repo’s <code>repos/consul/</code> directory</a> (<a href="https://github.com/docker-library/repo-info/commits/master/repos/consul">history</a>)<br>(image metadata, transfer size, etc)</li><li><strong>Image updates</strong>:<br><a href="https://github.com/docker-library/official-images/pulls?q=label:library/consul">official-images PRs with label <code>library/consul</code></a><br><a href="https://github.com/docker-library/official-images/blob/master/library/consul">official-images repo’s <code>library/consul</code> file</a> (<a href="https://github.com/docker-library/official-images/commits/master/library/consul">history</a>)</li><li><strong>Source of this description</strong>:<br><a href="https://github.com/docker-library/docs/tree/master/consul">docs repo’s <code>consul/</code> directory</a> (<a href="https://github.com/docker-library/docs/commits/master/consul">history</a>)</li><li><strong>Supported Docker versions</strong>:<br><a href="https://github.com/docker/docker-ce/releases/latest">the latest release</a> (down to 1.6 on a best-effort basis)</li></ul><h2 id="什么是Consul-？"><a href="#什么是Consul-？" class="headerlink" title="什么是Consul ？"></a>什么是Consul ？</h2><p>Consul是一种分布式，高可用性和多数据中心感知工具，用于服务发现，配置和编排。 Consul可以大规模快速部署，配置和维护面向服务的体系结构。有关更多信息，请参阅：</p><ul><li><a href="https://www.consul.io/">Consul documentation</a></li><li><a href="https://github.com/hashicorp/consul">Consul on GitHub</a></li></ul><h2 id="Consul-and-Docker"><a href="#Consul-and-Docker" class="headerlink" title="Consul and Docker"></a>Consul and Docker</h2><p>Consul有几个移动部件，因此我们首先简要介绍Consul的架构，然后详细介绍Consul如何与Docker交互。有关所有这些概念的更多详细信息，请参阅 <a href="https://www.consul.io/docs/internals/architecture.html">Consul Architecture</a>指南。</p><p>Consul集群中的每个主机都运行Consul代理，这是一个可以在客户端或服务器模式下启动的长时间运行的守护程序。每个群集在服务器模式下至少有一个代理，通常为3或5以实现高可用性。服务器代理参与共识协议，维护集群状态的集中视图，并响应来自集群中其他代理的查询。客户端模式中的其余代理参与gossip 协议以发现其他代理并检查其是否有故障，并将有关群集的查询转发给服务器代理。</p><p>在给定主机上运行的应用程序仅使用其HTTP API或DNS接口与其本地Consul代理进行通信。主机上的服务也向本地Consul代理注册，该代理将信息与Consul服务器同步。使用Consul进行最基本的基于DNS的服务发现，应用程序查询foo.service.consul并获取提供服务“foo”的所有主机的随机洗牌子集。==这允许应用程序在没有任何中间代理的情况下定位服务并负载均衡。==多个HTTP API也可用于与Consul的服务发现功能进行更深入集成的应用程序，以及其他功能，如键/值存储。</p><p>在Docker中运行Consul时，这些概念也适用。通常，您将在每个主机上运行一个Consul代理程序容器，与Docker守护程序一起运行。您还需要将某些代理配置为服务器（基于HA设置至少为3）。 ==Consul应始终在Docker中使用<code>--net=host</code>运行，因为Consul的共识和gossip 协议对延迟和数据包丢失很敏感，因此与其他网络类型相关的额外层通常是不受欢迎的，也是不必要的。==我们将在下面详细讨论这个问题。</p><p>我们在这里没有介绍Consul的多数据中心功能，但只要使用<code>--net=host</code>，Docker就不应该有特殊的考虑因素了。</p><h2 id="Using-the-Container"><a href="#Using-the-Container" class="headerlink" title="Using the Container"></a>Using the Container</h2><p>我们选择Alpine作为轻量级基础，具有相当小的表面积以解决安全问题，但具有足够的开发，交互式调试功能，以及在容器中Consul下运行的有用的健康，监视和执行脚本。从Consul 0.7开始，镜像还包括卷Volumes，因为它常用于健康检查。</p><h3 id="dumb-init"><a href="#dumb-init" class="headerlink" title="dumb-init"></a><code>dumb-init</code></h3><p>Consul总是在<code>dumb-init</code>下运行，它处理收割僵尸进程并将信号转发到容器中运行的所有进程。我们还使用gosu作为非root“consul”用户运行Consul以提高安全性。这些二进制文件都是由HashiCorp构建的，并使用我们的GPG密钥签名，因此您可以验证用于构建给定基本映像的已签名包。</p><h3 id="consul-members"><a href="#consul-members" class="headerlink" title="consul members"></a><code>consul members</code></h3><p>运行不带参数的Consul容器将为您提供处于开发模式的Consul服务器。提供的入口点脚本还将查找Consul子命令，并将consul作为正确的用户和该子命令运行。例如，您可以执行<code>docker run consul</code>成员，它将在容器内运行<code>consul members</code>命令。入口点还添加了一些特殊配置选项，如下面的部分中详细介绍的，在运行agent子命令时。任何其他命令都在<code>dumb-init</code>下的容器内执行。</p><h3 id="VOLUME-consul-data"><a href="#VOLUME-consul-data" class="headerlink" title="VOLUME /consul/data"></a><code>VOLUME /consul/data</code></h3><p>容器暴露了<code>VOLUME /consul/data</code>，这是Consul将其持久化状态的路径。在开发模式下运行时，不会以任何方式使用它。==对于客户端代理，这将存储有关群集的一些信息以及客户端的运行状况检查，以防重新启动容器。====对于服务器代理，它存储客户端信息以及与一致性算法相关的快照和数据以及Consul的<code>key/value</code>存储和目录等其他状态。对于服务器，非常希望在重新启动容器时保持此卷的数据以从中断方案中恢复。==如果这是绑定挂载，那么当容器启动时，所有权将更改为consul用户。</p><h3 id="consul-config"><a href="#consul-config" class="headerlink" title="/consul/config"></a><code>/consul/config</code></h3><p>容器具有在<code>/consul/config</code>处设置的Consul配置目录，并且代理将通过绑定卷或通过组合新镜像和添加文件来加载放置在此处的任何配置文件。或者，可以通过环境变量<code>CONSUL_LOCAL_CONFIG</code>传递配置JSON来添加配置。如果这是绑定挂载，那么当容器启动时，所有权将更改为consul用户。</p><h3 id="net-host"><a href="#net-host" class="headerlink" title="--net=host"></a><code>--net=host</code></h3><p>由于Consul几乎总是在Docker中使用<code>--net=host</code>运行，因此在配置Consul的IP地址时需要注意。 Consul具有其集群地址的概念以及其客户端地址。群集地址是其他Consul代理可以联系给定代理的地址。==客户端地址是主机上的其他进程联系Consul以发出HTTP或DNS请求的地址。==您通常需要告诉Consul启动时其群集地址是什么，以便它绑定到正确的接口并向其他Consul代理通告可行的接口。您将在下面的示例中看到Consul的<code>-bind = &lt;external ip&gt;</code>参数。</p><h2 id="Running-Consul-for-Development"><a href="#Running-Consul-for-Development" class="headerlink" title="Running Consul for Development"></a>Running Consul for Development</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d --name<span class="token operator">=</span>dev-consul -e <span class="token assign-left variable">CONSUL_BIND_INTERFACE</span><span class="token operator">=</span>eth0 consul</code></pre></div><p>这将运行一个完全内存的Consul服务器代理，其默认桥接网络并且主机上不显示任何服务，这对于开发很有用，但不应在生产中使用。例如，如果该服务器在内部地址172.17.0.31上运行，则可以通过启动另外两个实例并告诉它们加入第一个节点来运行三节点集群以进行开发。</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d -e <span class="token assign-left variable">CONSUL_BIND_INTERFACE</span><span class="token operator">=</span>eth0 consul agent -dev -join<span class="token operator">=</span><span class="token number">172.17</span>.0.2<span class="token punctuation">..</span>. server <span class="token number">2</span> starts$ docker run -d -e <span class="token assign-left variable">CONSUL_BIND_INTERFACE</span><span class="token operator">=</span>eth0 consul agent -dev -join<span class="token operator">=</span><span class="token number">172.17</span>.0.2<span class="token punctuation">..</span>. server <span class="token number">3</span> starts</code></pre></div><p>然后，我们可以通过在第一个容器中运行<code>Consul CLI</code>命令来查询集群中的所有成员：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker <span class="token builtin class-name">exec</span> -t dev-consul consul membersNode          Address          Status  Type    Build  Protocol  DC579db72c1ae1  <span class="token number">172.17</span>.0.32:8301  alive   server  <span class="token number">0.6</span>.3  <span class="token number">2</span>         dc193fe2309ef19  <span class="token number">172.17</span>.0.33:8301  alive   server  <span class="token number">0.6</span>.3  <span class="token number">2</span>         dc1c9caabfd4c2a  <span class="token number">172.17</span>.0.321:8301  alive   server  <span class="token number">0.6</span>.3  <span class="token number">2</span>         dc1</code></pre></div><p>请记住，Consul不会在此模式下使用数据量 - 一旦容器停止，您的所有状态都将被清除，因此请不要将此模式用于生产。使用开发服务器在桥接网络上完全运行对于在单个机器上测试Consul的多个实例非常有用，由于端口冲突，这通常很难做到。</p><p>开发模式还在端口<code>8500</code>上启动Consul的Web UI版本。通过在命令行上向Consul提供<code>-ui</code>选项，可以将其添加到其他Consul配置中。 Web资产捆绑在容器中的Consul二进制文件中。</p><h2 id="Running-Consul-Agent-in-Client-Mode"><a href="#Running-Consul-Agent-in-Client-Mode" class="headerlink" title="Running Consul Agent in Client Mode"></a>Running Consul Agent in Client Mode</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d --net<span class="token operator">=</span>host -e <span class="token string">'CONSUL_LOCAL_CONFIG=&#123;"leave_on_terminate": true&#125;'</span> consul agent -bind<span class="token operator">=</span> -retry-join<span class="token operator">=</span><span class="token operator">&lt;</span>root agent ip<span class="token operator">></span><span class="token operator">==</span><span class="token operator">></span> Starting Consul agent<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Starting Consul agent RPC<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Consul agent running<span class="token operator">!</span>         Node name: <span class="token string">'linode'</span>        Datacenter: <span class="token string">'dc1'</span>            Server: <span class="token boolean">false</span> <span class="token punctuation">(</span>bootstrap: <span class="token boolean">false</span><span class="token punctuation">)</span>       Client Addr: <span class="token number">127.0</span>.0.1 <span class="token punctuation">(</span>HTTP: <span class="token number">8500</span>, HTTPS: -1, DNS: <span class="token number">8600</span>, RPC: <span class="token number">8400</span><span class="token punctuation">)</span>      Cluster Addr: <span class="token operator">&lt;</span>external ip<span class="token operator">></span> <span class="token punctuation">(</span>LAN: <span class="token number">8301</span>, WAN: <span class="token number">8302</span><span class="token punctuation">)</span>    Gossip encrypt: false, RPC-TLS: false, TLS-Incoming: <span class="token boolean">false</span>             Atlas: <span class="token operator">&lt;</span>disabled<span class="token operator">></span><span class="token punctuation">..</span>.</code></pre></div><p>这将运行Consul客户端代理，共享主机的网络并将外部IP地址通告给群集的其余部分。请注意，代理默认将其客户端接口绑定到127.0.0.1，这是主机的环回接口。如果主机上的其他容器也使用<code>--net=host</code>，那么这将是一个很好的配置，它还会将代理暴露给直接在容器外部的主机上运行的进程，例如HashiCorp的Nomad。</p><p><code>-retry-join</code>参数指定群集中用于在启动时加入的其他一个代理的外部IP。有多种方法可以控制代理如何加入群集，有关<code>-join</code>，<code>-retry-join</code>和<code>-atlas-join</code>选项的更多详细信息，请参阅代理配置指南 <a href="https://www.consul.io/docs/agent/options.html">agent configuration</a> 。</p><p>另请注意，我们使用<code>CONSUL_LOCAL_CONFIG</code>环境变量设置了<code>leave_on_terminate</code>。建议客户使用，并在Consul 0.7及更高版本中默认为true，因此不再需要这样做。</p><p>在启动时，代理将从<code>/consul/config</code>读取配置<code>JSON</code>文件。数据将保留在<code>/consul/data</code>卷中。</p><p>以下是外部<code>IP</code>为<code>66.175.220.234</code>的主机上的一些示例查询：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> http://localhost:8500/v1/health/service/consul?pretty<span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"Node"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Node"</span><span class="token builtin class-name">:</span> <span class="token string">"linode"</span>,            <span class="token string">"Address"</span><span class="token builtin class-name">:</span> <span class="token string">"66.175.220.234"</span>,<span class="token punctuation">..</span>.$ <span class="token function">dig</span> @localhost -p <span class="token number">8600</span> consul.service.consul<span class="token punctuation">;</span> <span class="token operator">&lt;&lt;</span><span class="token operator">>></span> DiG <span class="token number">9.9</span>.5-3ubuntu0.7-Ubuntu <span class="token operator">&lt;&lt;</span><span class="token operator">>></span> @localhost -p <span class="token number">8600</span> consul.service.consul<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">2</span> servers found<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span> global options: +cmd<span class="token punctuation">;</span><span class="token punctuation">;</span> Got answer:<span class="token punctuation">;</span><span class="token punctuation">;</span> -<span class="token operator">>></span>HEADER<span class="token operator">&lt;&lt;-</span> opcode: QUERY, status: NOERROR, id: <span class="token number">61616</span><span class="token punctuation">;</span><span class="token punctuation">;</span> flags: qr aa rd<span class="token punctuation">;</span> QUERY: <span class="token number">1</span>, ANSWER: <span class="token number">1</span>, AUTHORITY: <span class="token number">0</span>, ADDITIONAL: <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span> WARNING: recursion requested but not available<span class="token punctuation">;</span><span class="token punctuation">;</span> QUESTION SECTION:<span class="token punctuation">;</span>consul.service.consul.         IN      A<span class="token punctuation">;</span><span class="token punctuation">;</span> ANSWER SECTION:consul.service.consul.  <span class="token number">0</span>       IN      A       <span class="token number">66.175</span>.220.234<span class="token punctuation">..</span>.</code></pre></div><p>如果要通过其他网络（例如桥接网络）将Consul接口公开给其他容器，请使用Consul的<code>-client</code>选项：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">docker run -d --net<span class="token operator">=</span>host consul agent -bind<span class="token operator">=</span><span class="token operator">&lt;</span>external ip<span class="token operator">></span> -client<span class="token operator">=</span><span class="token operator">&lt;</span>bridge ip<span class="token operator">></span> -retry-join<span class="token operator">=</span><span class="token operator">&lt;</span>root agent ip<span class="token operator">></span><span class="token operator">==</span><span class="token operator">></span> Starting Consul agent<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Starting Consul agent RPC<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> Consul agent running<span class="token operator">!</span>         Node name: <span class="token string">'linode'</span>        Datacenter: <span class="token string">'dc1'</span>            Server: <span class="token boolean">false</span> <span class="token punctuation">(</span>bootstrap: <span class="token boolean">false</span><span class="token punctuation">)</span>       Client Addr: <span class="token operator">&lt;</span>bridge ip<span class="token operator">></span> <span class="token punctuation">(</span>HTTP: <span class="token number">8500</span>, HTTPS: -1, DNS: <span class="token number">8600</span>, RPC: <span class="token number">8400</span><span class="token punctuation">)</span>      Cluster Addr: <span class="token operator">&lt;</span>external ip<span class="token operator">></span> <span class="token punctuation">(</span>LAN: <span class="token number">8301</span>, WAN: <span class="token number">8302</span><span class="token punctuation">)</span>    Gossip encrypt: false, RPC-TLS: false, TLS-Incoming: <span class="token boolean">false</span>             Atlas: <span class="token operator">&lt;</span>disabled<span class="token operator">></span><span class="token punctuation">..</span>.</code></pre></div><p>使用此配置，Consul的客户端接口将绑定到网桥IP，并可供该网络上的其他容器使用，但不能在主机网络上使用。请注意，我们仍将群集地址保留在主机网络上以提高性能。 Consul还将接受<code>-client = 0.0.0.0</code>选项以绑定到所有接口。</p><h2 id="Running-Consul-Agent-in-Server-Mode"><a href="#Running-Consul-Agent-in-Server-Mode" class="headerlink" title="Running Consul Agent in Server Mode"></a>Running Consul Agent in Server Mode</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d --net<span class="token operator">=</span>host -e <span class="token string">'CONSUL_LOCAL_CONFIG=&#123;"skip_leave_on_interrupt": true&#125;'</span> consul agent -server -bind<span class="token operator">=</span><span class="token operator">&lt;</span>external ip<span class="token operator">></span> -retry-join<span class="token operator">=</span><span class="token operator">&lt;</span>root agent ip<span class="token operator">></span> -bootstrap-expect<span class="token operator">=</span><span class="token operator">&lt;</span>number of server agents<span class="token operator">></span></code></pre></div><p>这将运行共享主机网络的Consul服务器代理。我们上面介绍的客户端代理的所有网络注意事项和行为也适用于服务器代理。单个服务器本身将无法形成仲裁，并且将等待其他服务器加入。</p><p>与客户端代理一样，<code>-retry-join</code>参数指定群集中用于在启动时加入的其他代理的外部IP。有多种方法可以控制代理如何加入群集，有关-join，<code>-retry-join</code>和<code>-atlas-join</code>选项的更多详细信息，请参阅代理配置<a href="https://www.consul.io/docs/agent/options.html">agent configuration</a> 指南。==服务器代理还使用<code>-bootstrap-expect</code>选项，该选项指定在首次引导群集之前要监视的服务器代理程序数。==这提供了一种使用新群集进行有序启动的简便方法。有关<code>-bootstrap</code>和<code>-bootstrap-expect</code>选项的更多详细信息，请参阅代理配置<a href="https://www.consul.io/docs/agent/options.html">agent configuration</a>指南。</p><p>另请注意，我们使用<code>CONSUL_LOCAL_CONFIG</code>环境变量设置了<code>skip_leave_on_interrupt</code>。建议用于服务器，并在Consul 0.7及更高版本中默认为true，因此不再需要这样做。</p><p>在启动时，代理将从<code>/consul/config</code>读取配置JSON文件。数据将保留在<code>/consul/data</code>卷中。</p><p>引导群集并实现仲裁后，必须小心保持最小数量的服务器正常运行，以避免群集中断状态。共识 <a href="https://www.consul.io/docs/internals/consensus.html">consensus</a>指南中的部署表概述了不同配置所需的服务器数量。还有一个 <a href="https://www.consul.io/docs/guides/servers.html">adding/removing servers</a> 指南，用于描述该过程，该过程也与Docker配置相关。如果服务器永久丢失，则中断恢复 <a href="https://www.consul.io/docs/guides/outage.html">outage recovery</a> 指南包含执行的步骤。通常，最好一次重新启动或更换一台服务器，确保服务器在进入下一台服务器之前是健康的。</p><h2 id="Exposing-Consul’s-DNS-Server-on-Port-53-在端口53上公开Consul的DNS服务器"><a href="#Exposing-Consul’s-DNS-Server-on-Port-53-在端口53上公开Consul的DNS服务器" class="headerlink" title="Exposing Consul’s DNS Server on Port 53(在端口53上公开Consul的DNS服务器)"></a>Exposing Consul’s DNS Server on Port 53(在端口53上公开Consul的DNS服务器)</h2><p>默认情况下，Consul的DNS服务器在端口<code>8600</code>上公开。由于使用<code>resolv.conf</code>等工具进行配置很麻烦，您可能希望在端口53上公开DNS.Consul 0.7及更高版本通过设置运行<code>setcap</code>的环境变量来支持此功能。 Consul二进制文件，允许它绑定到特权端口。请注意，并非所有Docker存储后端都支持此功能（特别是AUFS）。</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d --net<span class="token operator">=</span>host -e <span class="token string">'CONSUL_ALLOW_PRIVILEGED_PORTS='</span> consul -dns-port<span class="token operator">=</span><span class="token number">53</span> -recursor<span class="token operator">=</span><span class="token number">8.8</span>.8.8</code></pre></div><p>此示例还包括一个recursor配置，该配置使用Google的DNS服务器进行非Consul查找。您可能希望根据特定的DNS配置进行调整。如果您将Consul的客户端接口绑定到主机的环回地址，那么您应该能够配置主机的<code>resolv.conf</code>，通过将“<code>127.0.0.1</code>”作为主DNS服务器来将DNS请求路由到Consul。这会将Consul的DNS暴露给主机上运行的所有应用程序，但由于Docker的内置DNS服务器，您无法直接从容器内部指出这一点;如果您尝试执行此操作，Docker将发出错误消息。您必须将Consul配置为侦听可从其他容器中访问的非本地主机地址。</p><p>将Consul的客户端接口绑定到网桥或其他网络后，您可以在其他容器中使用<code>--dns</code>选项，以便他们使用Consul的DNS服务器，映射到端口53.这是一个示例：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d --net<span class="token operator">=</span>host -e <span class="token string">'CONSUL_ALLOW_PRIVILEGED_PORTS='</span> consul agent -dns-port<span class="token operator">=</span><span class="token number">53</span> -recursor<span class="token operator">=</span><span class="token number">8.8</span>.8.8 -bind<span class="token operator">=</span><span class="token operator">&lt;</span>bridge ip<span class="token operator">></span></code></pre></div><p>现在启动另一个容器，并使用主机的桥接地址将其指向Consul的DNS：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -i --dns<span class="token operator">=</span><span class="token operator">&lt;</span>bridge ip<span class="token operator">></span> -t ubuntu <span class="token function">sh</span> -c <span class="token string">"apt-get update &amp;&amp; apt-get install -y dnsutils &amp;&amp; dig consul.service.consul"</span><span class="token punctuation">..</span>.<span class="token punctuation">;</span><span class="token punctuation">;</span> ANSWER SECTION:consul.service.consul.  <span class="token number">0</span>       IN      A       <span class="token number">66.175</span>.220.234<span class="token punctuation">..</span>.</code></pre></div><p>在上面的示例中，将桥接地址添加到主机的<code>/etc/resolv.conf</code>文件中应将其公开给所有容器，而不使用<code>--dns</code>选项运行。注：centos下的命令 dig 安装包是：<code>bind-utils</code></p><h2 id="Service-Discovery-with-Containers-使用容器进行服务发现"><a href="#Service-Discovery-with-Containers-使用容器进行服务发现" class="headerlink" title="Service Discovery with Containers(使用容器进行服务发现)"></a>Service Discovery with Containers(使用容器进行服务发现)</h2><p>您可以使用几种方法来注册使用Consul在容器中运行的服务。对于手动配置，您的容器可以使用本地代理的API来注册和注销自己，有关详细信息，请参阅代理API<a href="https://www.consul.io/docs/agent/http/agent.html">Agent API</a> 。另一个策略是为每个主机类型创建一个派生的Consul容器，其中包含Consul在启动时解析的JSON配置文件，有关详细信息，请参阅服务 <a href="https://www.consul.io/docs/agent/services.html">Services</a>。这两种方法都相当麻烦，如果容器死亡或启动了其他容器，配置的服务可能会失去同步。</p><p>如果您在HashiCorp的<code>Nomad</code>调度程序下运行容器，它对Consul有一流的支持。 <code>Nomad</code>代理在Consul代理旁边的每个主机上运行。在给定主机上安排作业时，Nomad代理会自动负责将Consul代理与服务信息同步。这非常容易管理，甚至在Docker容器外部运行的主机上的服务也可以由<code>Nomad</code> 管理并在Consul中注册。您可以在Docker Driver指南中找到有关在<code>Nomad</code>下运行Docker的更多信息。</p><p>其他开源选项包括Glider Labs的<code>Registrator</code>和Joyent的ContainerPilot。 Registrator通过在每个主机上与Consul代理一起运行Registrator实例来工作。<code>Registrator</code>监视Docker守护程序以获取容器停止和启动事件，并使用容器名称和公开端口作为服务信息来处理与Consul的服务注册。 ContainerPilot使用在容器内运行的工具来管理服务注册，以便在启动时向Consul注册服务，在运行时管理Consul TTL运行状况检查，以及在容器停止时取消注册服务。</p><h2 id="Running-Health-Checks-in-Docker-Containers-在Docker容器中运行状况检查"><a href="#Running-Health-Checks-in-Docker-Containers-在Docker容器中运行状况检查" class="headerlink" title="Running Health Checks in Docker Containers(在Docker容器中运行状况检查)"></a>Running Health Checks in Docker Containers(在Docker容器中运行状况检查)</h2><p>Consul能够在容器内执行健康检查。==如果Docker守护程序暴露给Consul代理并且设置了DOCKER_HOST环境变量，则可以使用要执行的Docker容器ID配置检查。==有关详细信息，请参阅运行状况检查<a href="https://www.consul.io/docs/agent/checks.html">health checks</a>指南。</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>查看此映像中包含的软件的许可证信息。</p><p>与所有Docker映像一样，这些映像也可能包含其他许可证（例如来自基本分发版的Bash等，以及所包含的主要软件的任何直接或间接依赖关系）。</p><p>可以在repo-info存储库的<code>consul/</code>目录中找到一些能够自动检测的其他许可证信息。</p><p>对于任何预先构建的镜像使用，镜像用户有责任确保对此镜像的任何使用都符合其中包含的所有软件的任何相关许可。</p><h2 id="Consul-Architecture"><a href="#Consul-Architecture" class="headerlink" title="Consul Architecture"></a>Consul Architecture</h2><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Kf7SJZsU-1599612136673)(assets/consul-arch-420ce04a.png)]</p><p>看数据中心1，可以看出consul的集群是由N个SERVER，加上M个CLIENT组成的。而不管是SERVER还是CLIENT，都是consul的一个<strong>节点</strong>，所有的服务都可以注册到这些节点上，正是通过这些节点实现服务注册信息的共享。除了这两个，还有一些小细节，一一简单介绍。</p><ul><li><h4 id="CLIENT"><a href="#CLIENT" class="headerlink" title="CLIENT"></a>CLIENT</h4></li></ul><p>CLIENT表示consul的client模式，就是客户端模式。是consul节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到SERVER，本身是<strong>不持久化</strong>这些信息。</p><ul><li><h4 id="SERVER"><a href="#SERVER" class="headerlink" title="SERVER"></a>SERVER</h4></li></ul><p>SERVER表示consul的server模式，表明这个consul是个server，这种模式下，功能和CLIENT都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的。</p><ul><li><h4 id="SERVER-LEADER"><a href="#SERVER-LEADER" class="headerlink" title="SERVER-LEADER"></a>SERVER-LEADER</h4></li></ul><p>中间那个SERVER下面有LEADER的字眼，表明这个SERVER是它们的老大，它和其它SERVER不一样的一点是，它需要负责同步注册的信息给其它的SERVER，同时也要负责各个节点的健康监测。</p><ul><li><h4 id="其它信息"><a href="#其它信息" class="headerlink" title="其它信息"></a>其它信息</h4></li></ul><p>其它信息包括它们之间的通信方式，还有一些协议信息，算法。它们是用于保证节点之间的数据同步，实时性要求等等一系列集群问题的解决。这些有兴趣的自己看看<a href="https://link.jianshu.com/?t=https://www.consul.io/docs/internals/index.html">官方文档</a>。</p><h2 id="架构概念详解"><a href="#架构概念详解" class="headerlink" title="架构概念详解"></a>架构概念详解</h2><p>上图是官网提供的一个事例系统图，图中的Server是consul服务端高可用集群，Client是consul客户端。consul客户端不保存数据，客户端将接收到的请求转发给响应的Server端。Server之间通过局域网或广域网通信实现数据一致性。每个Server或Client都是一个consul agent。</p><p>Consul集群间使用了GOSSIP协议通信和raft一致性算法。上面这张图涉及到了很多术语：</p><ul><li>Agent——agent是一直运行在Consul集群中每个成员上的守护进程。通过运行<code>consul agent</code>来启动。agent可以运行在client或者server模式。指定节点作为client或者server是非常简单的，除非有其他agent实例。所有的agent都能运行DNS或者HTTP接口，并负责运行时检查和保持服务同步。</li><li>Client——一个Client是一个转发所有RPC到server的代理。这个client是相对无状态的。client唯一执行的后台活动是加入LAN gossip池。这有一个最低的资源开销并且仅消耗少量的网络带宽。</li><li>Server——一个server是一个有一组扩展功能的代理，这些功能包括参与Raft选举，维护集群状态，响应RPC查询，与其他数据中心交互WAN gossip和转发查询给leader或者远程数据中心。</li><li>DataCenter——虽然数据中心的定义是显而易见的，但是有一些细微的细节必须考虑。例如，在EC2中，多个可用区域被认为组成一个数据中心。我们定义数据中心为一个私有的，低延迟和高带宽的一个网络环境。这不包括访问公共网络，但是对于我们而言，同一个EC2中的多个可用区域可以被认为是一个数据中心的一部分。</li><li>Consensus——一致性，使用Consensus来表明就leader选举和事务的顺序达成一致。为了以容错方式达成一致，一般有超过半数一致则可以认为整体一致。Consul使用Raft实现一致性，进行leader选举，在consul中的使用bootstrap时，可以进行自选，其他server加入进来后bootstrap就可以取消。</li><li>Gossip——Consul建立在Serf的基础之上，它提供了一个用于多播目的的完整的gossip协议。Serf提供成员关系，故障检测和事件广播。Serf是去中心化的服务发现和编制的解决方案，节点失败侦测与发现，具有容错、轻量、高可用的特点。</li><li>LAN Gossip——它包含所有位于同一个局域网或者数据中心的所有节点。</li><li>WAN Gossip——它只包含Server。这些server主要分布在不同的数据中心并且通常通过因特网或者广域网通信。</li><li>RPC——远程过程调用。这是一个允许client请求server的请求/响应机制。</li></ul><p>在每个数据中心，client和server是混合的。一般建议有3-5台server。这是基于有故障情况下的可用性和性能之间的权衡结果，因为越多的机器加入达成共识越慢。然而，并不限制client的数量，它们可以很容易的扩展到数千或者数万台。</p><p>同一个数据中心的所有节点都必须加入gossip协议。这意味着gossip协议包含一个给定数据中心的所有节点。这服务于几个目的：第一，不需要在client上配置server地址。发现都是自动完成的。第二，检测节点故障的工作不是放在server上，而是分布式的。这是的故障检测相比心跳机制有更高的可扩展性。第三：它用来作为一个消息层来通知事件，比如leader选举发生时。</p><p>每个数据中心的server都是Raft节点集合的一部分。这意味着它们一起工作并选出一个leader，一个有额外工作的server。leader负责处理所有的查询和事务。作为一致性协议的一部分，事务也必须被复制到所有其他的节点。因为这一要求，当一个非leader得server收到一个RPC请求时，它将请求转发给集群leader。</p><p>server节点也作为WAN gossip Pool的一部分。这个Pool不同于LAN Pool，因为它是为了优化互联网更高的延迟，并且它只包含其他Consul server节点。这个Pool的目的是为了允许数据中心能够以low-touch的方式发现彼此。这使得一个新的数据中心可以很容易的加入现存的WAN gossip。因为server都运行在这个pool中，它也支持跨数据中心请求。当一个server收到来自另一个数据中心的请求时，它随即转发给正确数据中想一个server。该server再转发给本地leader。</p><p>这使得数据中心之间只有一个很低的耦合，但是由于故障检测，连接缓存和复用，跨数据中心的请求都是相对快速和可靠的。</p><h2 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明"></a>配置参数说明</h2><table><thead><tr><th>参数列表</th><th>参数的含义和使用场景说明</th></tr></thead><tbody><tr><td>advertise</td><td>通知展现地址用来改变我们给集群中的其他节点展现的地址，一般情况下-bind地址就是展现地址</td></tr><tr><td>bootstrap</td><td>用来控制一个server是否在bootstrap模式，在一个datacenter中只能有一个server处于bootstrap模式，当一个server处于bootstrap模式时，可以自己选举为raft leader</td></tr><tr><td>bootstrap-expect</td><td>在一个datacenter中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap共用</td></tr><tr><td>bind</td><td>该地址用来在集群内部的通讯IP地址，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</td></tr><tr><td>client</td><td>consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1</td></tr><tr><td>config-file</td><td>明确的指定要加载哪个配置文件</td></tr><tr><td>config-dir</td><td>配置文件目录，里面所有以.json结尾的文件都会被加载</td></tr><tr><td>data-dir</td><td>提供一个目录用来存放agent的状态，所有的agent允许都需要该目录，该目录必须是稳定的，系统重启后都继续存在</td></tr><tr><td>dc</td><td>该标记控制agent允许的datacenter的名称，默认是dc1</td></tr><tr><td>encrypt</td><td>指定secret key，使consul在通讯时进行加密，key可以通过consul keygen生成，同一个集群中的节点必须使用相同的key</td></tr><tr><td>join</td><td>加入一个已经启动的agent的ip地址，可以多次指定多个agent的地址。如果consul不能加入任何指定的地址中，则agent会启动失败，默认agent启动时不会加入任何节点</td></tr><tr><td>retry-interval</td><td>两次join之间的时间间隔，默认是30s</td></tr><tr><td>retry-max</td><td>尝试重复join的次数，默认是0，也就是无限次尝试</td></tr><tr><td>log-level</td><td>consul agent启动后显示的日志信息级别。默认是info，可选：trace、debug、info、warn、err</td></tr><tr><td>node</td><td>节点在集群中的名称，在一个集群中必须是唯一的，默认是该节点的主机名</td></tr><tr><td>protocol</td><td>consul使用的协议版本</td></tr><tr><td>rejoin</td><td>使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中</td></tr><tr><td>server</td><td>定义agent运行在server模式，每个集群至少有一个server，建议每个集群的server不要超过5个</td></tr><tr><td>syslog</td><td>开启系统日志功能，只在linux/osx上生效</td></tr><tr><td>pid-file</td><td>提供一个路径来存放pid文件，可以使用该文件进行SIGINT/SIGHUP(关闭/更新)agent</td></tr></tbody></table><p><strong>参数说明：</strong></p><p><strong>-node：</strong>节点的名称</p><p><strong>-bind：</strong>绑定的一个地址，用于节点之间通信的地址，可以是内外网，必须是可以访问到的地址</p><p><strong>-server：</strong>这个就是表示这个节点是个SERVER</p><p><strong>-bootstrap-expect：</strong>这个就是表示期望提供的SERVER节点数目，数目一达到，它就会被激活，然后就是LEADER了</p><p>参数说明：</p><p><strong>-join：</strong>这个表示启动的时候，要加入到哪个集群内，这里就是说要加入到节点1的集群</p><p><strong>-node-id：</strong>这个貌似版本8才加入的，这里用这个来指定唯一的节点ID，可以查看这个<a href="https://link.jianshu.com/?t=https://github.com/hashicorp/consul/issues/2877">issue</a></p><p><strong>-client：</strong>这个表示注册或者查询等一系列客户端对它操作的IP，如果不指定这个IP，默认是127.0.0.1。</p><h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><p>除了命令行参数外，配置也可以写入文件中。配置文件是json格式的，很容易编写。配置文件不仅被用来设置agent的启动，也可以用来提供健康检测和服务发现的定义。</p><p>配置文件详细参数说明:</p><blockquote><ol><li>acl_datacenter：只用于server，指定的datacenter的权威ACL信息，所有的servers和datacenter必须同意ACL datacenter</li><li>acl_default_policy：默认是allow。</li><li>acl_token：agent会使用这个token和consul server进行请求。</li><li>acl_ttl：控制TTL的cache，默认是30s。</li><li>addresses：一个嵌套对象，可以设置以下key：dns、http、rpc。</li><li>advertise_addr：等同于-advertise。</li><li>bootstrap：等同于-bootstrap。</li><li>bootstrap_expect：等同于-bootstrap-expect。</li><li>bind_addr：等同于-bind。</li><li>ca_file：提供CA文件路径，用来检查客户端或者服务端的链接。</li><li>cert_file：必须和key_file一起。</li><li>client_addr：等同于-client。</li><li>datacenter：等同于-dc。</li><li>data_dir：等同于-data-dir。</li><li>disable_anonymous_signature：在进行更新检查时禁止匿名签名。</li><li>disable_remote_exec：禁止支持远程执行，设置为true，agent会忽视所有进入的远程执行请求。</li><li>disable_update_check：禁止自动检查安全公告和新版本信息。</li><li>dns_config：是一个嵌套对象，可以设置以下参数：allow_stale、max_stale、node_ttl 、service_ttl、enable_truncate。</li><li>domain：默认情况下consul在进行DNS查询时查询的是consul域，可以通过该参数进行修改。</li><li>enable_debug：开启debug模式。</li><li>enable_syslog：等同于-syslog。</li><li>encrypt：等同于-encrypt。</li><li>key_file：提供私钥的路径。</li><li>leave_on_terminate：默认是false，如果为true，当agent收到一个TERM信号的时候，它会发送leave信息到集群中的其他节点上。</li><li>log_level：等同于-log-level。</li><li>node_name:等同于-node。</li><li>ports：这是一个嵌套对象，可以设置以下key：dns(dns地址：8600)、http(http api地址：8500)、rpc(rpc:8400)、serf_lan(lan port:8301)、serf_wan(wan port:8302)、server(server rpc:8300)。</li><li>protocol：等同于-protocol。</li><li>rejoin_after_leave：等同于-rejoin。</li><li>retry_join：等同于-retry-join。</li><li>retry_interval：等同于-retry-interval。</li><li>server：等同于-server。</li><li>server_name：会覆盖TLS CA的node_name，可以用来确认CA name和hostname相匹配。</li><li>skip_leave_on_interrupt：和leave_on_terminate比较类似，不过只影响当前句柄。</li><li>start_join：一个字符数组提供的节点地址会在启动时被加入。</li><li>syslog_facility：当enable_syslog被提供后，该参数控制哪个级别的信息被发送，默认Local0。</li><li>ui_dir：等同于-ui-dir。</li><li>verify_incoming：默认false，如果为true，则所有进入链接都需要使用TLS，需要客户端使用ca_file提供ca文件。只用于consul server端，因为client从来没有进入的链接。</li><li>verify_outgoing：默认false，如果为true，则所有出去链接都需要使用TLS，需要服务端使用ca_file提供ca文件，consul server和client都需要使用，因为两者都有出去的链接。</li><li>watches：watch一个详细名单。</li></ol></blockquote><h2 id="常用端口说明"><a href="#常用端口说明" class="headerlink" title="常用端口说明"></a>常用端口说明</h2><blockquote><ol><li>dns - The DNS server, -1 to disable. Default 8600.</li><li>http - The HTTP API, -1 to disable. Default 8500.</li><li>https - The HTTPS API, -1 to disable. Default -1 (disabled).</li><li>rpc - The CLI RPC endpoint. Default 8400.</li><li>serf_lan - The Serf LAN port. Default 8301.</li><li>serf_wan - The Serf WAN port. Default 8302.</li><li>server - Server RPC address. Default 8300.</li></ol></blockquote><h2 id="服务发现机制"><a href="#服务发现机制" class="headerlink" title="服务发现机制"></a>服务发现机制</h2><p>加入集群</p><ul><li>当一个Consul代理启动后，它并不知道其它节点的存在，它是一个孤立的单节点集群。</li><li>如果想感知到其它节点的存在，它必须加入到一个现存的集群。</li><li>要加入到一个现存的集群，它只用加入集群中任意一个现存的成员。</li><li>当加入一个现存的成员后，会通过成员间的通讯很快发现集群中的其它成员。</li><li>一个Consul代理可以加入任意一个代理，而不仅仅是服务节点。</li></ul><p>为了让三个Server间能互相感知，这里就要让其它二个Server加入同一个集群中。</p><h2 id="通过json配置文件集群安装"><a href="#通过json配置文件集群安装" class="headerlink" title="通过json配置文件集群安装"></a>通过json配置文件集群安装</h2><h3 id="集群节点规划"><a href="#集群节点规划" class="headerlink" title="集群节点规划"></a>集群节点规划</h3><p>本地使用的是<code>CentOS 17.x</code>的虚拟机：</p><table><thead><tr><th>容器名称</th><th>容器IP地址</th><th>映射端口号</th><th>宿主机IP地址</th><th>服务运行模式</th></tr></thead><tbody><tr><td>consul1</td><td>172.20.0.2</td><td>8500 -&gt; 8500</td><td>192.168.56.76</td><td>Server Master</td></tr><tr><td>consul2</td><td>172.20.0.3</td><td>9500 -&gt; 8500</td><td>192.168.56.76</td><td>Server</td></tr><tr><td>consul3</td><td>172.20.0.4</td><td>10500 -&gt; 8500</td><td>192.168.56.76</td><td>Server</td></tr><tr><td>consul4</td><td>172.20.0.5</td><td>11500 -&gt; 8500</td><td>192.168.56.76</td><td>Client</td></tr></tbody></table><p>172.20.0.1是网关</p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker pull consul:1.3.0</code></pre></div><h3 id="配置docker-网络"><a href="#配置docker-网络" class="headerlink" title="配置docker 网络"></a>配置docker 网络</h3><p>因为docker 默认的 docker0 虚拟网卡是不支持直接设置静态ip的。所以我们先创建一个自己的虚拟网络。</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker network create -d bridge --subnet<span class="token operator">=</span><span class="token number">172.20</span>.0.0/24 static-net</code></pre></div><p>执行完可以通过 下面了命令查看</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker network <span class="token function">ls</span></code></pre></div><p>PS:</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">私有网络ip选取小知识：这三个地址段分别位于A、B、C三类地址内：A类地址：10.0.0.0--10.255.255.255B类地址：172.16.0.0--172.31.255.255C类地址：192.168.0.0--192.168.255.255</code></pre></div><h3 id="三个server节点配置"><a href="#三个server节点配置" class="headerlink" title="三个server节点配置"></a>三个server节点配置</h3><p>创建的三个server节点命名 为 consul_server1，consul_server2， consul_server3。</p><p>下面先创建好配置文件，在 /opt/consul/server_conf 目录添加三个配置文件。<br>consul_server1_conf.json、consul_server2_conf.json 和 consul_server3_conf.json</p><h4 id="consul-server1-conf-json-的内容如下："><a href="#consul-server1-conf-json-的内容如下：" class="headerlink" title="consul_server1_conf.json 的内容如下："></a>consul_server1_conf.json 的内容如下：</h4><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>        <span class="token property">"datacenter"</span><span class="token operator">:</span> <span class="token string">"dc1"</span><span class="token punctuation">,</span>        <span class="token property">"log_level"</span><span class="token operator">:</span> <span class="token string">"INFO"</span><span class="token punctuation">,</span>        <span class="token property">"node_name"</span><span class="token operator">:</span> <span class="token string">"consul_server1"</span><span class="token punctuation">,</span>        <span class="token property">"server"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"bootstrap_expect"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"bind_addr"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>        <span class="token property">"client_addr"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>        <span class="token property">"ui"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"ports"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token number">8600</span><span class="token punctuation">,</span>            <span class="token property">"http"</span><span class="token operator">:</span> <span class="token number">8500</span><span class="token punctuation">,</span>            <span class="token property">"https"</span><span class="token operator">:</span> <span class="token number">-1</span><span class="token punctuation">,</span>            <span class="token property">"server"</span><span class="token operator">:</span> <span class="token number">8300</span><span class="token punctuation">,</span>            <span class="token property">"serf_lan"</span><span class="token operator">:</span> <span class="token number">8301</span><span class="token punctuation">,</span>            <span class="token property">"serf_wan"</span><span class="token operator">:</span> <span class="token number">8302</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"rejoin_after_leave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"retry_join"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"172.20.0.2"</span><span class="token punctuation">,</span>            <span class="token string">"172.20.0.3"</span><span class="token punctuation">,</span>            <span class="token string">"172.20.0.4"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"retry_interval"</span><span class="token operator">:</span> <span class="token string">"30s"</span><span class="token punctuation">,</span>        <span class="token property">"reconnect_timeout"</span><span class="token operator">:</span> <span class="token string">"72h"</span><span class="token punctuation">&#125;</span></code></pre></div><p>另外两个配置基本一样只用更改 node_name 为 consul_server2 和 consul_server3 即可。</p><h4 id="consul-server2-conf-json-的内容如下："><a href="#consul-server2-conf-json-的内容如下：" class="headerlink" title="consul_server2_conf.json 的内容如下："></a>consul_server2_conf.json 的内容如下：</h4><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>        <span class="token property">"datacenter"</span><span class="token operator">:</span> <span class="token string">"dc1"</span><span class="token punctuation">,</span>        <span class="token property">"log_level"</span><span class="token operator">:</span> <span class="token string">"INFO"</span><span class="token punctuation">,</span>        <span class="token property">"node_name"</span><span class="token operator">:</span> <span class="token string">"consul_server2"</span><span class="token punctuation">,</span>        <span class="token property">"server"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"bootstrap_expect"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"bind_addr"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>        <span class="token property">"client_addr"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>        <span class="token property">"ui"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"ports"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token number">8600</span><span class="token punctuation">,</span>            <span class="token property">"http"</span><span class="token operator">:</span> <span class="token number">8500</span><span class="token punctuation">,</span>            <span class="token property">"https"</span><span class="token operator">:</span> <span class="token number">-1</span><span class="token punctuation">,</span>            <span class="token property">"server"</span><span class="token operator">:</span> <span class="token number">8300</span><span class="token punctuation">,</span>            <span class="token property">"serf_lan"</span><span class="token operator">:</span> <span class="token number">8301</span><span class="token punctuation">,</span>            <span class="token property">"serf_wan"</span><span class="token operator">:</span> <span class="token number">8302</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"rejoin_after_leave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"retry_join"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"172.20.0.2"</span><span class="token punctuation">,</span>            <span class="token string">"172.20.0.3"</span><span class="token punctuation">,</span>            <span class="token string">"172.20.0.4"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"retry_interval"</span><span class="token operator">:</span> <span class="token string">"30s"</span><span class="token punctuation">,</span>        <span class="token property">"reconnect_timeout"</span><span class="token operator">:</span> <span class="token string">"72h"</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="consul-server3-conf-json-的内容如下："><a href="#consul-server3-conf-json-的内容如下：" class="headerlink" title="consul_server3_conf.json 的内容如下："></a>consul_server3_conf.json 的内容如下：</h4><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>        <span class="token property">"datacenter"</span><span class="token operator">:</span> <span class="token string">"dc1"</span><span class="token punctuation">,</span>        <span class="token property">"log_level"</span><span class="token operator">:</span> <span class="token string">"INFO"</span><span class="token punctuation">,</span>        <span class="token property">"node_name"</span><span class="token operator">:</span> <span class="token string">"consul_server3"</span><span class="token punctuation">,</span>        <span class="token property">"server"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"bootstrap_expect"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"bind_addr"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>        <span class="token property">"client_addr"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>        <span class="token property">"ui"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"ports"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token number">8600</span><span class="token punctuation">,</span>            <span class="token property">"http"</span><span class="token operator">:</span> <span class="token number">8500</span><span class="token punctuation">,</span>            <span class="token property">"https"</span><span class="token operator">:</span> <span class="token number">-1</span><span class="token punctuation">,</span>            <span class="token property">"server"</span><span class="token operator">:</span> <span class="token number">8300</span><span class="token punctuation">,</span>            <span class="token property">"serf_lan"</span><span class="token operator">:</span> <span class="token number">8301</span><span class="token punctuation">,</span>            <span class="token property">"serf_wan"</span><span class="token operator">:</span> <span class="token number">8302</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"rejoin_after_leave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"retry_join"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"172.20.0.2"</span><span class="token punctuation">,</span>            <span class="token string">"172.20.0.3"</span><span class="token punctuation">,</span>            <span class="token string">"172.20.0.4"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"retry_interval"</span><span class="token operator">:</span> <span class="token string">"30s"</span><span class="token punctuation">,</span>        <span class="token property">"reconnect_timeout"</span><span class="token operator">:</span> <span class="token string">"72h"</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="启动-server-节点"><a href="#启动-server-节点" class="headerlink" title="启动 server 节点"></a>启动 server 节点</h4><p>分别依次执行启动server，命令如下：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d  --name consul_server1 --net static-net --ip <span class="token number">172.20</span>.0.2 -h consul1 -v /opt/consul/server_conf/consul_server1_conf.json:/consul/config/consul_server1_conf.json consul:1.3.0 agent -config-dir /consul/config</code></pre></div><p>根据启动不同的 server 修改相应的名称、IP、主机和配置文件。</p><h3 id="三个-client节点配置"><a href="#三个-client节点配置" class="headerlink" title="三个 client节点配置"></a>三个 client节点配置</h3><p>创建的三个server节点命名 为 consul_client1，consul_client2， consul_client3。</p><p>下面先创建好配置文件，在 /opt/consul/client_conf 目录添加三个配置文件。<br>consul_client1_conf.json、consul_client2_conf.json 和 consul_client3_conf.json</p><h4 id="consul-client1-conf-json-的内容如下："><a href="#consul-client1-conf-json-的内容如下：" class="headerlink" title="consul_client1_conf.json 的内容如下："></a>consul_client1_conf.json 的内容如下：</h4><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"datacenter"</span><span class="token operator">:</span> <span class="token string">"dc1"</span><span class="token punctuation">,</span>    <span class="token property">"log_level"</span><span class="token operator">:</span> <span class="token string">"INFO"</span><span class="token punctuation">,</span>    <span class="token property">"node_name"</span><span class="token operator">:</span> <span class="token string">"consul_client1"</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"bind_addr"</span><span class="token operator">:</span> <span class="token string">"172.20.0.5"</span><span class="token punctuation">,</span>    <span class="token property">"client_addr"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"ui"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"ports"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token number">8600</span><span class="token punctuation">,</span>        <span class="token property">"http"</span><span class="token operator">:</span> <span class="token number">8500</span><span class="token punctuation">,</span>        <span class="token property">"https"</span><span class="token operator">:</span> <span class="token number">-1</span><span class="token punctuation">,</span>        <span class="token property">"server"</span><span class="token operator">:</span> <span class="token number">8300</span><span class="token punctuation">,</span>        <span class="token property">"serf_lan"</span><span class="token operator">:</span> <span class="token number">8301</span><span class="token punctuation">,</span>        <span class="token property">"serf_wan"</span><span class="token operator">:</span> <span class="token number">8302</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"rejoin_after_leave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"retry_join"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"172.20.0.2"</span><span class="token punctuation">,</span>        <span class="token string">"172.20.0.3"</span><span class="token punctuation">,</span>        <span class="token string">"172.20.0.4"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"retry_interval"</span><span class="token operator">:</span> <span class="token string">"30s"</span><span class="token punctuation">,</span>    <span class="token property">"reconnect_timeout"</span><span class="token operator">:</span> <span class="token string">"72h"</span><span class="token punctuation">&#125;</span></code></pre></div><p>另外两个配置基本一样只用更改 node_name 为 consul_client2 和 consul_client3 即可。</p><h4 id="启动-client-节点"><a href="#启动-client-节点" class="headerlink" title="启动 client 节点"></a>启动 client 节点</h4><p>分别依次执行启动client，命令如下：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d --name consul_client1 --net static-net --ip <span class="token number">172.20</span>.0.5 -h consul4 -v /opt/consul/client_conf/consul_client1_conf.json:/consul/config/consul_client1_conf.json consul:1.3.0 agent -config-dir /consul/config</code></pre></div><p>根据启动不同的 client 修改相应的容器和节点名称、IP、主机和配置文件。</p><h2 id="集群部署与配置"><a href="#集群部署与配置" class="headerlink" title="集群部署与配置"></a>集群部署与配置</h2><p>不使用配置文件的集群与配置部署</p><h3 id="启动consul-server1节点"><a href="#启动consul-server1节点" class="headerlink" title="启动consul_server1节点"></a>启动consul_server1节点</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d --name<span class="token operator">=</span>consul-server1 --net <span class="token function">host</span> --ip <span class="token number">172.20</span>.0.2 <span class="token punctuation">\</span>             -p <span class="token number">8300</span>:8300 <span class="token punctuation">\</span>             -p <span class="token number">8301</span>:8301 <span class="token punctuation">\</span>             -p <span class="token number">8301</span>:8301/udp <span class="token punctuation">\</span>             -p <span class="token number">8302</span>:8302/udp <span class="token punctuation">\</span>             -p <span class="token number">8302</span>:8302 <span class="token punctuation">\</span>             -p <span class="token number">8400</span>:8400 <span class="token punctuation">\</span>             -p <span class="token number">8500</span>:8500 <span class="token punctuation">\</span>             -p <span class="token number">8600</span>:8600 <span class="token punctuation">\</span>             -h consul-server1 <span class="token punctuation">\</span>             consul:1.3.0 agent -server -bind<span class="token operator">=</span><span class="token number">172.20</span>.0.2 <span class="token punctuation">\</span>             -bootstrap-expect<span class="token operator">=</span><span class="token number">3</span> -node<span class="token operator">=</span>consul-server1 <span class="token punctuation">\</span>             advertise <span class="token number">192.168</span>.56.76 <span class="token punctuation">\</span>             -data-dir<span class="token operator">=</span>/tmp/data-dir -client <span class="token number">0.0</span>.0.0 -ui</code></pre></div><h3 id="启动consul-server2节点"><a href="#启动consul-server2节点" class="headerlink" title="启动consul_server2节点"></a>启动consul_server2节点</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d --name<span class="token operator">=</span>consul-server2 --net static-net --ip <span class="token number">172.20</span>.0.3 <span class="token punctuation">\</span>             -p <span class="token number">9300</span>:8300  <span class="token punctuation">\</span>             -p <span class="token number">9301</span>:8301 <span class="token punctuation">\</span>             -p <span class="token number">9301</span>:8301/udp <span class="token punctuation">\</span>             -p <span class="token number">9302</span>:8302/udp <span class="token punctuation">\</span>             -p <span class="token number">9302</span>:8302 <span class="token punctuation">\</span>             -p <span class="token number">9400</span>:8400 <span class="token punctuation">\</span>             -p <span class="token number">9500</span>:8500 <span class="token punctuation">\</span>             -p <span class="token number">9600</span>:8600 <span class="token punctuation">\</span>             -h consul-server2 <span class="token punctuation">\</span>             consul:1.3.0 agent -server -bind<span class="token operator">=</span><span class="token number">172.20</span>.0.3 <span class="token punctuation">\</span>             -join<span class="token operator">=</span><span class="token number">192.168</span>.56.76  <span class="token punctuation">\</span>             -node<span class="token operator">=</span>consul-server2 <span class="token punctuation">\</span>             -data-dir<span class="token operator">=</span>/tmp/data-dir -client <span class="token number">0.0</span>.0.0 -ui</code></pre></div><h3 id="启动consul-server3节点"><a href="#启动consul-server3节点" class="headerlink" title="启动consul_server3节点"></a>启动consul_server3节点</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d --name<span class="token operator">=</span>consul-server3 --restart<span class="token operator">=</span>always <span class="token punctuation">\</span>             -p <span class="token number">10300</span>:8300  <span class="token punctuation">\</span>             -p <span class="token number">10301</span>:8301 <span class="token punctuation">\</span>             -p <span class="token number">10301</span>:8301/udp <span class="token punctuation">\</span>             -p <span class="token number">10302</span>:8302/udp <span class="token punctuation">\</span>             -p <span class="token number">10302</span>:8302 <span class="token punctuation">\</span>             -p <span class="token number">10400</span>:8400 <span class="token punctuation">\</span>             -p <span class="token number">10500</span>:8500 <span class="token punctuation">\</span>             -p <span class="token number">10600</span>:8600 <span class="token punctuation">\</span>             -h consul-server3 <span class="token punctuation">\</span>             consul:1.3.0 agent -server -bind<span class="token operator">=</span><span class="token number">172.20</span>.0.4 <span class="token punctuation">\</span>             -join<span class="token operator">=</span><span class="token number">192.168</span>.56.76 -node-id<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>uuidgen <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print tolower(<span class="token variable">$0</span>)&#125;'</span><span class="token variable">)</span></span> <span class="token punctuation">\</span>             -node<span class="token operator">=</span>consul-server3 <span class="token punctuation">\</span>             -data-dir<span class="token operator">=</span>/tmp/data-dir -client <span class="token number">0.0</span>.0.0 -ui</code></pre></div><h3 id="启动consul-client1节点"><a href="#启动consul-client1节点" class="headerlink" title="启动consul_client1节点"></a>启动consul_client1节点</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker run -d --name<span class="token operator">=</span>consul-client1 --net static-net --ip <span class="token number">172.20</span>.0.5 <span class="token punctuation">\</span>            -p <span class="token number">11300</span>:8300 <span class="token punctuation">\</span>            -p <span class="token number">11301</span>:8301 <span class="token punctuation">\</span>            -p <span class="token number">11301</span>:8301/udp <span class="token punctuation">\</span>            -p <span class="token number">11302</span>:8302/udp <span class="token punctuation">\</span>            -p <span class="token number">11302</span>:8302 <span class="token punctuation">\</span>            -p <span class="token number">11400</span>:8400 <span class="token punctuation">\</span>            -p <span class="token number">11500</span>:8500 <span class="token punctuation">\</span>            -p <span class="token number">11600</span>:8600 <span class="token punctuation">\</span>            -h consul-client1 <span class="token punctuation">\</span>            consul:1.3.0 agent -bind<span class="token operator">=</span><span class="token number">172.20</span>.0.5 <span class="token punctuation">\</span>            -retry-join<span class="token operator">=</span><span class="token number">172.20</span>.0.2 <span class="token punctuation">\</span>            -node<span class="token operator">=</span>consul-client1 -client <span class="token number">0.0</span>.0.0 -ui</code></pre></div><h2 id="集群监控与跟踪"><a href="#集群监控与跟踪" class="headerlink" title="集群监控与跟踪"></a>集群监控与跟踪</h2><h3 id="查看server日志"><a href="#查看server日志" class="headerlink" title="查看server日志"></a>查看server日志</h3><p>查看<code>consu_serverl</code>的日志，追踪运行情况：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker logs -f consul_server1</code></pre></div><p>当3个<code>Server</code>节点都启动并正常运行时，观察<code>consul_server2</code>和<code>consul_server3</code>的进程日志，可以发现<code>consul_server1</code>被选举为<code>leader</code>节点，也就是这个<strong>数据中心</strong>的<code>Server Master</code>。</p><p>再次查看<code>consul_server1</code>节点的进程启动日志：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker logs -f consul_srver1</code></pre></div><p>观察日志发现，<code>consul_server2</code>和<code>consul_server3</code>都成功join到了<code>consul_server1</code>所在的数据中心<code>dc1</code>。当集群中有3台<code>Consul Server</code>启动时，<code>consul_server1</code>被选举为<code>dc1</code>中的主节点。然后，<code>consul_server1</code>会通过心跳检查的方式，不断地对<code>consul_server2</code>和<code>consul_server3</code>进行健康检查。</p><h3 id="查看client日志"><a href="#查看client日志" class="headerlink" title="查看client日志"></a>查看client日志</h3><p>查看<code>consu_clientl</code>的日志，追踪运行情况：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker <span class="token function">ps</span> -f consul_client1</code></pre></div><p>可以发现：<code>consul_client1</code>是以<code>Client</code>模式启动运行的。启动后完成后，把<code>dc1</code>数据中心中的以<code>Server</code>模式启动的节点<code>consul_server1</code>、<code>consul_server2</code>和<code>consul_server3</code>都添加到<strong>本地缓存列表</strong>中。当客户端向<code>consul_client1</code>发起服务发现的请求后，<code>consul_client1</code>会通过<code>RPC</code>将请求转发给<code>Server</code>节点中的其中一台做处理。</p><h3 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker <span class="token builtin class-name">exec</span> -t consul_server1 consul membersNode            Address          Status  Type    Build  Protocol  DC   Segmentconsul_server1  <span class="token number">172.20</span>.0.2:8301  alive   server  <span class="token number">1.3</span>.0  <span class="token number">2</span>         dc1  <span class="token operator">&lt;</span>all<span class="token operator">></span>consul_server2  <span class="token number">172.20</span>.0.3:8301  alive   server  <span class="token number">1.3</span>.0  <span class="token number">2</span>         dc1  <span class="token operator">&lt;</span>all<span class="token operator">></span>consul_server3  <span class="token number">172.20</span>.0.4:8301  alive   server  <span class="token number">1.3</span>.0  <span class="token number">2</span>         dc1  <span class="token operator">&lt;</span>all<span class="token operator">></span>consul_client1  <span class="token number">172.20</span>.0.5:8301  alive   client  <span class="token number">1.3</span>.0  <span class="token number">2</span>         dc1  <span class="token operator">&lt;</span>default<span class="token operator">></span></code></pre></div><p><code>dc1</code>数据中心中的4个节点<code>consul_server1</code>, <code>consul_server2</code>, <code>consul_server3</code>和<code>consul_server4</code>分别成功启动，<code>Status</code>表示他们的状态，都为<code>alive</code>。<code>consul_server1</code>, <code>consul_server2</code>, <code>consul_server3</code>以<code>Server</code>模式启动，而<code>consul_client1</code>以<code>Client</code>模式启动。</p><p>与之前启动的一样。DC表示数据中心，都是dc1。</p><h3 id="节点异常consul的处理"><a href="#节点异常consul的处理" class="headerlink" title="节点异常consul的处理"></a>节点异常consul的处理</h3><ul><li>LEADER 挂了<br>leader挂了，consul会重新选取出新的leader，只要超过一半的SERVER还活着，集群是可以正常工作的。consul1是leader，所以把这个容器停了。</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker stop consul_server1</code></pre></div><p>看看其他节点的日志（consul_server2）：</p><p>日志打印，心跳检查consul_server1的ip超时，接着开始选举。consul_server2被选举为新的leader。我们查看下现在的leader：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> http://172.17.0.33:8500/v1/status/leader<span class="token string">"172.20.0.3:8300"</span></code></pre></div><blockquote><p>172.20.0.3 就是 consul_server2节点的IP</p></blockquote><h3 id="拉取Registrator的镜像"><a href="#拉取Registrator的镜像" class="headerlink" title="拉取Registrator的镜像"></a>拉取Registrator的镜像</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker pull gliderlabs/registrator</code></pre></div><h3 id="启动Registrator节点"><a href="#启动Registrator节点" class="headerlink" title="启动Registrator节点"></a>启动Registrator节点</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker run -d --name<span class="token operator">=</span>registrator <span class="token punctuation">\</span>             -v /var/run/docker.sock:/tmp/docker.sock <span class="token punctuation">\</span>             --net<span class="token operator">=</span>host <span class="token punctuation">\</span>             gliderlabs/registrator -ip<span class="token operator">=</span><span class="token string">"192.168.56.76"</span> consul://172.20.0.2:8500</code></pre></div><blockquote><p><code>--net：</code>指定为host表明使用主机模式。</p><p><code>-ip：</code>用于指定宿主机的IP地址，用于健康检查的通信地址。</p><p><code>consul://192.168.56.76:8500:</code> 使用Consul作为服务注册表，指定具体的Consul通信地址进行服务注册和注销（注意：8500是Consul对外暴露的HTTP通信端口）。</p></blockquote><p>查看<code>Registrator</code>的容器进程启动日志：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker logs -f registrator</code></pre></div><p><code>Registrator</code>在启动过程完成了以下几步操作：</p><ol><li>查看Consul数据中心的leader节点，作为服务注册表；</li><li>同步当前宿主机的启用容器，以及所有的服务端口；</li><li>分别将各个容器发布的服务地址/端口注册到Consul的服务注册列表。</li></ol><h3 id="查看Consul的注册状态"><a href="#查看Consul的注册状态" class="headerlink" title="查看Consul的注册状态"></a>查看Consul的注册状态</h3><p><code>Consul</code>提供了一个<code>Web UI</code>来可视化<strong>服务注册列表</strong>、<strong>通信节点</strong>、<strong>数据中心</strong>和<strong>键/值存储</strong>等，直接访问宿主机的<code>8500</code>端口。</p><p><strong>服务注册列表</strong>：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xVUlBeaQ-1599612136677)(assets/1541719660720.png)]</p><p><code>NODES</code>节点下挂载着<code>dc1</code>数据中心中的所有的<code>Consul</code>节点，包括<code>Consul Server</code>和<code>Client</code>。</p><p><strong>通信节点列表</strong>：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2FP30a9c-1599612136679)(assets/1541719699164.png)]</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>部署完了，那么可以看看怎么用这个东东了。</p><h3 id="注册个服务"><a href="#注册个服务" class="headerlink" title="注册个服务"></a>注册个服务</h3><p>使用HTTP API 注册个服务，使用<a href="%5Bhttps://www.consul.io/api/agent/service.html%5D(https://link.jianshu.com/?t=https://www.consul.io/api/agent/service.html">接口API</a> API)调用</p><p>调用 <a href="https://link.jianshu.com/?t=http://consul:8500/v1/agent/service/register">http://192.168.56.76:8500/v1/agent/service/register</a> PUT 注册一个服务。request body:</p><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"ID"</span><span class="token operator">:</span> <span class="token string">"userServiceId"</span><span class="token punctuation">,</span> <span class="token comment">//服务id</span>  <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"userService"</span><span class="token punctuation">,</span> <span class="token comment">//服务名</span>  <span class="token property">"Tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token comment">//服务的tag，自定义，可以根据这个tag来区分同一个服务名的服务</span>    <span class="token string">"primary"</span><span class="token punctuation">,</span>    <span class="token string">"v1"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"Address"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token comment">//服务注册到consul的IP，服务发现，发现的就是这个IP</span>  <span class="token property">"Port"</span><span class="token operator">:</span> <span class="token number">8000</span><span class="token punctuation">,</span>          <span class="token comment">//服务注册consul的PORT，发现的就是这个PORT</span>  <span class="token property">"EnableTagOverride"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"Check"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>             <span class="token comment">//健康检查部分</span>    <span class="token property">"DeregisterCriticalServiceAfter"</span><span class="token operator">:</span> <span class="token string">"90m"</span><span class="token punctuation">,</span>    <span class="token property">"HTTP"</span><span class="token operator">:</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token comment">//指定健康检查的URL，调用后只要返回20X，consul都认为是健康的</span>    <span class="token property">"Interval"</span><span class="token operator">:</span> <span class="token string">"10s"</span>   <span class="token comment">//健康检查间隔时间，每隔10s，调用一次上面的URL</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="调用服务"><a href="#调用服务" class="headerlink" title="调用服务"></a>调用服务</h3><p>使用curl调用服务</p><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json">curl http<span class="token operator">:</span><span class="token comment">//192.168.56.76:8500/v1/agent/service/register -X PUT -i -H "Content-Type:application/json" -d '&#123;</span> <span class="token property">"ID"</span><span class="token operator">:</span> <span class="token string">"userServiceId"</span><span class="token punctuation">,</span>   <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"userService"</span><span class="token punctuation">,</span> <span class="token property">"Tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token string">"primary"</span><span class="token punctuation">,</span>   <span class="token string">"v1"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"Address"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token property">"Port"</span><span class="token operator">:</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token property">"EnableTagOverride"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token property">"Check"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token property">"DeregisterCriticalServiceAfter"</span><span class="token operator">:</span> <span class="token string">"90m"</span><span class="token punctuation">,</span>   <span class="token property">"HTTP"</span><span class="token operator">:</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span>   <span class="token property">"Interval"</span><span class="token operator">:</span> <span class="token string">"10s"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>'</code></pre></div><p>OK，注册了一个服务</p><h3 id="发现个服务"><a href="#发现个服务" class="headerlink" title="发现个服务"></a>发现个服务</h3><p>刚刚注册了名为userService的服务，我们现在发现（查询）下这个服务</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://172.20.0.2:8500/v1/catalog/service/userService</code></pre></div><p>返回的响应：</p><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"Address"</span><span class="token operator">:</span> <span class="token string">"172.17.0.33"</span><span class="token punctuation">,</span>        <span class="token property">"CreateIndex"</span><span class="token operator">:</span> <span class="token number">880</span><span class="token punctuation">,</span>        <span class="token property">"ID"</span><span class="token operator">:</span> <span class="token string">"e6e9a8cb-c47e-4be9-b13e-a24a1582e825"</span><span class="token punctuation">,</span>        <span class="token property">"ModifyIndex"</span><span class="token operator">:</span> <span class="token number">880</span><span class="token punctuation">,</span>        <span class="token property">"Node"</span><span class="token operator">:</span> <span class="token string">"consul3"</span><span class="token punctuation">,</span>        <span class="token property">"NodeMeta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"ServiceAddress"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>        <span class="token property">"ServiceEnableTagOverride"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"ServiceID"</span><span class="token operator">:</span> <span class="token string">"userServiceId"</span><span class="token punctuation">,</span>        <span class="token property">"ServiceName"</span><span class="token operator">:</span> <span class="token string">"userService"</span><span class="token punctuation">,</span>        <span class="token property">"ServicePort"</span><span class="token operator">:</span> <span class="token number">8000</span><span class="token punctuation">,</span>        <span class="token property">"ServiceTags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"primary"</span><span class="token punctuation">,</span>            <span class="token string">"v1"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"TaggedAddresses"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"lan"</span><span class="token operator">:</span> <span class="token string">"172.17.0.33"</span><span class="token punctuation">,</span>            <span class="token property">"wan"</span><span class="token operator">:</span> <span class="token string">"172.17.0.33"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre></div><p>内容有了吧，这个就是我们刚刚注册的服务的信息，就可以获取到</p><blockquote><p>服务的名称是“userService”<br>服务地址是“127.0.0.1”<br>服务的端口是“8000”</p></blockquote><h3 id="存储个K-V"><a href="#存储个K-V" class="headerlink" title="存储个K/V"></a>存储个K/V</h3><p>设置一个值到user/config/connections 内容为5</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker <span class="token builtin class-name">exec</span> -t consul1 consul kv put user/config/connections <span class="token number">5</span></code></pre></div><p>获取特定的值</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ docker <span class="token builtin class-name">exec</span> -t consul1 consul kv get -detailed user/config/connections</code></pre></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>启动<code>Registrator</code>以后，宿主机中的所有容器把服务都注册到<code>Consul</code>的<code>SERVICES</code>上，测试完成！</p><p><strong>单数据中心</strong>的<code>Consul</code>集群的搭建就完成了！！！后续章节我会介绍如何使用<code>Registrator</code>进行服务注册的<strong>标签化</strong>。然后通过<code>docker</code>部署<strong>多实例</strong>的<code>Web</code>容器来实现基于<code>HTTP</code>的<code>RESTful Service</code>和基于<code>TCP</code>的<code>RPC Service</code>的<strong>服务注册</strong>和<strong>健康检查定义</strong>，并演示如何以<strong>标签</strong>标识一个服务的多个实例。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>docker官网镜像</p><p><a href="https://hub.docker.com/_/consul/">https://hub.docker.com/_/consul/</a></p><p><a href="https://blog.csdn.net/liuzhuchen/article/details/81913562">https://blog.csdn.net/liuzhuchen/article/details/81913562</a> 详细参数说明</p><p><a href="https://www.jianshu.com/p/f8746b81d65d">https://www.jianshu.com/p/f8746b81d65d</a></p><p>nomad</p><p><a href="https://www.cnblogs.com/magic-chenyang/p/7975677.html">https://www.cnblogs.com/magic-chenyang/p/7975677.html</a></p><p><a href="http://www.cnblogs.com/magic-chenyang/p/7975724.html">http://www.cnblogs.com/magic-chenyang/p/7975724.html</a></p><p>官网</p><p><a href="https://www.consul.io/">https://www.consul.io/</a></p><p>集群安装配置</p><p><a href="https://juejin.im/post/5b2a6b606fb9a00e594c676d">https://juejin.im/post/5b2a6b606fb9a00e594c676d</a></p><p>安装与配置gliderlabs/registrator具有可插入后端的Docker服务注册表桥</p><p><a href="https://hub.docker.com/r/gliderlabs/registrator/">https://hub.docker.com/r/gliderlabs/registrator/</a></p><p>consul 入门</p><p><a href="http://www.10tiao.com/html/357/201705/2247485185/1.html">http://www.10tiao.com/html/357/201705/2247485185/1.html</a></p><p>使用jenkins、docker、consul、nginx搭建支持自动化构建部署以及弹性伸缩的集群系统详细教程</p><p><a href="https://blog.csdn.net/qq_22152261/article/details/76099579">https://blog.csdn.net/qq_22152261/article/details/76099579</a></p><p>consul-template &amp; nginx</p><p><a href="https://tonybai.com/2018/09/10/setup-service-discovery-and-load-balance-based-on-consul/">https://tonybai.com/2018/09/10/setup-service-discovery-and-load-balance-based-on-consul/</a></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">## 总结启动&#96;Registrator&#96;以后，宿主机中的所有容器把服务都注册到&#96;Consul&#96;的&#96;SERVICES&#96;上，测试完成！**单数据中心**的&#96;Consul&#96;集群的搭建就完成了！！！后续章节我会介绍如何使用&#96;Registrator&#96;进行服务注册的**标签化**。然后通过&#96;docker&#96;部署**多实例**的&#96;Web&#96;容器来实现基于&#96;HTTP&#96;的&#96;RESTful Service&#96;和基于&#96;TCP&#96;的&#96;RPC Service&#96;的**服务注册**和**健康检查定义**，并演示如何以**标签**标识一个服务的多个实例。## 参考docker官网镜像https:&#x2F;&#x2F;hub.docker.com&#x2F;_&#x2F;consul&#x2F;https:&#x2F;&#x2F;blog.csdn.net&#x2F;liuzhuchen&#x2F;article&#x2F;details&#x2F;81913562 详细参数说明https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;f8746b81d65dnomadhttps:&#x2F;&#x2F;www.cnblogs.com&#x2F;magic-chenyang&#x2F;p&#x2F;7975677.htmlhttp:&#x2F;&#x2F;www.cnblogs.com&#x2F;magic-chenyang&#x2F;p&#x2F;7975724.html官网https:&#x2F;&#x2F;www.consul.io&#x2F;集群安装配置https:&#x2F;&#x2F;juejin.im&#x2F;post&#x2F;5b2a6b606fb9a00e594c676d安装与配置gliderlabs&#x2F;registrator具有可插入后端的Docker服务注册表桥https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;gliderlabs&#x2F;registrator&#x2F;consul 入门http:&#x2F;&#x2F;www.10tiao.com&#x2F;html&#x2F;357&#x2F;201705&#x2F;2247485185&#x2F;1.html使用jenkins、docker、consul、nginx搭建支持自动化构建部署以及弹性伸缩的集群系统详细教程https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_22152261&#x2F;article&#x2F;details&#x2F;76099579consul-template &amp; nginxhttps:&#x2F;&#x2F;tonybai.com&#x2F;2018&#x2F;09&#x2F;10&#x2F;setup-service-discovery-and-load-balance-based-on-consul&#x2F;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>middle-component</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vncserver</title>
    <link href="/2021/01/05/vncserver/"/>
    <url>/2021/01/05/vncserver/</url>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -x <span class="token number">192.168</span>.31.225:10822 -fsSl https://raw.githubusercontent.com/czy1024/luna-linux-conf/master/vnc/vnc_install.sh<span class="token variable">)</span></span>"</span></code></pre></div><p>VNC Client就不用说了，单文件版，双击就能运行。</p><p>VNC Server安装如下：</p><ol><li><strong>ssh到你的server，然后输入以下命令安装tiger vnc</strong>：</li></ol><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tigervnc-standalone-server tigervnc-xorg-extension tigervnc-viewer</code></pre></div><ol><li><strong>如果你没有任何桌面的话，可以输入以下命令安装过gnome桌面</strong>：</li></ol><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ubuntu-gnome-desktop<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> gdm<span class="token function">sudo</span> systemctl start gdm</code></pre></div><ol><li><strong>配置vnc的登陆密码，直接输入以下命令，输入两次密码即可（最多只能输入8位）</strong>：</li></ol><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">vncpasswd</code></pre></div><ol><li><strong>配置vnc使用gnome桌面</strong>：</li></ol><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">nano</span> ~/.vnc/xstartup</code></pre></div><p>然后将以下内容粘贴进去，并保存：</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/sh</span><span class="token comment"># Uncomment the following two lines for normal desktop:</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">XKL_XMODMAP_DISABLE</span><span class="token operator">=</span><span class="token number">1</span><span class="token builtin class-name">unset</span> <span class="token environment constant">SESSION_MANAGER</span><span class="token comment"># exec /etc/X11/xinit/xinitrc</span><span class="token builtin class-name">unset</span> <span class="token environment constant">DBUS_SESSION_BUS_ADDRESS</span>gnome-panel <span class="token operator">&amp;</span>gnmoe-settings-daemon <span class="token operator">&amp;</span>metacity <span class="token operator">&amp;</span>nautilus <span class="token operator">&amp;</span>gnome-terminal <span class="token operator">&amp;</span></code></pre></div><p>如果你使用的xfce桌面，就粘贴如下代码：</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/sh </span><span class="token builtin class-name">unset</span> <span class="token environment constant">SESSION_MANAGER</span> <span class="token builtin class-name">unset</span> <span class="token environment constant">DBUS_SESSION_BUS_ADDRESS</span> startxfce4 <span class="token operator">&amp;</span> <span class="token punctuation">[</span> -x /etc/vnc/xstartup <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exec</span> /etc/vnc/xstartup <span class="token punctuation">[</span> -r <span class="token environment constant">$HOME</span>/.Xresources <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> xrdb <span class="token environment constant">$HOME</span>/.Xresources xsetroot -solid grey</code></pre></div><ol><li><strong>启动TigerVNC，直接输入</strong><code>vncserver</code><strong>看到如下结果就成功了</strong><br><img src="https://img-blog.csdnimg.cn/20191121141703662.jpg" alt="在这里插入图片描述"><br>但是别着急连,因为还不能用. 输入<code>netstat -ntupl|grep vnc</code>查看tiger vnc的端口监听状况:<br><img src="https://img-blog.csdnimg.cn/20191121141940642.jpg" alt="在这里插入图片描述"><br>发现它只是监听了127.0.0.1本地地址，没有监听外网地址。输入<code>vncserver -kill :*</code>关闭vncserver（实际上是关闭了所有vnc开启的桌面，更多命令参考请输入<code>vncserver --help</code>），然后再输入<code>vncserver -localhost no</code>，开启外网的监听。<br><img src="https://img-blog.csdnimg.cn/20191121142528917.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9jYXRzaGl0b25lLmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到已经监听0.0.0.0了，端口5901。<br>如果你使用ECS或者有防火墙的话，可能会有一些安全策略上的配置需要你放行该端口。<br>至此，你可以开启VNC Viewer进行远程了。<br><img src="https://img-blog.csdnimg.cn/20191121145230255.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9jYXRzaGl0b25lLmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>(1) VNC server输入IP和端口的方式（中间用两个冒号分隔）。</p><p>(2) 如果远程之后你发现是<strong>灰屏而且鼠标指针是个十字</strong>的话，表明需要安装gnome缺失组件：</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y</code></pre></div><p>然后再安装dpi</p><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xfonts-100dpi<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xfonts-75dpi</code></pre></div><h3 id="图赏"><a href="#图赏" class="headerlink" title="图赏"></a>图赏</h3><p><img src="https://img-blog.csdnimg.cn/20191121144358233.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9jYXRzaGl0b25lLmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><blockquote><p>Inspired by<br><a href="https://www.cyberciti.biz/faq/install-and-configure-tigervnc-server-on-ubuntu-18-04/">1.Install and Configure TigerVNC server on Ubuntu 18.04</a><br><a href="https://blog.csdn.net/ypbsyy/article/details/80096757">2.VNC连接Ubuntu 16.04桌面灰色的问题解决</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>vnc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vncserver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/2021/01/04/redis/"/>
    <url>/2021/01/04/redis/</url>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在Web应用发展的初期，那时关系型数据库受到了较为广泛的关注和应用，原因是因为那时候Web站点基本上访问和并发不高、交互也较少。而在后来，随着访问量的提升，使用关系型数据库的Web站点多多少少都开始在性能上出现了一些瓶颈，而瓶颈的源头一般是在磁盘的I/O上。而随着互联网技术的进一步发展，各种类型的应用层出不穷，这导致在当今云计算、大数据盛行的时代，对性能有了更多的需求，主要体现在以下四个方面：</p><ol><li>低延迟的读写速度：应用快速地反应能极大地提升用户的满意度</li><li>支撑海量的数据和流量：对于搜索这样大型应用而言，需要利用PB级别的数据和能应对百万级的流量</li><li>大规模集群的管理：系统管理员希望分布式应用能更简单的部署和管理</li><li>庞大运营成本的考量：IT部门希望在硬件成本、软件成本和人力成本能够有大幅度地降低</li></ol><p>为了克服这一问题，NoSQL应运而生，它同时具备了高性能、可扩展性强、高可用等优点，受到广泛开发人员和仓库管理人员的青睐。</p><h3 id="Redis是什么"><a href="#Redis是什么" class="headerlink" title="Redis是什么"></a>Redis是什么</h3><p>Redis是现在最受欢迎的NoSQL数据库之一，Redis是一个使用ANSI C编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库，其具备如下特性：</p><ul><li>基于内存运行，性能高效</li><li>支持分布式，理论上可以无限扩展</li><li>key-value存储系统</li><li>开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API</li></ul><p>相比于其他数据库类型，Redis具备的特点是：</p><ul><li>C/S通讯模型</li><li>单进程单线程模型</li><li>丰富的数据类型</li><li>操作具有原子性</li><li>持久化</li><li>高并发读写</li><li>支持lua脚本</li></ul><p>哪些大厂在使用Redis？</p><ul><li>github</li><li>twitter</li><li>微博</li><li>Stack Overflow</li><li>阿里巴巴</li><li>百度</li><li>美团</li><li>搜狐</li></ul><h4 id="Redis的应用场景有哪些？"><a href="#Redis的应用场景有哪些？" class="headerlink" title="Redis的应用场景有哪些？"></a>Redis的应用场景有哪些？</h4><p>Redis 的应用场景包括：缓存系统（“热点”数据：高频读、低频写）、计数器、消息队列系统、排行榜、社交网络和实时系统。</p><p> <img src="https://i.loli.net/2021/01/19/H8lWRphECVtYGk2.png" alt="img"></p><h3 id="Redis的数据类型及主要特性"><a href="#Redis的数据类型及主要特性" class="headerlink" title="Redis的数据类型及主要特性"></a>Redis的数据类型及主要特性</h3><p>Redis提供的数据类型主要分为5种自有类型和一种自定义类型，这5种自有类型包括：String类型、哈希类型、列表类型、集合类型和顺序集合类型。</p><p><img src="https://i.loli.net/2021/01/19/dzZCyliWpQwqRhT.png" alt="img"></p><h4 id="String类型："><a href="#String类型：" class="headerlink" title="String类型："></a>String类型：</h4><p>它是一个二进制安全的字符串，意味着它不仅能够存储字符串、还能存储图片、视频等多种类型, 最大长度支持512M。</p><p>对每种数据类型，Redis都提供了丰富的操作命令，如：</p><ul><li>GET/MGET</li><li>SET/SETEX/MSET/MSETNX</li><li>INCR/DECR</li><li>GETSET</li><li>DEL</li></ul><h4 id="哈希类型："><a href="#哈希类型：" class="headerlink" title="哈希类型："></a>哈希类型：</h4><p>该类型是由field和关联的value组成的map。其中，field和value都是字符串类型的。</p><p>Hash的操作命令如下：</p><ul><li>HGET/HMGET/HGETALL</li><li>HSET/HMSET/HSETNX</li><li>HEXISTS/HLEN</li><li>HKEYS/HDEL</li><li>HVALS</li></ul><h4 id="列表类型："><a href="#列表类型：" class="headerlink" title="列表类型："></a>列表类型：</h4><p>该类型是一个插入顺序排序的字符串元素集合, 基于双链表实现。</p><p>List的操作命令如下：</p><ul><li>LPUSH/LPUSHX/LPOP/RPUSH/RPUSHX/RPOP/LINSERT/LSET</li><li>LINDEX/LRANGE</li><li>LLEN/LTRIM</li></ul><h4 id="集合类型："><a href="#集合类型：" class="headerlink" title="集合类型："></a>集合类型：</h4><p>Set类型是一种无顺序集合, 它和List类型最大的区别是：集合中的元素没有顺序, 且元素是唯一的。</p><p>Set类型的底层是通过哈希表实现的，其操作命令为：</p><ul><li>SADD/SPOP/SMOVE/SCARD</li><li>SINTER/SDIFF/SDIFFSTORE/SUNION</li></ul><p>Set类型主要应用于：在某些场景，如社交场景中，通过交集、并集和差集运算，通过Set类型可以非常方便地查找共同好友、共同关注和共同偏好等社交关系。</p><h4 id="顺序集合类型："><a href="#顺序集合类型：" class="headerlink" title="顺序集合类型："></a>顺序集合类型：</h4><p>ZSet是一种有序集合类型，每个元素都会关联一个double类型的分数权值，通过这个权值来为集合中的成员进行从小到大的排序。与Set类型一样，其底层也是通过哈希表实现的。</p><p>ZSet命令：</p><ul><li>ZADD/ZPOP/ZMOVE/ZCARD/ZCOUNT</li><li>ZINTER/ZDIFF/ZDIFFSTORE/ZUNION</li></ul><h3 id="Redis的数据结构"><a href="#Redis的数据结构" class="headerlink" title="Redis的数据结构"></a>Redis的数据结构</h3><p>Redis的数据结构如下图所示：</p><p><img src="https://i.loli.net/2021/01/19/dY6Qa2FX4nyPj7C.png" alt="img"></p><p>关于上表中的部分释义：</p><ol><li>压缩列表是列表键和哈希键的底层实现之一。当一个列表键只包含少量列表项，并且每个列表项要么就是小整数，要么就是长度比较短的字符串，Redis就会使用压缩列表来做列表键的底层实现</li><li>整数集合是集合键的底层实现之一，当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis就会使用整数集合作为集合键的底层实现</li></ol><p>如下是定义一个Struct数据结构的例子：</p><p><img src="https://czy1024.github.io/luna-image-bed/img/139239-20191126141036706-1247302576.png" alt="img"></p><h4 id="简单动态字符串SDS-Simple-Dynamic-String"><a href="#简单动态字符串SDS-Simple-Dynamic-String" class="headerlink" title="简单动态字符串SDS (Simple Dynamic String)"></a>简单动态字符串SDS (Simple Dynamic String)</h4><p>基于C语言中传统字符串的缺陷，Redis自己构建了一种名为简单动态字符串的抽象类型，简称SDS，其结构如下：</p><p><img src="https://czy1024.github.io/luna-image-bed/img/139239-20191126141052157-436992972.png" alt="img"></p><p>SDS几乎贯穿了Redis的所有数据结构，应用十分广泛。</p><h4 id="SDS的特点"><a href="#SDS的特点" class="headerlink" title="SDS的特点"></a>SDS的特点</h4><p>和C字符串相比，SDS的特点如下：</p><p><img src="https://czy1024.github.io/luna-image-bed/img/139239-20191126141103927-1852926069.png" alt="img"></p><p>　　1. 常数复杂度获取字符串长度</p><p>　　　　Redis中利用SDS字符串的len属性可以直接获取到所保存的字符串的长<br>　　　　度，直接将获取字符串长度所需的复杂度从C字符串的O(N)降低到了O(1)。</p><p>　　2. 减少修改字符串时导致的内存重新分配次数</p><p>　　　　通过C字符串的特性，我们知道对于一个包含了N个字符的C字符串来说，其底层实现总是N+1个字符长的数组（额外一个空字符结尾）</p><p>　　　　那么如果这个时候需要对字符串进行修改，程序就需要提前对这个C字符串数组进行一次内存重分配（可能是扩展或者释放）　</p><p>　　　　而内存重分配就意味着是一个耗时的操作。</p><p>Redis巧妙的使用了SDS避免了C字符串的缺陷。在SDS中，buf数组的长度不一定就是字符串的字符数量加一，buf数组里面可以包含未使用的字节，而这些未使用的字节由free属性记录。</p><p>与此同时，SDS采用了<strong>空间预分配</strong>的策略，避免C字符串每一次修改时都需要进行内存重分配的耗时操作，将内存重分配从原来的每修改N次就分配N次——&gt;降低到了修改N次最多分配N次。</p><p>如下是Redis对SDS的简单定义：</p><p><img src="https://czy1024.github.io/luna-image-bed/img/139239-20191126141239967-123973180.png" alt="img"> </p><p><img src="https://i.loli.net/2021/01/19/yAfbqXVRUHz1Pek.png" alt="img"></p><h3 id="Redis特性1：事务"><a href="#Redis特性1：事务" class="headerlink" title="Redis特性1：事务"></a>Redis特性1：事务</h3><ul><li>命令序列化，按顺序执行</li><li>原子性</li><li>三阶段: 开始事务 - 命令入队 - 执行事务</li><li>命令：MULTI/EXEC/DISCARD</li></ul><h3 id="Redis特性2：发布订阅-Pub-Sub"><a href="#Redis特性2：发布订阅-Pub-Sub" class="headerlink" title="Redis特性2：发布订阅(Pub/Sub)"></a>Redis特性2：发布订阅(Pub/Sub)</h3><ul><li>Pub/sub是一种消息通讯模式</li><li>Pub发送消息, Sub接受消息</li><li>Redis客户端可以订阅任意数量的频道</li><li>“fire and forgot”, 发送即遗忘</li><li>命令：Publish/Subscribe/Psubscribe/UnSub</li></ul><p>　　<img src="https://i.loli.net/2021/01/19/u5pyEk47B2dKDHC.png" alt="img"></p><h3 id="Redis特性3：Stream"><a href="#Redis特性3：Stream" class="headerlink" title="Redis特性3：Stream"></a>Redis特性3：Stream</h3><ul><li>Redis 5.0新增</li><li>等待消费</li><li>消费组(组内竞争)</li><li>消费历史数据</li><li>FIFO</li></ul><p><img src="https://i.loli.net/2021/01/19/5RsvUW9X81aLdVl.png" alt="img"></p><p>以上就是Redis的基本概念，下面我们将介绍在开发过程中可能会踩到的“坑”。</p><h3 id="Redis常见问题解析：击穿"><a href="#Redis常见问题解析：击穿" class="headerlink" title="Redis常见问题解析：击穿"></a>Redis常见问题解析：击穿</h3><p>概念：在Redis获取某一key时, 由于key不存在, 而必须向DB发起一次请求的行为, 称为“Redis击穿”。</p><p><img src="https://i.loli.net/2021/01/19/KXzoAb5Wf8xjMpB.png" alt="img"></p><p>引发击穿的原因：</p><ul><li>第一次访问</li><li>恶意访问不存在的key</li><li>Key过期</li></ul><p>合理的规避方案：</p><ul><li>服务器启动时, 提前写入</li><li>规范key的命名, 通过中间件拦截</li><li>对某些高频访问的Key，设置合理的TTL或永不过期</li></ul><h3 id="Redis常见问题解析：雪崩"><a href="#Redis常见问题解析：雪崩" class="headerlink" title="Redis常见问题解析：雪崩"></a>Redis常见问题解析：雪崩</h3><p>概念：Redis缓存层由于某种原因宕机后，所有的请求会涌向存储层，短时间内的高并发请求可能会导致存储层挂机，称之为“Redis雪崩”。</p><p>合理的规避方案：</p><ul><li>使用Redis集群</li><li>限流</li></ul><h3 id="Redis在产品开发中的应用实践"><a href="#Redis在产品开发中的应用实践" class="headerlink" title="Redis在产品开发中的应用实践"></a>Redis在产品开发中的应用实践</h3><p>为此，我很高兴的为大家介绍，葡萄城架构师Jim将在2019-11-27 14：00 为大家带来一场公开课，其中 Jim除了为大家讲解Redis的基础，同时也会实际演示他所在的项目组使用Redis时碰到的问题以及解决方案，对于刚接触Redis的同学来说，更具参考意义和学习价值，欢迎大家届时参加，公开课地址：<a href="https://live.vhall.com/661463644%E3%80%82">https://live.vhall.com/661463644。</a></p><ul><li>后端采用nodeJS</li><li>使用Azure的Redis服务</li><li>Redis的使用场景</li></ul><p>　　　　- token缓存, 用于令牌验证</p><p>　　　　- IP白名单</p><p>碰到的问题</p><ul><li>“网络抖动”或者Redis服务异常导致Redis访问超时</li><li>Redis客户端驱动稳定性问题</li></ul><p>　　　　- 连接池 “Broken connection” 问题</p><p>　　　　- JS的Promise引出的Redis重置问题</p><p>下面我们来简单了解一下Redis的进阶知识。</p><h3 id="进阶之Redis协议简介"><a href="#进阶之Redis协议简介" class="headerlink" title="进阶之Redis协议简介"></a>进阶之Redis协议简介</h3><p>Redis客户端通讯协议：RESP(Redis Serialization Protocol)，其特点是：</p><ul><li>简单</li><li>解析速度快</li><li>可读性好</li></ul><p>Redis集群内部通讯协议：RECP(Redis Cluster Protocol ) ，其特点是：</p><ul><li>每一个node两个tcp 连接</li><li>一个负责client-server通讯(P: 6379)</li><li>一个负责node之间通讯(P: 10000 + 6379)</li></ul><p> <img src="https://i.loli.net/2021/01/19/1kqa8y9d3guoKNx.png" alt="img"></p><p>Redis协议支持的数据类型：</p><ul><li><p>简单字符(首字节: “+”)</p><p> 　　“+OK\r\n”</p></li><li><p>错误(首字节: “-”)</p><p> 　　“-error msg\r\n”</p></li><li><p>数字(首字节: “:”)</p><p> 　　“:123\r\n”</p></li><li><p>批量字符(首字节: “$”)</p><p> 　　“&amp;hello\r\nWhoa re you\r\n”</p></li><li><p>数组(首字节: “*”)</p><p> 　　“*0\r\n”</p><div class="code-wrapper"><pre><code>　　“*-1\r\n”</code></pre></div></li></ul><h3 id="除了Redis，还有什么NoSQL型数据库"><a href="#除了Redis，还有什么NoSQL型数据库" class="headerlink" title="除了Redis，还有什么NoSQL型数据库"></a>除了Redis，还有什么NoSQL型数据库</h3><p>市面上类似于Redis，同样是NoSQL型的数据库有很多，如下图所示，除了Redis，还有MemCache、Cassadra和Mongo。下面，我们就分别对这几个数据库做一下简要的介绍：</p><p><img src="https://czy1024.github.io/luna-image-bed/img/139239-20191126141542546-1669870462.png" alt="img"></p><p><strong>Memcache****：</strong>这是一个和Redis非常相似的数据库，但是它的数据类型没有Redis丰富。Memcache由LiveJournal的Brad Fitzpatrick开发，作为一套分布式的高速缓存系统，被许多网站使用以提升网站的访问速度，对于一些大型的、需要频繁访问数据库的网站访问速度的提升效果十分显著。</p><p><strong>Apache Cassandra****：</strong>（社区内一般简称为C*）这是一套开源分布式NoSQL数据库系统。它最初由Facebook开发，用于储存收件箱等简单格式数据，集Google BigTable的数据模型与Amazon Dynamo的完全分布式架构于一身。Facebook于2008将 Cassandra 开源，由于其良好的可扩展性和性能，被 Apple、Comcast、Instagram、Spotify、eBay、Rackspace、Netflix等知名网站所采用，成为了一种流行的分布式结构化数据存储方案。</p><p><strong>MongoDB</strong>：是一个基于分布式文件存储、面向文档的NoSQL数据库，由C++编写，旨在为WEB应用提供可扩展的高性能数据存储解决方案。MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系型数据库的，它支持的数据结构非常松散，是一种类似json的BSON格式。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>middle-component</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx all</title>
    <link href="/2021/01/01/nginx-all/"/>
    <url>/2021/01/01/nginx-all/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>Nginx是lgor Sysoev为俄罗斯访问量第二的rambler.ru站点设计开发的。从2004年发布至今，凭借开源的力量，已经接近成熟与完善。</p><p>Nginx功能丰富，可作为HTTP服务器，也可作为反向代理服务器，邮件服务器。支持FastCGI、SSL、Virtual Host、URL Rewrite、Gzip等功能。并且支持很多第三方的模块扩展。</p><p>Nginx的稳定性、功能集、示例配置文件和低系统资源的消耗让他后来居上，在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。</p><p>牛逼吹的差不多啦，如果你还不过瘾，你可以百度百科或者一些书上找到这样的夸耀，比比皆是。</p><hr><h2 id="Nginx常用功能"><a href="#Nginx常用功能" class="headerlink" title="Nginx常用功能"></a>Nginx常用功能</h2><p>1、Http代理，反向代理：作为web服务器最常用的功能之一，尤其是反向代理。</p><p>这里我给来2张图，对正向代理与反响代理做个诠释，具体细节，大家可以翻阅下资料。</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/08/1535725078-5993-20160202133724350-1807373891.jpg" alt="img"></p><p>Nginx在做反向代理时，提供性能稳定，并且能够提供配置灵活的转发功能。Nginx可以根据不同的正则匹配，采取不同的转发策略，比如图片文件结尾的走文件服务器，动态页面走web服务器，只要你正则写的没问题，又有相对应的服务器解决方案，你就可以随心所欲的玩。并且Nginx对返回结果进行错误页跳转，异常判断等。如果被分发的服务器存在异常，他可以将请求重新转发给另外一台服务器，然后自动去除异常服务器。</p><hr><h2 id="2、负载均衡"><a href="#2、负载均衡" class="headerlink" title="2、负载均衡"></a>2、负载均衡</h2><p>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略，就天马行空，只有你想不到的没有他做不到的啦，你可以参照所有的负载均衡算法，给他一一找出来做下实现。</p><p>上3个图，理解这三种负载均衡算法的实现</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/08/1535725078-8303-20160202133753382-1863657242.jpg" alt="img"></p><p>Ip hash算法，对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/08/1535725078-1224-20160201162405944-676557632.jpg" alt="img"></p><hr><h2 id="3、web缓存"><a href="#3、web缓存" class="headerlink" title="3、web缓存"></a>3、web缓存</h2><p>Nginx可以对不同的文件做不同的缓存处理，配置灵活，并且支持FastCGI_Cache，主要用于对FastCGI的动态程序进行缓存。配合着第三方的ngx_cache_purge，对制定的URL缓存内容可以的进行增删管理。</p><hr><h2 id="4、Nginx相关地址"><a href="#4、Nginx相关地址" class="headerlink" title="4、Nginx相关地址"></a>4、Nginx相关地址</h2><p>源码：<a href="https://trac.nginx.org/nginx/browser">https://trac.nginx.org/nginx/browser</a></p><p>官网：<a href="http://www.nginx.org/">http://www.nginx.org/</a></p><hr><h2 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h2><p>如果你下载好啦，你的安装文件，不妨打开conf文件夹的nginx.conf文件，Nginx服务器的基础配置，默认的配置也存放在此。</p><p>在 nginx.conf 的注释符号为： <strong>#</strong></p><p>默认的 nginx 配置文件 nginx.conf 内容如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">#user  nobody;worker_processes  1;#error_log  logs&#x2F;error.log;#error_log  logs&#x2F;error.log  notice;#error_log  logs&#x2F;error.log  info;#pid        logs&#x2F;nginx.pid;events &#123;    worker_connections  1024;&#125;http &#123;    include       mime.types;    default_type  application&#x2F;octet-stream;    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    #access_log  logs&#x2F;access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    server &#123;        listen       80;        server_name  localhost;        #charset koi8-r;        #access_log  logs&#x2F;host.access.log  main;        location &#x2F; &#123;            root   html;            index  index.html index.htm;        &#125;        #error_page  404              &#x2F;404.html;        # redirect server error pages to the static page &#x2F;50x.html        #        error_page   500 502 503 504  &#x2F;50x.html;        location &#x3D; &#x2F;50x.html &#123;            root   html;        &#125;        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #        #location ~ \.php$ &#123;        #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;        #&#125;        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #        #location ~ \.php$ &#123;        #    root           html;        #    fastcgi_pass   127.0.0.1:9000;        #    fastcgi_index  index.php;        #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;        #    include        fastcgi_params;        #&#125;        # deny access to .htaccess files, if Apache&#39;s document root        # concurs with nginx&#39;s one        #        #location ~ &#x2F;\.ht &#123;        #    deny  all;        #&#125;    &#125;    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server &#123;    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location &#x2F; &#123;    #        root   html;    #        index  index.html index.htm;    #    &#125;    #&#125;    # HTTPS server    #    #server &#123;    #    listen       443 ssl;    #    server_name  localhost;    #    ssl_certificate      cert.pem;    #    ssl_certificate_key  cert.key;    #    ssl_session_cache    shared:SSL:1m;    #    ssl_session_timeout  5m;    #    ssl_ciphers  HIGH:!aNULL:!MD5;    #    ssl_prefer_server_ciphers  on;    #    location &#x2F; &#123;    #        root   html;    #        index  index.html index.htm;    #    &#125;    #&#125;&#125;</code></pre></div><p><strong>nginx 文件结构</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">...              #全局块events &#123;         #events块   ...&#125;http      #http块&#123;    ...   #http全局块    server        #server块    &#123;         ...       #server全局块        location [PATTERN]   #location块        &#123;            ...        &#125;        location [PATTERN]         &#123;            ...        &#125;    &#125;    server    &#123;      ...    &#125;    ...     #http全局块&#125;</code></pre></div><ul><li>1、<strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li>2、<strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li>3、<strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li>4、<strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li><li>5、<strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li></ul><p>下面给大家上一个配置文件，作为理解。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">########### 每个指令必须有分号结束。##################user administrator administrators;  #配置用户或者组，默认为nobody nobody。#worker_processes 2;  #允许生成的进程数，默认为1#pid &#x2F;nginx&#x2F;pid&#x2F;nginx.pid;   #指定nginx进程运行文件存放地址error_log log&#x2F;error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emergevents &#123;    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|&#x2F;dev&#x2F;poll|eventport    worker_connections  1024;    #最大连接数，默认为512&#125;http &#123;    include       mime.types;   #文件扩展名与文件类型映射表    default_type  application&#x2F;octet-stream; #默认文件类型，默认为text&#x2F;plain    #access_log off; #取消服务日志        log_format myFormat &#39;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#39;; #自定义格式    access_log log&#x2F;access.log myFormat;  #combined为日志格式的默认值    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。    upstream mysvr &#123;         server 127.0.0.1:7878;      server 192.168.10.121:3333 backup;  #热备    &#125;    error_page 404 https:&#x2F;&#x2F;www.baidu.com; #错误页    server &#123;        keepalive_requests 120; #单连接请求上限次数。        listen       4545;   #监听端口        server_name  127.0.0.1;   #监听地址               location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。           #root path;  #根目录           #index vv.txt;  #设置默认页           proxy_pass  http:&#x2F;&#x2F;mysvr;  #请求转向mysvr 定义的服务器列表           deny 127.0.0.1;  #拒绝的ip           allow 172.18.5.54; #允许的ip                   &#125;     &#125;&#125;</code></pre></div><p>上面是nginx的基本配置，需要注意的有以下几点：</p><p>1、几个常见配置项：</p><ul><li>1.$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；</li><li>2.$remote_user ：用来记录客户端用户名称；</li><li>3.$time_local ： 用来记录访问时间与时区；</li><li>4.$request ： 用来记录请求的url与http协议；</li><li>5.$status ： 用来记录请求状态；成功是200；</li><li>6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；</li><li>7.$http_referer ：用来记录从那个页面链接访问过来的；</li><li>8.$http_user_agent ：记录客户端浏览器的相关信息；</li></ul><p>2、惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。</p><p>3、每个指令必须有分号结束。</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apt-get</title>
    <link href="/2021/01/01/apt-get/"/>
    <url>/2021/01/01/apt-get/</url>
    
    <content type="html"><![CDATA[<h2 id="镜像源网站"><a href="#镜像源网站" class="headerlink" title="镜像源网站"></a>镜像源网站</h2><p>Ubuntu、Python、Nodejs、MySQL、Git、Chromium、Docker、Homebrew 等一系列的常用开源系统、软件都是国外开发的，下载地址位于国外，从国内访问、下载、更新</p><h3 id="清华源镜像"><a href="#清华源镜像" class="headerlink" title="清华源镜像"></a>清华源镜像</h3><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a></p></blockquote><p>可能是最好的国内镜像站，最吸引人的特点是1）帮助文件最全面最好用；2）镜像源数量最多。是最推荐的镜像源。</p><h3 id="腾讯源"><a href="#腾讯源" class="headerlink" title="腾讯源"></a>腾讯源</h3><blockquote><p><a href="https://mirrors.cloud.tencent.com/">https://mirrors.cloud.tencent.com/</a></p></blockquote><p>访问很快，无论是电信移动还是教育网等环境都不用担心访问速度。</p><p>软件数量和帮助文件尽管略逊于清华源，但还不错了，比阿里源好不少。</p><h3 id="阿里源"><a href="#阿里源" class="headerlink" title="阿里源"></a>阿里源</h3><blockquote><p><a href="https://developer.aliyun.com/mirror/">https://developer.aliyun.com/mirror/</a></p></blockquote><p>特点是不差钱，所以访问网速很快，无论是电信移动还是教育网等环境。</p><p>不足之处是镜像源数量较少，比腾讯源少，很多软件目前都没有，比如 GitLab。</p><h3 id="华为源"><a href="#华为源" class="headerlink" title="华为源"></a>华为源</h3><blockquote><p><a href="https://mirrors.huaweicloud.com/">https://mirrors.huaweicloud.com/</a></p></blockquote><p>软件数量还行，比阿里源多。</p><p>有一些华为自家的。也有个别其他镜像源没有的，比如 ChromeDriver，似乎在其他镜像站没找到过。</p><h3 id="中科大源"><a href="#中科大源" class="headerlink" title="中科大源"></a>中科大源</h3><blockquote><p><a href="http://mirrors.ustc.edu.cn/">http://mirrors.ustc.edu.cn/</a></p></blockquote><h3 id="上海交大源"><a href="#上海交大源" class="headerlink" title="上海交大源"></a>上海交大源</h3><p><a href="https://mirrors.sjtug.sjtu.edu.cn/#/">https://mirrors.sjtug.sjtu.edu.cn/#/</a></p><h3 id="北京外国语大学源"><a href="#北京外国语大学源" class="headerlink" title="北京外国语大学源"></a>北京外国语大学源</h3><p><a href="https://mirrors.bfsu.edu.cn/">https://mirrors.bfsu.edu.cn/</a></p><p>是清华源的姊妹站，维护和运营由清华源提供，本质上跟清华源是一样的。</p><p>官方公告显示：网络接入 CERNET2 IPv6 和中国移动 IPv4 线路，支持 HTTP/HTTPS/RSYNC 访问，如果在使用 TUNA 镜像时遇到负载过高、速度过慢等问题，可以尝试切换至北外镜像站以获得更佳的体验。</p><h3 id="网易源"><a href="#网易源" class="headerlink" title="网易源"></a>网易源</h3><blockquote><p><a href="http://mirrors.163.com/">http://mirrors.163.com/</a></p></blockquote><p>软件数量较少。</p><h3 id="豆瓣-Python-PyPI-镜像"><a href="#豆瓣-Python-PyPI-镜像" class="headerlink" title="豆瓣 Python PyPI 镜像"></a>豆瓣 Python PyPI 镜像</h3><blockquote><p><a href="http://pypi.doubanio.com/simple/">http://pypi.doubanio.com/simple/</a></p></blockquote><p>Python pip 广泛使用的国内源。</p><h3 id="淘宝-NPM-镜像"><a href="#淘宝-NPM-镜像" class="headerlink" title="淘宝 NPM 镜像"></a>淘宝 NPM 镜像</h3><blockquote><p><a href="https://developer.aliyun.com/mirror/NPM">https://developer.aliyun.com/mirror/NPM</a></p></blockquote><p>Nodejs npm/cnpm 方面可能最好用的国内源。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>考虑镜像源的选择大致主要为 3 方面：</p><ul><li>覆盖的软件数量</li><li>访问速度，从各地、各宽带运营商的访问速度</li><li>帮助文件</li></ul><p>总体来说，首推清华源，在覆盖软件数量和帮助文件方面堪称国内最好的镜像站。</p><p>访问速度方面，大型商业公司、尤其是云服务商（没错，指的是腾讯源、阿里源和华为源）的镜像站会做得更好，毕竟钱多、基础设施广。</p><p>在细分领域方面，特定领域有固有的特定选择。例如 Nodejs npm 的话淘宝的 cnpm 是不二的选择。又例如，Anaconda 由于授权原因，似乎只有清华源在内的几个大学的镜像站拿到了授权，腾讯、阿里等商业公司的镜像站不知道是没拿到授权还是懒得申请授权，并未上线 Anaconda 镜像。</p><h2 id="Ubuntu20-apt-源"><a href="#Ubuntu20-apt-源" class="headerlink" title="Ubuntu20 apt 源"></a>Ubuntu20 apt 源</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 备份原文件</span><span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.copy<span class="token function">sudo</span> <span class="token function">cat</span> <span class="token operator">></span> /etc/apt/sources.list <span class="token operator">&lt;&lt;</span><span class="token string">EOF # ubuntu 20.10# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-security main restricted universe multiverse# 预发布软件源，不建议启用# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-proposed main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ groovy-proposed main restricted universe multiverseEOF</span><span class="token comment"># 更新源</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update</code></pre></div><p>apt-get 命令适用于 deb 包管理式的 Linux 操作系统（Debian、Ubuntu等），主要用于自动从互联网软件仓库中搜索、下载、安装、升级、卸载软件或操作系统。</p><p>Ubuntu 软件包查找: <a href="https://links.jianshu.com/go?to=https://packages.ubuntu.com/">https://packages.ubuntu.com/</a></p><h3 id="1-安装-软件包"><a href="#1-安装-软件包" class="headerlink" title="1. 安装 软件包"></a>1. 安装 软件包</h3><p>apt-get install PackageName                    // 普通安装<br> apt-get install PackageName=VersionName     // 安装指定包的指定版本<br> apt-get –reinstall install PackageName     // 重新安装</p><p>apt-get build-dep PackageName               // 安装源码包所需要的编译环境<br> apt-get -f install                                        // 修复依赖关系</p><p>apt-get source PackageName                  // 下载软件包的源码</p><h3 id="2-卸载-软件包"><a href="#2-卸载-软件包" class="headerlink" title="2. 卸载 软件包"></a>2. 卸载 软件包</h3><p>apt-get remove PackageName              // 删除软件包, 保留配置文件</p><p>apt-get –purge remove PackageName      // 删除软件包, 同时删除配置文件<br> apt-get purge PackageName               // 删除软件包, 同时删除配置文件</p><p>apt-get autoremove PackageName          // 删除软件包, 同时删除为满足依赖<br> // 而自动安装且不再使用的软件包</p><p>apt-get –purge autoremove PackageName  // 删除软件包, 删除配置文件,<br> // 删除不再使用的依赖包</p><p>apt-get clean &amp;&amp; apt-get autoclean      // 清除 已下载的软件包 和 旧软件包</p><h3 id="3-更新-软件包"><a href="#3-更新-软件包" class="headerlink" title="3. 更新 软件包"></a>3. 更新 软件包</h3><p>apt-get update                               // 更新安装源（Source）<br> apt-get upgrade                             // 更新已安装的软件包<br> apt-get dist-upgrade                      // 更新已安装的软件包（识别并处理依赖关系的改变）</p><h3 id="4-查询-软件包"><a href="#4-查询-软件包" class="headerlink" title="4. 查询 软件包"></a>4. 查询 软件包</h3><p>dpkg -l                                                  // 列出已安装的所有软件包</p><p>apt-cache search PackageName         // 搜索软件包<br> apt-cache show PackageName            // 获取软件包的相关信息, 如说明、大小、版本等</p><p>apt-cache depends PackageName       // 查看该软件包需要哪些依赖包<br> apt-cache rdepends PackageName      // 查看该软件包被哪些包依赖<br> apt-get check                                         // 检查是否有损坏的依赖</p><h3 id="5-apt-get-–help"><a href="#5-apt-get-–help" class="headerlink" title="5. apt-get –help"></a>5. apt-get –help</h3><p>执行命令: apt-get –help，输出:</p><p>apt 1.0.1ubuntu2，用于 amd64 构架，编译于 Dec  8 2016 16:23:38<br> 用法： apt-get [选项] 命令<br> 　　 apt-get [选项] install|remove 软件包1 [软件包2 …]<br> 　　 apt-get [选项] source 软件包1 [软件包2 …]</p><p>apt-get 是一个用于下载和安装软件包的简易命令行界面。<br> 最常用命令是 update 和 install。</p><h3 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h3><p>update - 取回更新的软件包列表信息<br> upgrade - 进行一次升级<br> install - 安装新的软件包(注：软件包名称是 libc6 而非 libc6.deb)<br> remove - 卸载软件包<br> autoremove - 卸载所有自动安装且不再使用的软件包<br> purge - 卸载并清除软件包的配置<br> source - 下载源码包文件<br> build-dep - 为源码包配置所需的编译依赖关系<br> dist-upgrade - 发布版升级，见 apt-get(8)<br> dselect-upgrade - 根据 dselect 的选择来进行升级<br> clean - 删除所有已下载的包文件<br> autoclean - 删除已下载的旧包文件<br> check - 核对以确认系统的依赖关系的完整性<br> changelog - 下载指定软件包，并显示其changelog<br> download - 下载指定的二进制包到当前目录</p><h3 id="选项："><a href="#选项：" class="headerlink" title="选项："></a>选项：</h3><p>-h  本帮助文档。<br> -q  让输出可作为日志 - 不显示进度<br> -qq 除了错误外，什么都不输出<br> -d  仅仅下载 - 【不】安装或解开包文件<br> -s  不作实际操作。只是依次模拟执行命令<br> -y  对所有询问都回答是(Yes)，同时不作任何提示<br> -f  当出现破损的依赖关系时，程序将尝试修正系统<br> -m  当有包文件无法找到时，程序仍尝试继续执行<br> -u  显示已升级的软件包列表<br> -b  在下载完源码包后，编译生成相应的软件包<br> -V  显示详尽的版本号<br> -c=? 读取指定配置文件<br> -o=? 设置任意指定的配置选项，例如 -o dir::cache=/tmp<br> 请查阅 apt-get(8)、sources.list(5) 和 apt.conf(5)的参考手册<br> 以获取更多信息和选项。</p><h2 id="Centos7-yum-源"><a href="#Centos7-yum-源" class="headerlink" title="Centos7 yum 源"></a>Centos7 yum 源</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">CentOS <span class="token number">8</span><span class="token function">sudo</span> <span class="token function">sed</span> -e <span class="token string">'s|^mirrorlist=|#mirrorlist=|g'</span> <span class="token punctuation">\</span>         -e <span class="token string">'s|^#baseurl=http://mirror.centos.org/<span class="token variable">$contentdir</span>|baseurl=https://mirrors.ustc.edu.cn/centos|g'</span> <span class="token punctuation">\</span>         -i.bak <span class="token punctuation">\</span>         /etc/yum.repos.d/CentOS-Base.repo <span class="token punctuation">\</span>         /etc/yum.repos.d/CentOS-Extras.repo <span class="token punctuation">\</span>         /etc/yum.repos.d/CentOS-AppStream.repoCentOS <span class="token number">6</span>   <span class="token operator">&amp;</span>   CentOS <span class="token number">7</span><span class="token function">sudo</span> <span class="token function">sed</span> -e <span class="token string">'s|^mirrorlist=|#mirrorlist=|g'</span> <span class="token punctuation">\</span>         -e <span class="token string">'s|^#baseurl=http://mirror.centos.org/centos|baseurl=https://mirrors.ustc.edu.cn/centos|g'</span> <span class="token punctuation">\</span>         -i.bak <span class="token punctuation">\</span>         /etc/yum.repos.d/CentOS-Base.repo更新缓存yum makecache</code></pre></div><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#备份</span><span class="token function">sudo</span> <span class="token function">cp</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak<span class="token comment"># 注意名字</span><span class="token function">sudo</span> <span class="token function">cat</span> <span class="token operator">></span> /etc/yum.repos.d/CentOS-Base.repo <span class="token operator">&lt;&lt;</span><span class="token string">EOF #https://mirrors.tuna.tsinghua.edu.cn/help/centos/# CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client.  You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist= does not work for you, as a fall back you can try the# remarked out baseurl= line instead.##[base]name=CentOS-<span class="token variable">$releasever</span> - Basebaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/<span class="token variable">$releasever</span>/os/<span class="token variable">$basearch</span>/#mirrorlist=http://mirrorlist.centos.org/?release=<span class="token variable">$releasever</span>&amp;arch=<span class="token variable">$basearch</span>&amp;repo=osenabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-7#released updates[updates]name=CentOS-<span class="token variable">$releasever</span> - Updatesbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/<span class="token variable">$releasever</span>/updates/<span class="token variable">$basearch</span>/#mirrorlist=http://mirrorlist.centos.org/?release=<span class="token variable">$releasever</span>&amp;arch=<span class="token variable">$basearch</span>&amp;repo=updatesenabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-7#additional packages that may be useful[extras]name=CentOS-<span class="token variable">$releasever</span> - Extrasbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/<span class="token variable">$releasever</span>/extras/<span class="token variable">$basearch</span>/#mirrorlist=http://mirrorlist.centos.org/?release=<span class="token variable">$releasever</span>&amp;arch=<span class="token variable">$basearch</span>&amp;repo=extrasenabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-7#additional packages that extend functionality of existing packages[centosplus]name=CentOS-<span class="token variable">$releasever</span> - Plusbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/<span class="token variable">$releasever</span>/centosplus/<span class="token variable">$basearch</span>/#mirrorlist=http://mirrorlist.centos.org/?release=<span class="token variable">$releasever</span>&amp;arch=<span class="token variable">$basearch</span>&amp;repo=centosplusgpgcheck=1enabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-7EOF</span></code></pre></div><h2 id="Centos8-yum-源"><a href="#Centos8-yum-源" class="headerlink" title="Centos8 yum 源"></a>Centos8 yum 源</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#备份</span><span class="token function">sudo</span> <span class="token function">cp</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak<span class="token comment">#  注意名字</span><span class="token function">sudo</span> <span class="token function">cat</span> <span class="token operator">></span> /etc/yum.repos.d/CentOS-Base.repo <span class="token operator">&lt;&lt;</span><span class="token string">EOF # CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client.  You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist= does not work for you, as a fall back you can try the # remarked out baseurl= line instead.## [base]name=CentOS-<span class="token variable">$releasever</span> - Base - mirrors.aliyun.comfailovermethod=prioritybaseurl=https://mirrors.aliyun.com/centos/<span class="token variable">$releasever</span>/BaseOS/<span class="token variable">$basearch</span>/os/        http://mirrors.aliyuncs.com/centos/<span class="token variable">$releasever</span>/BaseOS/<span class="token variable">$basearch</span>/os/        http://mirrors.cloud.aliyuncs.com/centos/<span class="token variable">$releasever</span>/BaseOS/<span class="token variable">$basearch</span>/os/gpgcheck=1gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official #additional packages that may be useful[extras]name=CentOS-<span class="token variable">$releasever</span> - Extras - mirrors.aliyun.comfailovermethod=prioritybaseurl=https://mirrors.aliyun.com/centos/<span class="token variable">$releasever</span>/extras/<span class="token variable">$basearch</span>/os/        http://mirrors.aliyuncs.com/centos/<span class="token variable">$releasever</span>/extras/<span class="token variable">$basearch</span>/os/        http://mirrors.cloud.aliyuncs.com/centos/<span class="token variable">$releasever</span>/extras/<span class="token variable">$basearch</span>/os/gpgcheck=1gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official #additional packages that extend functionality of existing packages[centosplus]name=CentOS-<span class="token variable">$releasever</span> - Plus - mirrors.aliyun.comfailovermethod=prioritybaseurl=https://mirrors.aliyun.com/centos/<span class="token variable">$releasever</span>/centosplus/<span class="token variable">$basearch</span>/os/        http://mirrors.aliyuncs.com/centos/<span class="token variable">$releasever</span>/centosplus/<span class="token variable">$basearch</span>/os/        http://mirrors.cloud.aliyuncs.com/centos/<span class="token variable">$releasever</span>/centosplus/<span class="token variable">$basearch</span>/os/gpgcheck=1enabled=0gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official [PowerTools]name=CentOS-<span class="token variable">$releasever</span> - PowerTools - mirrors.aliyun.comfailovermethod=prioritybaseurl=https://mirrors.aliyun.com/centos/<span class="token variable">$releasever</span>/PowerTools/<span class="token variable">$basearch</span>/os/        http://mirrors.aliyuncs.com/centos/<span class="token variable">$releasever</span>/PowerTools/<span class="token variable">$basearch</span>/os/        http://mirrors.cloud.aliyuncs.com/centos/<span class="token variable">$releasever</span>/PowerTools/<span class="token variable">$basearch</span>/os/gpgcheck=1enabled=0gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official[AppStream]name=CentOS-<span class="token variable">$releasever</span> - AppStream - mirrors.aliyun.comfailovermethod=prioritybaseurl=https://mirrors.aliyun.com/centos/<span class="token variable">$releasever</span>/AppStream/<span class="token variable">$basearch</span>/os/        http://mirrors.aliyuncs.com/centos/<span class="token variable">$releasever</span>/AppStream/<span class="token variable">$basearch</span>/os/        http://mirrors.cloud.aliyuncs.com/centos/<span class="token variable">$releasever</span>/AppStream/<span class="token variable">$basearch</span>/os/gpgcheck=1gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-OfficialEOF</span></code></pre></div><h3 id="yum简介"><a href="#yum简介" class="headerlink" title="yum简介"></a>yum简介</h3><blockquote><p>对于熟悉Centos的小伙伴都应该很熟悉。</p></blockquote><ul><li>Yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/Shell">Shell</a>前端软件包管理器。基于<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/RPM">RPM</a>包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。—<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/yum/2835771?fr=aladdin">百度百科</a></li></ul><h3 id="命令解析"><a href="#命令解析" class="headerlink" title="命令解析"></a>命令解析</h3><ul><li>格式</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token punctuation">[</span>command<span class="token punctuation">]</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> -y<span class="token operator">|</span>q</code></pre></div><blockquote><p>options</p></blockquote><ul><li>install</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装nginx软件包</span>yum <span class="token function">install</span> nginx</code></pre></div><ul><li>search</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#  搜索软件包</span>yum search nginx</code></pre></div><ul><li>list</li></ul><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment"># 显示指定安装包安装软件详情</span>yum <span class="token keyword">list</span> nginx<span class="token comment"># 显示所有已安装以及可以安装的软件包</span>yum <span class="token keyword">list</span><span class="token comment"># 显示所有软件包</span>yum <span class="token keyword">list</span> all</code></pre></div><ul><li>remove</li></ul><div class="code-wrapper"><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property"># 移除软件包</span>yum <span class="token keyword">remove</span> nginx</code></pre></div><ul><li>earse</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 移除软件包</span>yum earse nginx</code></pre></div><ul><li>update</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 升级软件包</span>yum update nginx</code></pre></div><ul><li>check-update</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查可以更新的软件</span>yum check-update</code></pre></div><ul><li>info</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示安装包信息</span>yum info nginx</code></pre></div><ul><li>provides</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出软件包提供哪些文件</span>yum provides<span class="token comment"># 列出哪些软件包提供nginx</span>yum provides */nginx</code></pre></div><ul><li>grouplist</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出可以用groupinstall安装的组</span>yum grouplist</code></pre></div><ul><li>groupInstall</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装中文组支持</span>yum groupinstall <span class="token string">"Chinese Support"</span></code></pre></div><ul><li>groupremove</li></ul><div class="code-wrapper"><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property"># 移除中文组支持</span>yum <span class="token keyword">group</span> <span class="token keyword">remove</span> <span class="token string">"Chinese Support"</span></code></pre></div><ul><li>deposit</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">* 查看nginx依赖yum deplist nginx</code></pre></div><ul><li>clear</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清除缓存目录下的软件包</span>yum <span class="token function">clear</span> nginx<span class="token comment"># 清除缓存目录下的header</span>yum clean header<span class="token comment"># 清除所有的缓存</span>yum clean all</code></pre></div><ul><li>repolist</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看软件仓库</span>yum repolist</code></pre></div><hr><h3 id="搭建yum仓库"><a href="#搭建yum仓库" class="headerlink" title="搭建yum仓库"></a>搭建yum仓库</h3><blockquote><p>关于yum仓库</p></blockquote><ul><li><p>所在位置</p><p><img src="https://upload-images.jianshu.io/upload_images/7819706-1f04b1f7b48a726a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/639/format/webp" alt="img"></p><p>仓库所在位置</p></li></ul><div class="code-wrapper"><pre class="language-ruby" data-language="ruby"><code class="language-ruby"><span class="token punctuation">[</span>base<span class="token punctuation">]</span>name<span class="token operator">=</span><span class="token constant">CentOS</span><span class="token operator">-</span><span class="token variable">$releasever</span> <span class="token operator">-</span> <span class="token constant">Base</span>mirrorlist<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrorlist<span class="token punctuation">.</span>centos<span class="token punctuation">.</span>org<span class="token operator">/</span><span class="token operator">?</span>release<span class="token operator">=</span><span class="token variable">$releasever</span><span class="token operator">&amp;</span>arch<span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span>repo<span class="token operator">=</span>os<span class="token operator">&amp;</span>infra<span class="token operator">=</span><span class="token variable">$infra</span><span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span>gpgcheck<span class="token operator">=</span><span class="token number">1</span>gpgkey<span class="token operator">=</span>file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>etc<span class="token operator">/</span>pki<span class="token operator">/</span>rpm<span class="token operator">-</span>gpg<span class="token operator">/</span><span class="token constant">RPM</span><span class="token operator">-</span><span class="token constant">GPG</span><span class="token operator">-</span><span class="token constant">KEY</span><span class="token operator">-</span><span class="token constant">CentOS</span><span class="token operator">-</span><span class="token number">7</span></code></pre></div><blockquote><p>本地yum仓库</p></blockquote><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载对应的镜像文件</span><span class="token comment"># 挂载到/mnt</span><span class="token function">mount</span> -o loop /dev/cdrom /mnt <span class="token comment">#光盘 </span><span class="token function">mount</span> -o loop -t iso9660 /home/sunky/mydisk.iso /mnt/vcdrom  <span class="token comment">#ios镜像文件</span><span class="token comment"># 创建文件</span><span class="token function">vim</span> /etc/yum.repo.d test.repo<span class="token punctuation">[</span>test<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"test"</span><span class="token assign-left variable">baseurl</span><span class="token operator">=</span><span class="token string">"file:///mnt"</span><span class="token assign-left variable">enable</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span></code></pre></div><blockquote><p>远端http仓库</p></blockquote><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">和上雷同，略</code></pre></div><blockquote><p>远端ftp仓库</p></blockquote><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">和上雷同，略</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>apt-get</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux user group</title>
    <link href="/2020/12/25/linux%20user%20group/"/>
    <url>/2020/12/25/linux%20user%20group/</url>
    
    <content type="html"><![CDATA[<h1 id="1-用户组操作"><a href="#1-用户组操作" class="headerlink" title="1 用户组操作"></a>1 用户组操作</h1><p>创建<code>admin</code>用户组，指定组编号，命令如下：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupadd</span> -g <span class="token number">777</span> admin</code></pre></div><p><img src="https://img-blog.csdnimg.cn/20200623220944164.png" alt="在这里插入图片描述"></p><blockquote><p>其他用户组相关命令：</p><ul><li>删除xxx用户组：<code>groupdel xxx</code></li><li>修改用户组groupb名称为groupa：<code>groupmod -n groupa groupb</code></li></ul></blockquote><h1 id="2-用户操作"><a href="#2-用户操作" class="headerlink" title="2 用户操作"></a>2 用户操作</h1><h2 id="2-1-创建用户"><a href="#2-1-创建用户" class="headerlink" title="2.1 创建用户"></a>2.1 创建用户</h2><p>创建<code>crane</code>用户，并归属到<code>admin</code>用户组中</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -g admin crane</code></pre></div><p><img src="https://img-blog.csdnimg.cn/2020062322143654.png" alt="在这里插入图片描述"></p><h2 id="2-2-修改用户密码"><a href="#2-2-修改用户密码" class="headerlink" title="2.2 修改用户密码"></a>2.2 修改用户密码</h2><p>修改用户<code>crane</code>的密码</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> crane</code></pre></div><p><img src="https://img-blog.csdnimg.cn/20200623221658719.png" alt="在这里插入图片描述"></p><h2 id="2-3-用户权限"><a href="#2-3-用户权限" class="headerlink" title="2.3 用户权限"></a>2.3 用户权限</h2><p>为用户<code>crane</code>添加<code>sudo</code>权限：<br>使用<code>root</code>用户执行<code>visudo</code>命令，编辑文件，添加一行<code>crane</code>相关的信息，如下图</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">visudo</code></pre></div><p><img src="https://img-blog.csdnimg.cn/20200623222751147.png" alt="在这里插入图片描述"></p><h2 id="2-4-切换用户"><a href="#2-4-切换用户" class="headerlink" title="2.4 切换用户"></a>2.4 切换用户</h2><p>切换用户到<code>crane</code></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> crane</code></pre></div><p><img src="https://img-blog.csdnimg.cn/20200623221911376.png" alt="在这里插入图片描述"></p><h2 id="用户更改-usermod"><a href="#用户更改-usermod" class="headerlink" title="用户更改 usermod"></a>用户更改 usermod</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">usermod [-LU][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-l &lt;帐号名称&gt;][-s &lt;shell&gt;][-u &lt;uid&gt;][用户帐号]**参数说明**：- -c&lt;备注&gt; 　修改用户帐号的备注文字。- -d登入目录&gt; 　修改用户登入时的目录。- -e&lt;有效期限&gt; 　修改帐号的有效期限。- -f&lt;缓冲天数&gt; 　修改在密码过期后多少天即关闭该帐号。- -g&lt;群组&gt; 　修改用户所属的群组。- -G&lt;群组&gt; 　修改用户所属的附加群组。- -l&lt;帐号名称&gt; 　修改用户帐号名称。- -L 　锁定用户密码，使密码无效。- -s&lt;shell&gt; 　修改用户登入后所使用的shell。- -u&lt;uid&gt; 　修改用户ID。- -U 　解除密码锁定。</code></pre></div><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>更改登录目录</p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># usermod -d &#x2F;home&#x2F;hnlinux root</code></pre></div><p>改变用户的uid</p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># usermod -u 777 root</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux automount</title>
    <link href="/2020/12/24/linux%20auto%20mount/"/>
    <url>/2020/12/24/linux%20auto%20mount/</url>
    
    <content type="html"><![CDATA[<h3 id="一、-etc-fstab文件的作用"><a href="#一、-etc-fstab文件的作用" class="headerlink" title="一、/etc/fstab文件的作用"></a>一、/etc/fstab文件的作用</h3><p>　　磁盘被手动挂载之后都必须把挂载信息写入/etc/fstab这个文件中，否则下次开机启动时仍然需要重新挂载。<br>　　系统开机时会主动读取/etc/fstab这个文件中的内容，根据文件里面的配置挂载磁盘。这样我们只需要将磁盘的挂载信息写入这个文件中我们就不需要每次开机启动之后手动进行挂载了。</p><h3 id="二、挂载的限制"><a href="#二、挂载的限制" class="headerlink" title="二、挂载的限制"></a>二、挂载的限制</h3><p>　　在说明这个文件的作用之前我想先强调一下挂载的限制。<br>　　1. 根目录是必须挂载的，而且一定要先于其他mount point被挂载。因为mount是所有目录的跟目录，其他木有都是由根目录 /衍生出来的。<br>　　2. 挂载点必须是已经存在的目录。<br>　　3. 挂载点的指定可以任意，但必须遵守必要的系统目录架构原则<br>　　4. 所有挂载点在同一时间只能被挂载一次<br>　　5. 所有分区在同一时间只能挂在一次<br>　　6. 若进行卸载，必须将工作目录退出挂载点（及其子目录）之外。</p><h3 id="三、-etc-fstab文件中的参数"><a href="#三、-etc-fstab文件中的参数" class="headerlink" title="三、/etc/fstab文件中的参数"></a>三、/etc/fstab文件中的参数</h3><p>　　查看/etc/fstab文件。</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /etc/fstab </span></code></pre></div><p>　　这是我的linux环境中/etc/fstab文件中的内容</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/fstab: static file system information.</span><span class="token comment">#</span><span class="token comment"># Use 'blkid' to print the universally unique identifier for a</span><span class="token comment"># device; this may be used with UUID= as a more robust way to name devices</span><span class="token comment"># that works even if disks are added and removed. See fstab(5).</span><span class="token comment">#</span><span class="token comment"># &lt;file system> &lt;mount point>   &lt;type>  &lt;options>       &lt;dump>  &lt;pass></span><span class="token comment"># / was on /dev/sda1 during installation</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>2095f3a3-960c-466d-92fe-3f3be1dc0fd3 /               ext4    <span class="token assign-left variable">errors</span><span class="token operator">=</span>remount-ro <span class="token number">0</span>       <span class="token number">1</span><span class="token comment"># swap was on /dev/sda5 during installation</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span>3d0e5364-4082-4644-92a9-6d4afa28d143 none            swap    sw              <span class="token number">0</span>       <span class="token number">0</span></code></pre></div><p>　　在文件中我已经把每一列都做出来表示方便识别，我们可以看到一共有六列。</p><h5 id="第一列：Device：磁盘设备文件或者该设备的Label或者UUID"><a href="#第一列：Device：磁盘设备文件或者该设备的Label或者UUID" class="headerlink" title="第一列：Device：磁盘设备文件或者该设备的Label或者UUID"></a>第一列：Device：磁盘设备文件或者该设备的Label或者UUID</h5><p>　　1）查看分区的label和uuid<br>　　Label就是分区的标签，在最初安装系统时填写的挂载点就是标签的名字。可以通过查看一个分区的superblock中的信息找到UUID和Label name。<br>　　例如:我们要查看/dev/sda1这个设备的uuid和label name</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dumpe2fs -h /dev/sda11</span>dumpe2fs <span class="token number">1.42</span>.13 <span class="token punctuation">(</span><span class="token number">17</span>-May-2015<span class="token punctuation">)</span>Filesystem volume name:   <span class="token operator">&lt;</span>none<span class="token operator">></span>  //Label nameLast mounted on:          /Filesystem UUID:          2095f3a3-960c-466d-92fe-3f3be1dc0fd3 //UUIDFilesystem magic number:  0xEF53Filesystem revision <span class="token comment">#:    1 (dynamic)</span>Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery extent flex_bg sparse_super large_file huge_file uninit_bg dir_nlink extra_isizeFilesystem flags:         signed_directory_hash Default <span class="token function">mount</span> options:    user_xattr aclFilesystem state:         clean<span class="token punctuation">..</span>.</code></pre></div><p>　　简单点的方式我们可以通过命令blkid来查看</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># blkid</span>/dev/sda1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"2095f3a3-960c-466d-92fe-3f3be1dc0fd3"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"ext4"</span> <span class="token assign-left variable">PARTUUID</span><span class="token operator">=</span><span class="token string">"8c98aa8e-01"</span>/dev/sda5: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"3d0e5364-4082-4644-92a9-6d4afa28d143"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"swap"</span> <span class="token assign-left variable">PARTUUID</span><span class="token operator">=</span><span class="token string">"8c98aa8e-05"</span>/dev/sdb1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"a37f9605-44ee-4fbd-9943-69fd47928f87"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"ext4"</span> <span class="token assign-left variable">PARTUUID</span><span class="token operator">=</span><span class="token string">"d86506b9-01"</span>/dev/sdc1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"00dbb3ac-c544-402b-98e1-f15d93a7bb53"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"ext4"</span> <span class="token assign-left variable">PARTUUID</span><span class="token operator">=</span><span class="token string">"79e762ca-01"</span></code></pre></div><p>　　2）使用设备名和label及uuid作为标识的不同<br>　　<strong>使用设备名称（/dev/sda)来挂载分区时是被固定死的，一旦磁盘的插槽顺序发生了变化，就会出现名称不对应的问题。因为这个名称是会改变的。</strong><br>　　<strong>不过使用label挂载就不用担心插槽顺序方面的问题。不过要随时注意你的Label name。至于UUID，每个分区被格式化以后都会有一个UUID作为唯一的标识号。使用uuid挂载的话就不用担心会发生错乱的问题了。</strong></p><h5 id="第二列：Mount-point：设备的挂载点，就是你要挂载到哪个目录下。"><a href="#第二列：Mount-point：设备的挂载点，就是你要挂载到哪个目录下。" class="headerlink" title="第二列：Mount point：设备的挂载点，就是你要挂载到哪个目录下。"></a>第二列：Mount point：设备的挂载点，就是你要挂载到哪个目录下。</h5><h5 id="第三列：filesystem：磁盘文件系统的格式，包括ext2、ext3、reiserfs、nfs、vfat等"><a href="#第三列：filesystem：磁盘文件系统的格式，包括ext2、ext3、reiserfs、nfs、vfat等" class="headerlink" title="第三列：filesystem：磁盘文件系统的格式，包括ext2、ext3、reiserfs、nfs、vfat等"></a>第三列：filesystem：磁盘文件系统的格式，包括ext2、ext3、reiserfs、nfs、vfat等</h5><h5 id="第四列：parameters：文件系统的参数"><a href="#第四列：parameters：文件系统的参数" class="headerlink" title="第四列：parameters：文件系统的参数"></a>第四列：parameters：文件系统的参数</h5><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Async/sync</td><td>设置是否为同步方式运行，默认为async</td></tr><tr><td>auto/noauto</td><td>当下载mount -a 的命令时，此文件系统是否被主动挂载。默认为auto</td></tr><tr><td>rw/ro</td><td>是否以以只读或者读写模式挂载</td></tr><tr><td>exec/noexec</td><td>限制此文件系统内是否能够进行”执行”的操作</td></tr><tr><td>user/nouser</td><td>是否允许用户使用mount命令挂载</td></tr><tr><td>suid/nosuid</td><td>是否允许SUID的存在</td></tr><tr><td>Usrquota</td><td>启动文件系统支持磁盘配额模式</td></tr><tr><td>Grpquota</td><td>启动文件系统对群组磁盘配额模式的支持</td></tr><tr><td>Defaults</td><td>同时具有rw,suid,dev,exec,auto,nouser,async等默认参数的设置</td></tr></tbody></table><h5 id="第五列：能否被dump备份命令作用：dump是一个用来作为备份的命令。通常这个参数的值为0或者1"><a href="#第五列：能否被dump备份命令作用：dump是一个用来作为备份的命令。通常这个参数的值为0或者1" class="headerlink" title="第五列：能否被dump备份命令作用：dump是一个用来作为备份的命令。通常这个参数的值为0或者1"></a>第五列：能否被dump备份命令作用：dump是一个用来作为备份的命令。通常这个参数的值为0或者1</h5><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>代表不要做dump备份</td></tr><tr><td>1</td><td>代表要每天进行dump的操作</td></tr><tr><td>2</td><td>代表不定日期的进行dump操作</td></tr></tbody></table><h5 id="第六列：是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整（clean）。"><a href="#第六列：是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整（clean）。" class="headerlink" title="第六列：是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整（clean）。"></a>第六列：是否检验扇区：开机的过程中，系统默认会以fsck检验我们系统是否为完整（clean）。</h5><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>不要检验</td></tr><tr><td>1</td><td>最早检验（一般根目录会选择）</td></tr><tr><td>2</td><td>1级别检验完成之后进行检验</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux crontabs</title>
    <link href="/2020/12/24/linux%20crontabs/"/>
    <url>/2020/12/24/linux%20crontabs/</url>
    
    <content type="html"><![CDATA[<h2 id="格式说明与范例"><a href="#格式说明与范例" class="headerlink" title="格式说明与范例"></a>格式说明与范例</h2><p><img src="https://images2015.cnblogs.com/blog/513841/201608/513841-20160812102124078-171184924.png" alt="img"></p><ul><li><ul><li><ul><li><ul><li><ul><li>   command</li></ul></li></ul></li></ul></li></ul></li></ul><p>分　 时　  日　 月     周　     命令</p> <div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">第1列表示分钟1～59 每分钟用*或者 */1表示第2列表示小时1～23（0表示0点）第3列表示日期1～31第4列表示月份1～12第5列标识号星期0～6（0表示星期天）第6列要运行的命令</code></pre></div><p>在以上各个字段中，还可以使用以下特殊字符：</p><p>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</p><p>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</p><p>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</p><p>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">安装crontab：yum <span class="token function">install</span> crontabs <span class="token operator">||</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">crontab</span>服务操作说明：/sbin/service crond start //启动服务/sbin/service crond stop //关闭服务/sbin/service crond restart //重启服务/sbin/service crond reload //重新载入配置查看crontab服务状态：<span class="token function">service</span> crond status手动启动crontab服务：<span class="token function">service</span> crond start查看crontab服务是否已设置为开机启动，执行命令：ntsysv加入开机自动启动：<span class="token function">chkconfig</span> –level <span class="token number">35</span> crond on基础命令：-e 表示编辑当前的crontab-l 表示列表显示当前的crontab任务-r 表示删除当前用户的crontab-i 表示删除crontab时给予提示信息</code></pre></div><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">Cron表达式范例：             每隔5秒执行一次：*/5 * * * * ?              每隔1分钟执行一次：0 */1 * * * ?              每天23点执行一次：0 <span class="token number">0</span> <span class="token number">23</span> * * ?              每天凌晨1点执行一次：0 <span class="token number">0</span> <span class="token number">1</span> * * ?              每月1号凌晨1点执行一次：0 <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> * ?              每月最后一天23点执行一次：0 <span class="token number">0</span> <span class="token number">23</span> L * ?              每周星期天凌晨1点实行一次：0 <span class="token number">0</span> <span class="token number">1</span> ? * L<span class="token number">1</span>、每天6:00执行 <span class="token number">0</span> <span class="token number">6</span> * * * root /home/mvp/osyunwei.sh <span class="token number">2</span>、每周六凌晨4:00执行 <span class="token number">0</span> <span class="token number">4</span> * * <span class="token number">6</span> root /home/mvp/osyunwei.sh <span class="token number">3</span>、每周六凌晨4:05执行 <span class="token number">5</span> <span class="token number">4</span> * * <span class="token number">6</span> root /home/mvp/osyunwei.sh  <span class="token number">4</span>、每周六凌晨4:15执行 <span class="token number">15</span> <span class="token number">4</span> * * <span class="token number">6</span> root /home/mvp/osyunwei.sh <span class="token number">5</span>、每周六凌晨4:25执行 <span class="token number">25</span> <span class="token number">4</span> * * <span class="token number">6</span> root /home/mvp/osyunwei.sh <span class="token number">6</span>、每周六凌晨4:35执行 <span class="token number">35</span> <span class="token number">4</span> * * <span class="token number">6</span> root /home/mvp/osyunwei.sh <span class="token number">7</span>、每周六凌晨5:00执行 <span class="token number">5</span> * * <span class="token number">6</span> root /home/mvp/osyunwei.sh <span class="token number">8</span>、每天8:40执行 <span class="token number">40</span> <span class="token number">8</span> * * * root /home/mvp/osyunwei.sh <span class="token number">9</span>、每天8:30执行 <span class="token number">30</span> <span class="token number">8</span> * * * root /home/mvp/osyunwei.sh <span class="token number">10</span>、每周一到周五的11:41开始，每隔10分钟执行一次    <span class="token comment">#值得借鉴</span> <span class="token number">41,51</span> <span class="token number">11</span> * * <span class="token number">1</span>-5   root /home/mvp/osyunwei.sh 或者 <span class="token number">1</span>-59/10 <span class="token number">12</span>-23 * * <span class="token number">1</span>-5   root /home/mvp/osyunwei.sh <span class="token number">11</span>、在每天的10:31开始，每隔2小时重复一次 <span class="token number">31</span> <span class="token number">10</span>-23/2 * * * root   /home/mvp/osyunwei.sh <span class="token number">12</span>、每天15:00执行 <span class="token number">0</span> <span class="token number">15</span> * * *  root /home/mvp/osyunwei.sh <span class="token number">13</span>、每天的10:30开始，每隔2小时重复一次 <span class="token number">30</span> <span class="token number">10</span>-23/2 * * * root  /home/mvp/osyunwei.sh <span class="token number">14</span>、每天15:30执行 <span class="token number">30</span> <span class="token number">15</span> * * *  root /home/mvp/osyunwei.sh <span class="token number">15</span>、每天17:50执行 <span class="token number">50</span> <span class="token number">17</span> * * *  root /home/mvp/osyunwei.sh <span class="token number">16</span>、每天8:00执行 <span class="token number">0</span> <span class="token number">8</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">17</span>、每天18:00执行 <span class="token number">0</span> <span class="token number">18</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">18</span>、每天8:30执行 <span class="token number">30</span> <span class="token number">8</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">19</span>、每天20:30 <span class="token number">30</span> <span class="token number">20</span> * * *  root /home/mvp/osyunwei.sh <span class="token number">20</span>、每周一到周五2:00 <span class="token number">0</span> <span class="token number">2</span> * * <span class="token number">1</span>-5 root /home/mvp/osyunwei.sh <span class="token number">21</span>、每周一到周五9:30 <span class="token number">30</span> <span class="token number">9</span> * * <span class="token number">1</span>-5 root /home/mvp/osyunwei.sh <span class="token number">22</span>、每周一到周五8:00，每周一到周五9:00 <span class="token number">0</span> <span class="token number">8,9</span> * * <span class="token number">1</span>-5  root /home/mvp/osyunwei.sh <span class="token number">23</span>、每天23:59 <span class="token number">59</span> <span class="token number">23</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">24</span>、每周六23:59 <span class="token number">59</span> <span class="token number">23</span> * * <span class="token number">6</span>  root    /home/mvp/osyunwei.sh <span class="token number">25</span>、每天0:30 <span class="token number">30</span> <span class="token number">0</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">26</span>、每周一到周五9:25到11:35之间、13:00到15:00之间，每隔10分钟运行一次 分区段写值得借鉴 <span class="token number">25,35</span>,45,55  <span class="token number">9</span> * * <span class="token number">1</span>-5  root   /home/mvp/osyunwei.sh <span class="token number">5</span>-59/10  <span class="token number">10</span> * * <span class="token number">1</span>-5  root   /home/mvp/osyunwei.sh <span class="token number">5,15</span>,25,35  <span class="token number">11</span> * * <span class="token number">1</span>-5  root   /home/mvp/osyunwei.sh */10  <span class="token number">13</span>-15 * * <span class="token number">1</span>-5  root   /home/mvp/osyunwei.sh <span class="token number">27</span>、每周一到周五8:30、8:50、9:30、10:00、10:30、11:00、11:30、13:30、14:00、14:30、5:00分别执行一次 <span class="token number">30,50</span> <span class="token number">8</span> * * <span class="token number">1</span>-5  root  /home/mvp/osyunwei.sh <span class="token number">30</span> <span class="token number">9</span> * * <span class="token number">1</span>-5  root  /home/mvp/osyunwei.sh */30 <span class="token number">10</span>-11 * * <span class="token number">1</span>-5  root  /home/mvp/osyunwei.sh <span class="token number">30</span> <span class="token number">13</span> * * <span class="token number">1</span>-5  root  /home/mvp/osyunwei.sh <span class="token number">0,30</span> <span class="token number">14</span>-15 * * <span class="token number">1</span>-5  root  /home/mvp/osyunwei.sh <span class="token number">28</span>、每天23:50执行 <span class="token number">50</span> <span class="token number">23</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">29</span>、每天10:00、16:00执行 <span class="token number">0</span> <span class="token number">10,16</span> * * *  root /home/mvp/osyunwei.sh <span class="token number">30</span>、每天5:30执行 <span class="token number">30</span> <span class="token number">5</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">31</span>、每周一到周五9:30执行 <span class="token number">30</span> <span class="token number">9</span> * * <span class="token number">1</span>-5  root  /home/mvp/osyunwei.sh <span class="token number">32</span>、每周一到周五13:00执行 <span class="token number">0</span> <span class="token number">13</span> * * <span class="token number">1</span>-5  root  /home/mvp/osyunwei.sh <span class="token number">33</span>、每天7:51执行 <span class="token number">51</span> <span class="token number">7</span> * * *  root /home/mvp/osyunwei.sh <span class="token number">34</span>、每天7:53、12:40分别执行一次 <span class="token number">53</span> <span class="token number">7</span> * * *  root /home/mvp/osyunwei.sh <span class="token number">40</span> <span class="token number">12</span> * * *  root /home/mvp/osyunwei.sh <span class="token number">35</span>、每天7:55执行 <span class="token number">55</span> <span class="token number">7</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">36</span>、每天8:10、16:00、20:00分别执行一次 <span class="token number">10</span> <span class="token number">8</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">0</span> <span class="token number">16</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">0</span> <span class="token number">20</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">37</span>、每天7:57、8:00分别执行一次 <span class="token number">57</span> <span class="token number">7</span> * * *  root  /home/mvp/osyunwei.sh <span class="token number">0</span> <span class="token number">8</span> * * *  root  /home/mvp/osyunwei.sh              在26分、29分、33分执行一次：0 <span class="token number">26,29</span>,33 * * * ?              每天的0点、13点、18点、21点都执行一次：0 <span class="token number">0</span> <span class="token number">0,13</span>,18,21 * * ? 实例1：每1分钟执行一次command 命令： * * * * * <span class="token builtin class-name">command</span>   实例2：每小时的第3和第15分钟执行 命令： <span class="token number">3,15</span> * * * * <span class="token builtin class-name">command</span>   实例3：在上午8点到11点的第3和第15分钟执行 命令： <span class="token number">3,15</span> <span class="token number">8</span>-11 * * * <span class="token builtin class-name">command</span>   实例4：每隔两天的上午8点到11点的第3和第15分钟执行 命令： <span class="token number">3,15</span> <span class="token number">8</span>-11 */2 * * <span class="token builtin class-name">command</span>   实例5：每个星期一的上午8点到11点的第3和第15分钟执行 命令： <span class="token number">3,15</span> <span class="token number">8</span>-11 * * <span class="token number">1</span> <span class="token builtin class-name">command</span>   实例6：每晚的21:30重启smb  命令： <span class="token number">30</span> <span class="token number">21</span> * * * /etc/init.d/smb restart   实例7：每月1、10、22日的4 <span class="token builtin class-name">:</span> <span class="token number">45</span>重启smb  命令： <span class="token number">45</span> <span class="token number">4</span> <span class="token number">1,10</span>,22 * * /etc/init.d/smb restart   实例8：每周六、周日的1 <span class="token builtin class-name">:</span> <span class="token number">10</span>重启smb 命令： <span class="token number">10</span> <span class="token number">1</span> * * <span class="token number">6,0</span> /etc/init.d/smb restart   实例9：每天18 <span class="token builtin class-name">:</span> 00至23 <span class="token builtin class-name">:</span> 00之间每隔30分钟重启smb  命令： <span class="token number">0,30</span> <span class="token number">18</span>-23 * * * /etc/init.d/smb restart   实例10：每星期六的晚上11 <span class="token builtin class-name">:</span> 00 pm重启smb  命令： <span class="token number">0</span> <span class="token number">23</span> * * <span class="token number">6</span> /etc/init.d/smb restart   实例11：每一小时重启smb  命令： * */1 * * * /etc/init.d/smb restart   实例12：晚上11点到早上7点之间，每隔一小时重启smb  命令： * <span class="token number">23</span>-7/1 * * * /etc/init.d/smb restart   实例13：每月的4号与每周一到周三的11点重启smb  命令： <span class="token number">0</span> <span class="token number">11</span> <span class="token number">4</span> * mon-wed /etc/init.d/smb restart   实例14：一月一号的4点重启smb  命令： <span class="token number">0</span> <span class="token number">4</span> <span class="token number">1</span> jan * /etc/init.d/smb restart 实例15：每小时执行/etc/cron.hourly目录内的脚本 命令： 01   *   *   *   *     root run-parts /etc/cron.hourly 说明： run-parts这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是目录名了 </code></pre></div><h2 id="三、其他问题"><a href="#三、其他问题" class="headerlink" title="三、其他问题"></a>三、其他问题</h2><h4 id="注意环境变量问题"><a href="#注意环境变量问题" class="headerlink" title="注意环境变量问题"></a>注意环境变量问题</h4><p>有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。</p><p>在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。</p><p>不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：</p><p>1）脚本中涉及文件路径时写全局路径；</p><p>2）脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> start_cbp.sh<span class="token punctuation">\</span>#<span class="token operator">!</span>/bin/sh<span class="token builtin class-name">source</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable">RUN_CONF</span><span class="token operator">=</span>/home/d139/conf/platform/cbp/cbp_jboss.conf/usr/local/jboss-4.0.5/bin/run.sh -c mev <span class="token operator">&amp;</span></code></pre></div><p>3）当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：</p><p>0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh</p><h4 id="注意清理系统用户的邮件日志"><a href="#注意清理系统用户的邮件日志" class="headerlink" title="注意清理系统用户的邮件日志"></a>注意清理系统用户的邮件日志</h4><p>每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。</p><p>例如，可以在crontab文件中设置如下形式，忽略日志输出：</p><p>0 */3 * * * /usr/local/apache2/apachectl restart &gt;/dev/null 2&gt;&amp;1</p><p>“/dev/null 2&gt;&amp;1”表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，这样日志输出问题就解决了。</p><h4 id="系统级任务调度与用户级任务调度"><a href="#系统级任务调度与用户级任务调度" class="headerlink" title="系统级任务调度与用户级任务调度"></a>系统级任务调度与用户级任务调度</h4><p>系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么做），但是反过来却不行，root用户的任务调度操作可以通过“crontab –uroot –e”来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。</p><h4 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h4><p>新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</p><p>当crontab突然失效时，可以尝试/etc/init.d/crond restart解决问题。或者查看日志看某个job有没有执行/报错tail -f /var/log/cron。</p><p>千万别乱运行crontab -r。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p><p>在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。    </p>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux practice</title>
    <link href="/2020/12/24/linux%20practice/"/>
    <url>/2020/12/24/linux%20practice/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment">#！/bin/bash</span><span class="token comment"># 系统安装断开网卡</span><span class="token comment"># 安装vmtools</span><span class="token comment"># 重启打开网卡</span><span class="token comment"># 更换镜像源</span><span class="token function">sudo</span> <span class="token function">cat</span> <span class="token operator">></span> /etc/apt/sources.list <span class="token operator">&lt;&lt;</span><span class="token string">EOF # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse# 预发布软件源，不建议启用# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverseEOF</span><span class="token comment"># 更新源</span><span class="token function">apt-get</span> update<span class="token comment"># 安装vim net-tools lsscsi</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span> net-tools lsscsi -y<span class="token comment"># 添加挂在硬盘 p113</span><span class="token comment"># 首先在虚拟机添加硬盘 使用命令刷新硬盘热拔插</span>partprobe<span class="token comment"># 查看所有插入硬盘</span>lsscsi<span class="token comment"># 选择硬盘创建分区</span><span class="token function">fdisk</span> /dev/sdb1<span class="token comment"># new :新建一个分区 pritn: 打印分区信息 type: 设置分区类型 write: 写入磁盘</span>    <span class="token comment"># 1:设置为第一个分区 1:分区从硬盘第1个柱面开始 +1G:分区大小 </span><span class="token comment"># 格式化分区</span>mkfs.ext4 /dev/sdb1<span class="token comment"># 挂在指定目录</span><span class="token function">mkdir</span> music<span class="token function">mount</span> /dev/sdb1 /music<span class="token comment"># 取消挂载</span><span class="token function">umount</span> /music<span class="token comment"># 修改 /etc/fstab 实现自动挂在</span><span class="token comment"># 首先查看分区的label和uuid</span><span class="token comment"># 简单</span>blkid<span class="token comment"># 复杂</span>dumpe2fs -h /dev/sdb1<span class="token comment"># 　使用设备名称（/dev/sda)来挂载分区时是被固定死的，一旦磁盘的插槽顺序发生了变化，就会出现名称不对应的问题。因为这个名称是会改变的。</span><span class="token comment">#　　不过使用label挂载就不用担心插槽顺序方面的问题。不过要随时注意你的Label name。至于UUID，每个分区被格式化以后都会有一个UUID作为唯一的标识号。使用uuid挂载的话就不用担心会发生错乱的问题了。</span><span class="token comment"># 具体参数见 https://czy1024.github.io/blog/blog/autoMount.html</span><span class="token function">vim</span> /etc/fstab<span class="token builtin class-name">echo</span> <span class="token string">"eg: UUID=2ccac64a-01cc-4fc7-ae85-ad7ea1fca89c /music    ext4   defaults    0     0"</span><span class="token comment"># 重启后 执行 mountpoint  music/ 查看是否配置成功</span><span class="token builtin class-name">echo</span> <span class="token string">"此时的music只是45行创建的测试目录"</span><span class="token comment"># 交换分区  磁盘如被挂在无法转为交换分区</span><span class="token comment"># 查看交换分区</span><span class="token function">swapon</span> -s <span class="token comment"># 将分区转为交换分区</span><span class="token function">mkswap</span> /dev/sdb1<span class="token comment"># 激活</span><span class="token function">swapon</span> /dev/sdb1<span class="token comment"># 取消激活交换分区</span>swapoff /dev/sdb1<span class="token comment"># 压缩解压见  https://czy1024.github.io/blog/blog/linux_tar.html</span><span class="token comment"># 用户操作  https://czy1024.github.io/blog/blog/linux_user_group.html</span>adduser luna-1 <span class="token comment"># 添加用户 生成目录</span><span class="token function">useradd</span> luna-2 <span class="token comment"># 添加用户 生成目录</span><span class="token comment"># usermod </span><span class="token comment"># 进程管理</span><span class="token function">ps</span> -aux <span class="token operator">|</span> <span class="token function">grep</span> xxx<span class="token comment"># 杀死进程 参数 1 (HUP)：重新加载进程。9 (KILL)：杀死一个进程。 15 (TERM)：正常停止一个进程。</span><span class="token function">kill</span> -9 pid<span class="token function">killall</span> xxx<span class="token comment"># 进程启动后台执行 输出重定向</span><span class="token comment"># 后台执行echo "hello" 并将输出到pro.log 文件</span><span class="token function">nohup</span> <span class="token builtin class-name">echo</span> <span class="token string">"hello"</span> <span class="token operator">></span> /tmp/pro.log <span class="token operator">&amp;</span><span class="token comment"># 网络配置</span><span class="token comment"># 先ifconfig 查看网卡名称</span><span class="token string">"auto ens33iface ens33 inet static　  # 设置静态IP，动态的是将static修改为dhcp，如果设置为动态IP无法设置虚拟网卡address 172.16.2.95　　　  # 如果为动态IP以下的都不用配置。netmask 255.255.255.0        # 子网掩码gateway 172.16.254.254     # 网关 ->上级路由"</span><span class="token comment"># 重启网卡</span>/etc/init.d/networking restart<span class="token builtin class-name">echo</span> <span class="token string">"安装ssh"</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server -y<span class="token function">sudo</span> /etc/init.d/ssh restart<span class="token comment"># vim /etc/ssh/sshd_config</span><span class="token builtin class-name">echo</span> <span class="token string">"开启root登陆"</span><span class="token function">sed</span> -i <span class="token string">'s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g'</span> /etc/ssh/sshd_config<span class="token function">sudo</span> /etc/init.d/ssh restart<span class="token comment"># 免密登录 将客户端公钥放入服务器authorized_keys文件</span><span class="token comment">#客户端执行: scp ~/.ssh/id_rsa.pub  root@172.16.22.2:/tmp/id_rsa.pub </span><span class="token comment">#服务端执行: cat /tmp/id_rsa.pub >> ~/.ssh/authorized_keys</span><span class="token comment"># systemctl</span><span class="token comment"># 启动</span>systemctl  start sshd<span class="token comment"># 停止</span>systemctl  stop sshd<span class="token comment"># 开机自启动</span>systemctl <span class="token builtin class-name">enable</span> sshd<span class="token comment">#取消开机运行</span>systemctl disable sshd <span class="token comment"># 创建自定义服务模仿 cat /etc/systemd/system/sshd.service</span><span class="token comment"># 网络安全</span><span class="token comment"># nmap 官网:http://www.nmap.com.cn/</span><span class="token comment"># 扫描端口 将指定ip 1-65535端口扫描结果保存到 /tmp/result.txt</span>nmap -sS -O -p1-65535 <span class="token function">ip</span> -o /tmp/result.txt<span class="token comment"># iptables 限制ip访问22</span>iptables -A INPUT -p tcp --dport <span class="token number">22</span> -s <span class="token number">192.168</span>.100.1/24 -j DROP<span class="token comment"># 查看规则</span>iptables -nL --line-number<span class="token comment"># 清除规则</span>iptables -D INPUT <span class="token number">1</span><span class="token comment"># shell 编程 锁定用户id大于多少的用户 脚本地址: https://github.com/czy1024/luna-linux-conf/blob/master/ubuntu/lockuser_if_userid_gt_x.sh</span><span class="token function">vim</span> userlock.sh<span class="token function">chmod</span> +x ./userlock.sh<span class="token comment"># 锁定用户id大于100的用户</span>./userlock.sh <span class="token number">1000</span><span class="token comment"># 用户计划</span>at <span class="token number">16</span>:00<span class="token comment"># 输入命令后 ctrl + D 结束</span><span class="token comment"># 使用脚本</span>at <span class="token number">16</span>:00 -f ~/luna<span class="token comment"># atq查看设置的计划</span><span class="token comment"># 删除计划</span>atrm x <span class="token comment"># x为查询的任务编号</span><span class="token function">apt-get</span> <span class="token function">install</span> crontabs<span class="token comment"># crontab 三个文件</span><span class="token comment"># 系统管理 root用户: /etc/crontab 系统任务 /etc/cron.d 实际工作中与前一个地位相同</span><span class="token comment"># 用于每天,每小时,没星期等文件分别在 /etc/cron.xxxx</span><span class="token comment"># 普通用户的在 /var/spool/cron 目录 以用户名命名</span><span class="token comment"># 为普通用户安装crontab filename 为用户名</span><span class="token function">crontab</span> filename<span class="token comment"># -e 编辑器打开,完成编辑后保存提交 -l 列出用户的crontab文件的内容 -r 删除自己的crontab 文件</span><span class="token comment"># 管理员可建立 /etc/cron.allow 和 /etc/cron.deny 表示用户是否可以创建计划任务 并且 allow>deny</span><span class="token comment"># 并且管理员可用 -u 指定操作用户</span><span class="token builtin class-name">echo</span> <span class="token string">"eg: sudo crontab -u luna luna_make"</span> <span class="token comment"># 给luna 指定crontab 文件 luna_make</span><span class="token builtin class-name">echo</span> <span class="token string">"eg: sudo crontab -u luna -r"</span> <span class="token comment"># 删除luna 的crontab文件</span><span class="token comment">#实例：晚上11点到早上7点之间，每隔一小时重启smb </span><span class="token function">sudo</span> <span class="token function">cat</span> <span class="token operator">></span> /etc/crontab <span class="token operator">&lt;&lt;</span><span class="token string">EOF * 23-7/1 * * * /etc/init.d/smb restartEOF</span><span class="token comment"># 详见 https://czy1024.github.io/blog/blog/linux_crontab.html</span><span class="token comment"># shell 编程 禁止用户id大于多少的用户提交计划 </span><span class="token comment">#脚本地址: https://github.com/czy1024/luna-linux-conf/blob/master/ubuntu/uncrontab_if_user_gt_x.sh</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逻辑运算符</title>
    <link href="/2020/11/28/logical-operations/"/>
    <url>/2020/11/28/logical-operations/</url>
    
    <content type="html"><![CDATA[<h2 id="逻辑运算符-and-or-nor"><a href="#逻辑运算符-and-or-nor" class="headerlink" title="逻辑运算符(and, or, nor)"></a>逻辑运算符(and, or, nor)</h2><p>and &amp; </p><p>规则: 1&amp;1 = 1; 1&amp;0 = 0; 0&amp;1 = 0; 0&amp;0 =0</p><p>运用：and al, 10111111B</p><p>将0位对应的数值置为0</p><p>将1位对应的数值保持不变</p><p>or |</p><p>规则：1|1 = 1； 1|0 = 1； 0|1 = 1； 0|0 = 0</p><p>运用：or al， 10111111B</p><p>将0位对用的数值保持不变</p><p>将1位对应的数值置为1</p><p>xor ^</p><p>异或，英文为exclusive OR，缩写成xor</p><p>异或（eor）是一个数学运算符。它应用于<a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/7224729">逻辑运算</a>。异或的数学符号为“⊕”，计算机符号为“eor”。其运算法则为：</p><p>a⊕b = (¬a ∧ b) ∨ (a ∧¬b)</p><p>规则：1^1 = 0; 1^0 = 1; 0^1 = 1; 0^0 = 0</p><p>运用：a^b^b == a;</p><p>小技巧：不用第三个变量交换变量内容</p><p>a = a^b; </p><p>b = a^b;  //此时 b = a0; </p><p>a = a^b;  //此时 a = (a0^b0)^a0 = b0;</p><p>nor</p><p>同或运算 = 异或运算  ^  1</p><p>​           (A  ^  B)  ^  1 </p><p>相同出1，不同出0</p><p>&amp;&amp;  </p><p>并且</p><p>|| </p><p>或者</p><p>！</p><p>非 取反</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>logic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring RestTemplate</title>
    <link href="/2020/11/24/spring%20restTemplate/"/>
    <url>/2020/11/24/spring%20restTemplate/</url>
    
    <content type="html"><![CDATA[<h1 id="掌握-Spring-之-RestTemplate"><a href="#掌握-Spring-之-RestTemplate" class="headerlink" title="掌握 Spring 之 RestTemplate"></a>掌握 Spring 之 RestTemplate</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Java 服务端开发领域里，Spring 是绕不开的话题，尤其是现在微服务概念盛行，Spring Boot 的出现更是给 Spring 注入了新的活力，除此之外还有 Spring Cloud，这些框架让 Spring 技术体系更加丰富。Spring 从 2014 年的 1.0.0 版本迭代到 现在的 5.2.0 M1 版本，紧随着 Java 语言发展，不断引入新的特性和功能。本文关注的是 Spring 框架中 <code>RestTemplate</code> 内容，可以减少我们平时开发常使用的 <code>HttpClient</code> API 依赖。文章所涉及的示例 Demo 详见Github 地址：<a href="https://github.com/wrcj12138aaa/resttemplate/tree/master">Resttemplate demo</a> 。感谢小七同学的认真校对，如果有任何技术问题或者文章纰漏，欢迎留言联系，一起交流探讨 😁。</p><h2 id="认识-RestTemplate"><a href="#认识-RestTemplate" class="headerlink" title="认识 RestTemplate"></a>认识 <code>RestTemplate</code></h2><p>首先在我们学习使用 <code>RestTemplate</code> 之前，先认识下这个类，来看 Spring 官方怎么描述的。 从官方 API 文档 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html">RestTemplate javadoc</a> 可以找该类的描述如下：</p><blockquote><p>Synchronous client to perform HTTP requests, exposing a simple, template method API over underlying HTTP client libraries such as the JDK HttpURLConnection, Apache HttpComponents, and others. The RestTemplate offers templates for common scenarios by HTTP method, in addition to the generalized exchange and execute methods that support of less frequent cases.</p></blockquote><p>从这里可以清楚地了解到 <code>RestTemplate</code> 采用同步方式执行 HTTP 请求的类，底层使用 JDK 原生 <code>HttpURLConnection</code> API ，或者 <code>HttpComponents</code>等其他 HTTP 客户端请求类库。还有一处强调的就是 <code>RestTemplate</code> 提供模板化的方法让开发者能更简单地发送 HTTP 请求。</p><p>值得注意的是，<code>RestTemplate</code> 类是在 Spring Framework 3.0 开始引入的，这里我们使用的 Spring 版本为当前最新的 GA 版本 5.1.6。而在 5.0 以上，官方标注了更推荐使用非阻塞的响应式 HTTP 请求处理类 <code>org.springframework.web.reactive.client.WebClient</code> 来替代 <code>RestTemplate</code>，尤其是对应异步请求处理的场景上 。</p><p>这里我们先简单总结下什么是 <code>RestTemplate</code> ： <code>RestTemplate</code> 就是 Spring 封装的处理同步 HTTP 请求的类。具体如何使用这个类进行 HTTP 请求操作，可见文章的实战部分。</p><p>接下来我们看下 <code>RestTemplate</code> 类提供的 API 有哪些,<code>RestTemplate</code> 提供了将近 30 个请求方法，其中多数是单个方法重载实现，这里我主要参考官方文档 <a href="https://docs.spring.io/spring/docs/5.1.6.RELEASE/spring-framework-reference/integration.html#rest-client-access">rest-client-access</a> 进行如下分类：</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>getForObject</code></td><td>通过 GET 请求获得响应结果</td></tr><tr><td><code>getForEntity</code></td><td>通过 GET 请求获取 <code>ResponseEntity</code> 对象，包容有状态码，响应头和响应数据</td></tr><tr><td><code>headForHeaders</code></td><td>以 HEAD 请求资源返回所有响应头信息</td></tr><tr><td><code>postForLocation</code></td><td>用 POST 请求创建资源，并返回响应数据中响应头的字段 <code>Location</code> 的数据</td></tr><tr><td><code>postForObject</code></td><td>通过 POST 请求创建资源，获得响应结果</td></tr><tr><td><code>put</code></td><td>通过 PUT 方式请求来创建或者更新资源</td></tr><tr><td><code>patchForObject</code></td><td>通过 PATH 方式请求来更新资源，并获得响应结果。(JDK <code>HttpURLConnection</code> 不支持 PATH 方式请求，其他 HTTP 客户端库支持)</td></tr><tr><td><code>delete</code></td><td>通过 DELETE 方式删除资源</td></tr><tr><td><code>optionsForAllow</code></td><td>通过 ALLOW 方式请求来获得资源所允许访问的所有 HTTP 方法，可用看某个请求支持哪些请求方式</td></tr><tr><td><code>exchange</code></td><td>更通用版本的请求处理方法，接受一个 <code>RequestEntity</code> 对象，可以设置路径，请求头，请求信息等，最后返回一个 <code>ResponseEntity</code> 实体</td></tr><tr><td><code>execute</code></td><td>最通用的执行 HTTP 请求的方法，上面所有方法都是基于 <code>execute</code> 的封装，全面控制请求信息，并通过回调接口获得响应数据</td></tr></tbody></table><p>看到那么多方法也记不全，为了更好理解，可以简单看下 <code>RestTemplate</code> 的类层级体系，通过官方源代码就能看到:</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">&#x2F;** * Interface specifying a basic set of RESTful operations. * Implemented by &#123;@link RestTemplate&#125;. Not often used directly, but a useful * option to enhance testability, as it can easily be mocked or stubbed. * * @author Arjen Poutsma * @author Juergen Hoeller * @since 3.0 * @see RestTemplate *&#x2F;public interface RestOperations &#123;    ...&#125;</code></pre></div><p>其实 <code>RestTemplate</code> 类的请求方法都是来自 <code>RestOperations</code> 接口的，根据这个名字就可以大概知道这个接口主要就是提供了 RESTful 请求操作的接口，如 GET，POST，PUT，DELETE 等，具体信息可以参见 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestOperations.html">RestOperation javadoc</a>。</p><p><img src="/blog/img/springrest/1.jpg" alt="RestTemplate 类层次图"></p><blockquote><p>关于 RESTful：</p><p>来自Wikipedia 定义：<strong>表现层状态转换</strong>，一种设计提供万维网络服务的<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E4%BB%B6%E6%9E%B6%E6%A7%8B">软件构建风格</a>，又简称为 REST。</p><p><strong>用 URL 定位资源，用 HTTP 动词描述操作，如 GET,POST,DELETE,PUT</strong>，简单来说通过 URL 就知道访问什么资源，通过 HTTP Method 就知道执行什么操作，通过 HTTP Status Code 就知道执行结果。</p></blockquote><h2 id="实战-RestTemplate"><a href="#实战-RestTemplate" class="headerlink" title="实战 RestTemplate"></a>实战 <code>RestTemplate</code></h2><p>好了，简单认识了 <code>RestTemplate</code> 类之后，我们先牛刀小试，看看如何上手使用。</p><h3 id="1-生成-Demo-项目，导入-IDE"><a href="#1-生成-Demo-项目，导入-IDE" class="headerlink" title="1. 生成 Demo 项目，导入 IDE"></a>1. 生成 Demo 项目，导入 IDE</h3><p>为了能快速搭建一个 Demo，我们这边用 Spring Boot 框架搭建，首先用官方提供的 <a href="https://start.spring.io/">Spring Initializr</a> 来生成快速构建项目骨架，选择 Spring Boot 版本 2.1.4,其底层依赖的 Spring Framework 版本为最新发布版本 5.1.6，对于 POM 依赖只选择一个 Web 模块即可，这样便于快速搭建 Web 应用。</p><p><img src="/blog/img/springrest/2.jpg" alt="spring initializr"></p><p>点击生成工程按钮，就可以下载到项目的压缩包，解压后用自己常用的 IDE 导入项目，项目结构整理如下：</p><p><img src="/blog/img/springrest/3.jpg" alt="项目骨架"></p><p>项目中 <code>ResttemplateApplication.java</code> 为整个程序的引导类，用于启动项目。</p><h3 id="2-编写请求控制器类-ProductController"><a href="#2-编写请求控制器类-ProductController" class="headerlink" title="2. 编写请求控制器类 ProductController"></a>2. 编写请求控制器类 ProductController</h3><p>首先为了能够使用 <code>RestTemplate</code> 发送多种方式 HTTP 请求，先本地构建接受 HTTP 请求的产品控制器，新建包 <code>com.one.learn.resttemplate.controller</code>,新建产品 Controller <code>ProductController</code> , 代码如下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/product"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get_product1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">get_product1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ProductA"</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">6666.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get_product2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">get_product2</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"ProductC"</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">6666.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get_product3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get_product3</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/post_product1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">post_product1</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/post_product2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">post_product2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"编号为%s的产品删除成功"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateByPut</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 更新成功"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Spring MVC 使用 MultipartRequest 接受带文件的 HTTP 请求</span>        <span class="token class-name">MultipartFile</span> file <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"upload success filename: "</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>在<code>Product</code> 控制器中涉及的实体类 <code>Product</code> 创建在 <code>com.one.learn.resttemplate.bean</code> 包下，代码如下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 省去 setter getter 方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Product&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id='"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", price='"</span> <span class="token operator">+</span> price <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>有了这些类，就可以利用程序引导类 <code>ResttemplateApplication</code> 启动 Spring Boot 项目，一个简单的 Web 应用就诞生了,监听 8080 端口，结果如下图所示：</p><p><img src="/blog/img/springrest/4.jpg" alt="项目启动"></p><p>我们可以简单测试一下，打开浏览器，访问 <code>http://localhost:8080/product/get_product1</code>，会看到如图所示的结果：</p><p><img src="/blog/img/springrest/5.jpg" alt="项目访问"></p><h3 id="3-编写测试类用-RestTemplate-发送-HTTP-请求"><a href="#3-编写测试类用-RestTemplate-发送-HTTP-请求" class="headerlink" title="3. 编写测试类用 RestTemplate 发送 HTTP 请求"></a>3. 编写测试类用 RestTemplate 发送 HTTP 请求</h3><p>有了 Web 服务，接下来该使用 <code>RestTemplate</code> 来发送请求并处理响应了。我们在 <code>test</code> 文件下新建一个测试类 <code>com.one.learn.resttemplate.RestTemplateTests</code>,代码如下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestTemplateTests</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>这里我们通过编写测试方法来用 <code>RestTemplate</code> API 实现对 <code>Product</code> 控制器各个接口的请求。</p><h4 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h4><p>我们先最简单的下手，尝试用 <code>RestTemplate</code> 访问请求路径为 <code>product/get_product1</code>, 一个不带任何参数 的 GET 请求，代码如下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet_product1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/product/get_product1"</span><span class="token punctuation">;</span>   <span class="token comment">//方式一：GET 方式获取 JSON 串数据</span>   <span class="token class-name">String</span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get_product1返回结果："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"get_product1返回结果为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//方式二：GET 方式获取 JSON 数据映射后的 Product 实体对象</span>   <span class="token class-name">Product</span> product <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get_product1返回结果："</span> <span class="token operator">+</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">"get_product1返回结果为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//方式三：GET 方式获取包含 Product 实体对象 的响应实体 ResponseEntity 对象,用 getBody() 获取</span>   <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> responseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get_product1返回结果："</span> <span class="token operator">+</span> responseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>responseEntity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"get_product1响应不成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>首先看下运行测试方法 <code>testGet_product1</code> 后控制台的输出日志：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>get_product1返回结果：<span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"ProductA"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">6666.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>get_product1返回结果：<span class="token class-name">Product</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'ProductA'</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">'6666.0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>get_product1返回结果：<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token class-name">Product</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'ProductA'</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">'6666.0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token operator">:</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span> <span class="token class-name">Transfer</span><span class="token operator">-</span><span class="token class-name">Encoding</span><span class="token operator">:</span><span class="token string">"chunked"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token operator">:</span><span class="token string">"Thu, 09 May 2019 15:37:25 GMT"</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div><p>可以看到 <code>testGet_product1</code> 请求都是成功响应并获取到了数据，从上面代码上看是不是很简单。现在来点略复杂的请求方式，使用 <code>RestTemplate</code> API 中 <code>exchange</code> 和 <code>execute</code> 方法发送 GET 请求，可以更加细粒度控制请求的行为，如 <code>Header</code> 信息，数据处理方式等,同样在 <code>testGet_product1</code> 方法里添加代码如下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet_product1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/product/get_product1"</span><span class="token punctuation">;</span>    <span class="token comment">//....</span>        <span class="token comment">//方式一： 构建请求实体 HttpEntity 对象，用于配置 Header 信息和请求参数</span>    <span class="token class-name">MultiValueMap</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    header<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//方式二： 执行请求获取包含 Product 实体对象 的响应实体 ResponseEntity 对象,用 getBody() 获取</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> exchangeResult <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get_product1返回结果："</span> <span class="token operator">+</span> exchangeResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>exchangeResult<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"get_product1响应不成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//方式三： 根据 RequestCallback 接口实现类设置Header信息,用 ResponseExtractor 接口实现类读取响应数据</span>    <span class="token class-name">String</span> executeResult <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> request <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>clientHttpResponse<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InputStream</span> body <span class="token operator">=</span> clientHttpResponse<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>body<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 备注：这里使用了 Java8 特性：Lambda 表达式语法，若未接触 Lambda 表达式后可以使用匿名内部类代替实现</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get_product1返回结果："</span> <span class="token operator">+</span> executeResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>executeResult<span class="token punctuation">,</span> <span class="token string">"get_product1返回结果为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>同样再运行测试方法 <code>testGet_product1</code> 后控制台的输出日志：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>get_product1返回结果：<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token class-name">Product</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'ProductA'</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">'6666.0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token operator">:</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span> <span class="token class-name">Transfer</span><span class="token operator">-</span><span class="token class-name">Encoding</span><span class="token operator">:</span><span class="token string">"chunked"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token operator">:</span><span class="token string">"Thu, 09 May 2019 16:00:22 GMT"</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>get_product1返回结果：<span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"ProductA"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token operator">:</span><span class="token number">6666.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div><p>结果也都是正常返回，说明执行的请求都是正确的。</p><p>现在来尝试执行带有参数的 GET 请求，同样的方式编写一个新的测试方法，实现代码如下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet_product2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/product/get_product2/id=&#123;id&#125;"</span><span class="token punctuation">;</span>    <span class="token comment">//方式一：将参数的值存在可变长度参数里，按照顺序进行参数匹配</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> responseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>responseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>responseEntity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"get_product2 请求不成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>responseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"get_product2  传递参数不成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//方式二：将请求参数以键值对形式存储到 Map 集合中，用于请求时URL上的拼接</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> uriVariables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uriVariables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Product</span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"get_product2  传递参数不成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>正常运行结果如下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token class-name">Product</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'101'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'ProductC'</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">'6666.0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token operator">:</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span> <span class="token class-name">Transfer</span><span class="token operator">-</span><span class="token class-name">Encoding</span><span class="token operator">:</span><span class="token string">"chunked"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token operator">:</span><span class="token string">"Fri, 10 May 2019 14:53:41 GMT"</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Product</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'101'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'ProductC'</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">'6666.0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div><h4 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h4><p>了解完如何用 <code>RestTemplate</code> API 发送 GET 请求后，再看下平时也很常见的 POST 请求如何使用。由于 POST 请求数据的内容类型 <code>Content-Type</code> 不同，发送 POST 请求情况相对就多了，我们这里以常用的 <code>application/x-www-form-urlencoded</code> 和 <code>application/json</code> 这两种内容类型为例子。</p><ul><li><p>发送 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code> 的 POST 请求：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPost_product1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/product/post_product1"</span><span class="token punctuation">;</span><span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">,</span> <span class="token string">"Macbook"</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置请求的 Content-Type 为 application/x-www-form-urlencoded</span>    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    header<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_FORM_URLENCODED_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方式二： 将请求参数值以 K=V 方式用 &amp; 拼接，发送请求使用</span>    <span class="token class-name">String</span> productStr <span class="token operator">=</span> <span class="token string">"id="</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;name="</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;price="</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>productStr<span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> exchangeResult <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post_product1: "</span> <span class="token operator">+</span> exchangeResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>exchangeResult<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"post_product1 请求不成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//方式一： 将请求参数以键值对形式存储在 MultiValueMap 集合，发送请求时使用</span>    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MultiValueMap</span><span class="token punctuation">></span></span> request2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> exchangeResult2 <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">,</span> request2<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post_product1： "</span> <span class="token operator">+</span> exchangeResult2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>exchangeResult<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"post_product1 请求不成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>对应的输出日志如下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>post_product1<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token class-name">Product</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'201'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Macbook'</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">'10000'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token operator">:</span><span class="token string">"text/plain;charset=UTF-8"</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Length</span><span class="token operator">:</span><span class="token string">"48"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token operator">:</span><span class="token string">"Fri, 10 May 2019 16:07:43 GMT"</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>post_product1： <span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token class-name">Product</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'201'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Macbook'</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">'10000'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token operator">:</span><span class="token string">"text/plain;charset=UTF-8"</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Length</span><span class="token operator">:</span><span class="token string">"48"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token operator">:</span><span class="token string">"Fri, 10 May 2019 16:07:43 GMT"</span><span class="token punctuation">]</span><span class="token operator">></span></code></pre></div></li><li><p>发送 <code>Content-Type</code> 为 <code>application/json</code> 的 POST 请求：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPost_product2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/product/post_product2"</span><span class="token punctuation">;</span>       <span class="token comment">// 设置请求的 Content-Type 为 application/json</span>    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 Accept 向服务器表明客户端可处理的内容类型</span>    header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>ACCEPT<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 直接将实体 Product 作为请求参数传入，底层利用 Jackson 框架序列化成 JSON 串发送请求</span>    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Macbook"</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> exchangeResult <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post_product2: "</span> <span class="token operator">+</span> exchangeResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>exchangeResult<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"post_product2 请求不成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>验证的输出日志如下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">···post_product2<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token class-name">Product</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Macbook'</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">'10000'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token operator">:</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Length</span><span class="token operator">:</span><span class="token string">"46"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token operator">:</span><span class="token string">"Fri, 10 May 2019 16:09:11 GMT"</span><span class="token punctuation">]</span><span class="token operator">></span>···</code></pre></div></li></ul><h4 id="DELETE-请求-和-PUT-请求"><a href="#DELETE-请求-和-PUT-请求" class="headerlink" title="DELETE 请求 和 PUT 请求"></a>DELETE 请求 和 PUT 请求</h4><p>DELETE 请求和 PUT 请求属于 RESTful 请求方式的两种，但通常不会被使用到，这里也只是简单演示下，具体代码如下：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// DELETE 方法请求</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/product/delete/&#123;id&#125;"</span><span class="token punctuation">;</span>   restTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// PUT 方法请求</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/product/update"</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_FORM_URLENCODED_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"iWatch"</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2333</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> productStr <span class="token operator">=</span> <span class="token string">"id="</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;name="</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;price="</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>productStr<span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>    restTemplate<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>现在我们再试下如何使用 <code>RestTemplate</code> API 进行文件上传,也比较简单，首先看下实现代码:</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUploadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080/product/upload"</span><span class="token punctuation">;</span>    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileSystemResource</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/One/Desktop/b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    body<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>MULTIPART_FORM_DATA_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MultiValueMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> responseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"upload: "</span> <span class="token operator">+</span> responseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>responseEntity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"upload 请求不成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>如果需要上传文件类型数据，就只能使用 POST 请求，并且内容类型为 <code>multipart/form-data</code>,需要手动给 <code>Header</code> 指定这个 <code>Content-Type</code>。而需要上传的文件可以用 <code>FileSystemResource</code> 对象封装，表示了一个文件资源，同时服务端需要用 <code>MultipartRequest</code> 对象来获取文件数据。结合已运行的 Web 服务，运行上述测试方法即可得到下面日志输出:</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>upload<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">,</span>upload success filename<span class="token operator">:</span> b<span class="token punctuation">.</span>txt<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token operator">:</span><span class="token string">"text/plain;charset=UTF-8"</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Length</span><span class="token operator">:</span><span class="token string">"30"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token operator">:</span><span class="token string">"Fri, 10 May 2019 17:00:45 GMT"</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div><h2 id="进阶-RestTemplate"><a href="#进阶-RestTemplate" class="headerlink" title="进阶 RestTemplate"></a>进阶 RestTemplate</h2><p>到这里我们就学习了 <code>RestTemplate</code> API 请求数据的几种常见方式，现在来进一步地深入使用 <code>RestTemplate</code>。</p><h3 id="底层-HTTP-请求库切换"><a href="#底层-HTTP-请求库切换" class="headerlink" title="底层 HTTP 请求库切换"></a>底层 HTTP 请求库切换</h3><p>我们首先看下官方文档的描述：</p><blockquote><p>The default constructor uses java.net.HttpURLConnection to perform requests. You can switch to a different HTTP library with an implementation of ClientHttpRequestFactory. There is built-in support for the following:</p><ul><li>Apache HttpComponents</li><li>Netty</li><li>OkHttp</li></ul></blockquote><p>从上面可以看出 <code>RestTemplate</code> 默认使用 JDK 原生的 <code>java.net.HttpURLConnection</code> 执行请求。而除此之外，Spring 还封装了 Apache HttpComponents， Netty， OkHttp 三种请求库，第一个就是我们平常用的 <code>HttpClient</code> API 相关的库，而 <a href="https://netty.io/">Netty</a> 则是一个性能高的NIO 请求处理网络库，<a href="https://square.github.io/okhttp">OkHttp</a> 为功能丰富且高效的网络框架，多用于 Android 程序。</p><p>而我们上文采用默认的构造器方法创建的 <code>RestTemplate</code> 实例，即采用了 JDK 原生的网络 API。想要切换，只需要在构造方法中传入特定 <code>ClientHttpRequestFactory</code> 实现类即可,如下代码：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">RestTemplate template &#x3D; new RestTemplate(new HttpComponentsClientHttpRequestFactory());</code></pre></div><p>我们查看 <code>RestTemplate</code> 源码找不到默认采用JDK <code>HttpURLConnection</code> API 的代码，那就根据前文给出 <code>RestTemplate</code> 类层次图向上查找，可以在父类 <code>HttpAccessor</code> 上能找到如下代码：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HttpAccessor</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token keyword">private</span> <span class="token class-name">ClientHttpRequestFactory</span> requestFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre></div><p>而 Spring 对工厂类 <code>SimpleClientHttpRequestFactory</code> 描述为: <code>implementation that uses standard JDK facilities</code>， 也正说明了默认构造 <code>RestTemplate</code> 实例的行为都会直接使用 JDK 网络 API。</p><h3 id="请求超时设置"><a href="#请求超时设置" class="headerlink" title="请求超时设置"></a>请求超时设置</h3><p>通常我们会对 HTTP 请求类进行执行行为的定制，例如调用超时时间设置，连接时长的限制等，而采用默认的 <code>HttpURLConnection</code> 默认的配置时， 从 <code>SimpleClientHttpRequestFactory</code> 源码类可以看到是没有超时限制，也就意味着无限等待请求响应：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// RestTemplate 默认超时设置</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">int</span> connectTimeout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> readTimeout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div><p>那么我们该如何调整超时时间,可以参考如下代码：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">RestTemplate</span> customRestTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token function">getClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">SimpleClientHttpRequestFactory</span> <span class="token function">getClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SimpleClientHttpRequestFactory</span> clientHttpRequestFactory            <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 连接超时设置 10s</span>    clientHttpRequestFactory<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取超时设置 10s</span>    clientHttpRequestFactory<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> clientHttpRequestFactory<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>如果要调整 <code>HttpComponentsClient</code> 的超时设置，可以参考文章<a href="https://howtodoinjava.com/spring-boot2/resttemplate-timeout-example/">resttemplate-timeout-example</a> 。当然除了java设置超时时间之外，还有更多参数进行定制，这里就不一一列举，可以参考文章 <a href="https://howtodoinjava.com/spring-restful/resttemplate-httpclient-java-config/">resttemplate-httpclient-java-config</a> 进一步学习。</p><p>到这里我们对 <code>RestTemplate</code> 的学习告一段落，如果有兴趣可以进一步研究下相关源码，有机会尝试使起来吧。😁</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RestTemplate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis动态sql</title>
    <link href="/2020/11/04/mybatis%E5%8A%A8%E6%80%81sql/"/>
    <url>/2020/11/04/mybatis%E5%8A%A8%E6%80%81sql/</url>
    
    <content type="html"><![CDATA[<h3 id="MyBatis的动态SQL是基于OGNL表达式的，它可以帮助我们方便的在SQL语句中实现某些逻辑。"><a href="#MyBatis的动态SQL是基于OGNL表达式的，它可以帮助我们方便的在SQL语句中实现某些逻辑。" class="headerlink" title="MyBatis的动态SQL是基于OGNL表达式的，它可以帮助我们方便的在SQL语句中实现某些逻辑。"></a>MyBatis的动态SQL是基于OGNL表达式的，它可以帮助我们方便的在SQL语句中实现某些逻辑。</h3><p>MyBatis中用于实现动态SQL的元素主要有：</p><ul><li>if</li><li>where</li><li>set</li><li>choose（when，otherwise）</li><li>trim</li><li>foreach  </li></ul><h3 id="（1）if标签"><a href="#（1）if标签" class="headerlink" title="（1）if标签"></a>（1）if标签</h3><p>此时如果CNAINDCLABASINFID为null，此语句很可能报错或查询结果为空。此时我们使用if动态sql语句先进行判断，如果值为null或等于空字符串，我们就不进行此条件的判断，增加灵活性。</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">where</span><span class="token operator">></span>   com<span class="token punctuation">.</span>CNAINDCLABASINFID <span class="token operator">=</span> <span class="token comment">#&#123;industryNum&#125;</span>   <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"id!=null and id!=''"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">-- 项目编号 --></span>      <span class="token operator">and</span> bas<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token comment">#&#123;id&#125;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"projectName!=null and projectName!=''"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">-- 项目名称 --></span>      <span class="token operator">and</span> bas<span class="token punctuation">.</span>PROJECT_NAME <span class="token operator">=</span> <span class="token comment">#&#123;projectName&#125;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">where</span><span class="token operator">></span></code></pre></div><h3 id="（2）if-where-条件判断"><a href="#（2）if-where-条件判断" class="headerlink" title="（2）if + where 条件判断"></a>（2）if + where 条件判断</h3><p>如上所示</p><h3 id="（3）if-set-更新语句"><a href="#（3）if-set-更新语句" class="headerlink" title="（3）if + set 更新语句"></a>（3）if + set 更新语句</h3><p>当update语句中没有使用if标签时，如果有一个参数为null，都会导致错误。<br>当在update语句中使用if标签时，如果前面的if没有执行，则或导致逗号多余错误。使用set标签可以将动态的配置SET 关键字，和剔除追加到条件末尾的任何不相关的逗号。<strong>如果set包含的内容为空的话则会出错。</strong></p><p>使用if+set标签修改后，如果某项为null则不进行更新，而是保持数据库原值。如下示例：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">update</span> id<span class="token operator">=</span><span class="token string">"editRateAnalysTask"</span> parameterType<span class="token operator">=</span><span class="token string">"RateAnalystScale"</span> <span class="token operator">></span><span class="token keyword">UPDATE</span> STUDENT_TBL<span class="token operator">&lt;</span><span class="token keyword">set</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"studentName != null and studentName != '' "</span><span class="token operator">></span>      STUDENT_TBL<span class="token punctuation">.</span>STUDENT_NAME <span class="token operator">=</span> <span class="token comment">#&#123;studentName&#125;,</span>   <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"studentSex != null and studentSex != '' "</span><span class="token operator">></span>      STUDENT_TBL<span class="token punctuation">.</span>STUDENT_SEX <span class="token operator">=</span> <span class="token comment">#&#123;studentSex&#125;,</span>   <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"studentBirthday != null "</span><span class="token operator">></span>      STUDENT_TBL<span class="token punctuation">.</span>STUDENT_BIRTHDAY <span class="token operator">=</span> <span class="token comment">#&#123;studentBirthday&#125;,</span>   <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"studentPhoto != null "</span><span class="token operator">></span>      STUDENT_TBL<span class="token punctuation">.</span>STUDENT_PHOTO <span class="token operator">=</span> <span class="token comment">#&#123;studentPhoto, javaType=byte[], jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler&#125;,</span>   <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"classId != '' "</span><span class="token operator">></span>      STUDENT_TBL<span class="token punctuation">.</span>CLASS_ID <span class="token operator">=</span> <span class="token comment">#&#123;classId&#125;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"placeId != '' "</span><span class="token operator">></span>      STUDENT_TBL<span class="token punctuation">.</span>PLACE_ID <span class="token operator">=</span> <span class="token comment">#&#123;placeId&#125;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">set</span><span class="token operator">></span><span class="token keyword">WHERE</span> STUDENT_TBL<span class="token punctuation">.</span>STUDENT_ID <span class="token operator">=</span> <span class="token comment">#&#123;studentId&#125;;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">update</span><span class="token operator">></span></code></pre></div><h3 id="（4）choose-when-otherwise"><a href="#（4）choose-when-otherwise" class="headerlink" title="（4）choose (when,otherwise)"></a>（4）choose (when,otherwise)</h3><p>​    有时候我们并不想应用所有的条件，而只是想从多个选项中选择一个。而使用if标签时，只要test中的表达式为true，就会执行if标签中的条件。MyBatis提供了choose 元素。if标签是与(and)的关系，而choose标签是或（or）的关系.</p><p>​    choose标签是按顺序判断其内部when标签中的test条件出否成立，如果有一个成立，则choose结束<strong>。</strong>当choose中所有when的条件都不满则时，则执行otherwise中的sql。类似于Java 的switch 语句，choose为switch，when为case，otherwise则为default。</p><p>例如下面例子，同样把所有可以限制的条件都写上，方面使用。choose会从上到下选择一个when标签的test为true的sql执行。安全考虑，我们使用where将choose包起来，放置关键字多于错误。</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>   <span class="token keyword">SELECT</span> ST<span class="token punctuation">.</span>STUDENT_ID<span class="token punctuation">,</span>   ST<span class="token punctuation">.</span>STUDENT_NAME<span class="token punctuation">,</span>   ST<span class="token punctuation">.</span>STUDENT_SEX<span class="token punctuation">,</span>   ST<span class="token punctuation">.</span>STUDENT_BIRTHDAY<span class="token punctuation">,</span>   ST<span class="token punctuation">.</span>STUDENT_PHOTO<span class="token punctuation">,</span>   ST<span class="token punctuation">.</span>CLASS_ID<span class="token punctuation">,</span>   ST<span class="token punctuation">.</span>PLACE_ID   <span class="token keyword">FROM</span> STUDENT_TBL ST   <span class="token operator">&lt;</span><span class="token keyword">where</span><span class="token operator">></span>      <span class="token operator">&lt;</span>choose<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token keyword">when</span> test<span class="token operator">=</span><span class="token string">"studentName !=null "</span><span class="token operator">></span>            ST<span class="token punctuation">.</span>STUDENT_NAME <span class="token operator">LIKE</span> CONCAT<span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token comment">#&#123;studentName, jdbcType=VARCHAR&#125;),'%')</span>         <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">when</span> <span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token keyword">when</span> test<span class="token operator">=</span><span class="token string">"studentSex != null and studentSex != '' "</span><span class="token operator">></span>            <span class="token operator">AND</span> ST<span class="token punctuation">.</span>STUDENT_SEX <span class="token operator">=</span> <span class="token comment">#&#123;studentSex, jdbcType=INTEGER&#125;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">when</span> <span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token keyword">when</span> test<span class="token operator">=</span><span class="token string">"studentBirthday != null "</span><span class="token operator">></span>            <span class="token operator">AND</span> ST<span class="token punctuation">.</span>STUDENT_BIRTHDAY <span class="token operator">=</span> <span class="token comment">#&#123;studentBirthday, jdbcType=DATE&#125;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">when</span> <span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token keyword">when</span> test<span class="token operator">=</span><span class="token string">"classId != null and classId!= '' "</span><span class="token operator">></span>            <span class="token operator">AND</span> ST<span class="token punctuation">.</span>CLASS_ID <span class="token operator">=</span> <span class="token comment">#&#123;classId, jdbcType=VARCHAR&#125;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">when</span> <span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token keyword">when</span> test<span class="token operator">=</span><span class="token string">"classEntity != null and classEntity.classId !=null and classEntity.classId !=' ' "</span><span class="token operator">></span>            <span class="token operator">AND</span> ST<span class="token punctuation">.</span>CLASS_ID <span class="token operator">=</span> <span class="token comment">#&#123;classEntity.classId, jdbcType=VARCHAR&#125;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">when</span> <span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token keyword">when</span> test<span class="token operator">=</span><span class="token string">"placeId != null and placeId != '' "</span><span class="token operator">></span>            <span class="token operator">AND</span> ST<span class="token punctuation">.</span>PLACE_ID <span class="token operator">=</span> <span class="token comment">#&#123;placeId, jdbcType=VARCHAR&#125;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">when</span> <span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token keyword">when</span> test<span class="token operator">=</span><span class="token string">"placeEntity != null and placeEntity.placeId != null and placeEntity.placeId != '' "</span><span class="token operator">></span>            <span class="token operator">AND</span> ST<span class="token punctuation">.</span>PLACE_ID <span class="token operator">=</span> <span class="token comment">#&#123;placeEntity.placeId, jdbcType=VARCHAR&#125;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">when</span> <span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token keyword">when</span> test<span class="token operator">=</span><span class="token string">"studentId != null and studentId != '' "</span><span class="token operator">></span>            <span class="token operator">AND</span> ST<span class="token punctuation">.</span>STUDENT_ID <span class="token operator">=</span> <span class="token comment">#&#123;studentId, jdbcType=VARCHAR&#125;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">when</span> <span class="token operator">></span>         <span class="token operator">&lt;</span>otherwise<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>otherwise<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>choose<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">where</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span></code></pre></div><h3 id="（5）trim标签"><a href="#（5）trim标签" class="headerlink" title="（5）trim标签"></a>（5）trim标签</h3><p>trim元素的主要功能是可以在自己包含的内容前加上某些前缀，也可以在其后加上某些后缀，与之对应的属性是<strong>prefix</strong>和<strong>suffix</strong>；可以把包含内容的首部某些内容覆盖，即忽略，也可以把尾部的某些内容覆盖，对应的属性是<strong>prefixOverrides</strong>和<strong>suffixOverrides</strong>。正因为trim有这样的功能，所以我们也可以非常简单的利用trim来代替where/set标签的功能，示例代码如下：</p><p><strong>trim代替where标签：</strong></p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">　<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> 　　<span class="token operator">&lt;</span>trim prefix<span class="token operator">=</span><span class="token string">"WHERE"</span> prefixoverride<span class="token operator">=</span><span class="token string">"AND |OR"</span><span class="token operator">></span>　　　　<span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"name != null and name.length()>0"</span><span class="token operator">></span> <span class="token operator">AND</span> name<span class="token operator">=</span><span class="token comment">#&#123;name&#125;&lt;/if></span>　　　　<span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"gender != null and gender.length()>0"</span><span class="token operator">></span> <span class="token operator">AND</span> gender<span class="token operator">=</span><span class="token comment">#&#123;gender&#125;&lt;/if></span>　　<span class="token operator">&lt;</span><span class="token operator">/</span>trim<span class="token operator">></span></code></pre></div><p>假如说name和gender的值都不为null的话打印的SQL为：select * from user where   name = ‘xx’ and gender = ‘xx’</p><p>　　在红色标记的地方是不存在第一个and的，上面两个属性的意思如下：</p><p>　　prefix：前缀　　　　　　</p><p>　　prefixoverride：去掉第一个and或者是or</p><p><strong>trim代替set标签：</strong></p><p>update user</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">　　<span class="token operator">&lt;</span>trim prefix<span class="token operator">=</span><span class="token string">"set"</span> suffixoverride<span class="token operator">=</span><span class="token string">","</span> suffix<span class="token operator">=</span><span class="token string">" where id = #&#123;id&#125; "</span><span class="token operator">></span>　　　　<span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"name != null and name.length()>0"</span><span class="token operator">></span> name<span class="token operator">=</span><span class="token comment">#&#123;name&#125; , &lt;/if></span>　　　　<span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"gender != null and gender.length()>0"</span><span class="token operator">></span> gender<span class="token operator">=</span><span class="token comment">#&#123;gender&#125; ,  &lt;/if></span>　　<span class="token operator">&lt;</span><span class="token operator">/</span>trim<span class="token operator">></span></code></pre></div><p>假如说name和gender的值都不为null的话打印的SQL为：update user set name=’xx’ , gender=’xx’   where id=’x’</p><p>　　在红色标记的地方不存在逗号，而且自动加了一个set前缀和where后缀，上面三个属性的意义如下，其中prefix意义如上：</p><p>　　suffixoverride：去掉最后一个逗号（也可以是其他的标记，就像是上面前缀中的and一样）</p><p>　　suffix：后缀</p><h3 id="（6）foreach-标签"><a href="#（6）foreach-标签" class="headerlink" title="（6）foreach 标签"></a>（6）foreach 标签</h3><p>foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。<strong>foreach元素的属性主要有item，index，collection，open，separator，close。</strong></p><ul><li><strong>item</strong>表示集合中每一个元素进行迭代时的别名；</li><li><strong>index</strong>指定一个名字，用于表示在迭代过程中，每次迭代到的位置；</li><li><strong>open</strong>表示该语句以什么开始；</li><li><strong>separator</strong>表示在每次进行迭代之间以什么符号作为分隔符；</li><li><strong>close</strong>表示以什么结束；</li></ul><p>在使用foreach的时候最关键的也是最容易出错的就是 <strong>collection</strong> 属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有一下3种情况： </p><ul><li>如果传入的是单参数且参数类型是一个List的时候，collection属性值为list</li><li>如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array</li><li>如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这⁄⁄⁄个时候collection属性值就是传入的List或array对象在自己封装的map里面的key</li></ul><h4 id="1）单参数List的类型："><a href="#1）单参数List的类型：" class="headerlink" title="1）单参数List的类型："></a>1）单参数List的类型：</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"dynamicForeachTest"</span> resultType<span class="token operator">=</span><span class="token string">"Blog"</span><span class="token operator">></span>      <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_blog <span class="token keyword">where</span> id <span class="token operator">in</span>      <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"list"</span> <span class="token keyword">index</span><span class="token operator">=</span><span class="token string">"index"</span> item<span class="token operator">=</span><span class="token string">"item"</span> <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">"("</span> separator<span class="token operator">=</span><span class="token string">","</span> <span class="token keyword">close</span><span class="token operator">=</span><span class="token string">")"</span><span class="token operator">></span>          <span class="token comment">#&#123;item&#125;  </span>    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span>  </code></pre></div><p>上述collection的值为list，对应的Mapper是这样的：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> dynamicForeachTest<span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token keyword">Integer</span><span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></div><h4 id="2）单参数array数组的类型："><a href="#2）单参数array数组的类型：" class="headerlink" title="2）单参数array数组的类型："></a>2）单参数array数组的类型：</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"dynamicForeach2Test"</span> resultType<span class="token operator">=</span><span class="token string">"Blog"</span><span class="token operator">></span>      <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_blog <span class="token keyword">where</span> id <span class="token operator">in</span>      <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"array"</span> <span class="token keyword">index</span><span class="token operator">=</span><span class="token string">"index"</span> item<span class="token operator">=</span><span class="token string">"item"</span> <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">"("</span> separator<span class="token operator">=</span><span class="token string">","</span> <span class="token keyword">close</span><span class="token operator">=</span><span class="token string">")"</span><span class="token operator">></span>          <span class="token comment">#&#123;item&#125;  </span>    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span>  </code></pre></div><p>上述collection为array，对应的Mapper代码：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> <span class="token function">dynamicForeach2Test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre></div><h4 id="3）自己把参数封装成Map的类型"><a href="#3）自己把参数封装成Map的类型" class="headerlink" title="3）自己把参数封装成Map的类型"></a>3）自己把参数封装成Map的类型</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"dynamicForeach3Test"</span> resultType<span class="token operator">=</span><span class="token string">"Blog"</span><span class="token operator">></span>      <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_blog <span class="token keyword">where</span> title <span class="token operator">like</span> <span class="token string">"%"</span><span class="token comment">#&#123;title&#125;"%" and id in  </span>    <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"ids"</span> <span class="token keyword">index</span><span class="token operator">=</span><span class="token string">"index"</span> item<span class="token operator">=</span><span class="token string">"item"</span> <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">"("</span> separator<span class="token operator">=</span><span class="token string">","</span> <span class="token keyword">close</span><span class="token operator">=</span><span class="token string">")"</span><span class="token operator">></span>          <span class="token comment">#&#123;item&#125;  </span>    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span>  </code></pre></div><p>上述collection的值为ids，是传入的参数Map的key，对应的Mapper代码：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> <span class="token function">dynamicForeach3Test</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>middle-component</category>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis原理</title>
    <link href="/2020/11/04/mybatis%E5%8E%9F%E7%90%86/"/>
    <url>/2020/11/04/mybatis%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="MyBatis工作流程简述"><a href="#MyBatis工作流程简述" class="headerlink" title="MyBatis工作流程简述"></a>MyBatis工作流程简述</h2><p><strong>传统工作模式：</strong></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.demo.mapper.UserMapper.getUserByName"</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol><li>创建SqlSessionFactoryBuilder对象，调用build(inputstream)方法读取并解析配置文件，返回SqlSessionFactory对象</li><li>由SqlSessionFactory创建SqlSession 对象，没有手动设置的话事务默认开启</li><li>调用SqlSession中的api，传入Statement Id和参数，内部进行复杂的处理，最后调用jdbc执行SQL语句，封装结果返回。</li></ol><hr><p><strong>使用Mapper接口：</strong><br>由于面向接口编程的趋势，MyBatis也实现了通过接口调用mapper配置文件中的SQL语句</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//前三步都相同</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里不再调用SqlSession 的api，而是获得了接口对象，调用接口中的方法。</span><span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="原生MyBatis原理分析"><a href="#原生MyBatis原理分析" class="headerlink" title="原生MyBatis原理分析"></a>原生MyBatis原理分析</h2><h2 id="初始化工作"><a href="#初始化工作" class="headerlink" title="初始化工作"></a>初始化工作</h2><h3 id="解析配置文件"><a href="#解析配置文件" class="headerlink" title="解析配置文件"></a>解析配置文件</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一行代码正是初始化工作的开始。</span><span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>进入源码分析：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 1.我们最初调用的build</span><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//调用了重载方法</span>    <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">// 2.调用的重载方法</span><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">,</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//  XMLConfigBuilder是专门解析mybatis的配置文件的类</span>      <span class="token class-name">XMLConfigBuilder</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//这里又调用了一个重载方法。parser.parse()的返回值是Configuration对象</span>      <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error building SqlSession."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//省略部分代码</span>  <span class="token punctuation">&#125;</span></code></pre></div><p>下面进入对配置文件解析部分：</p><p>首先对Configuration对象进行介绍：</p><blockquote><p>Configuration对象的结构和xml配置文件的对象几乎相同。</p><p>回顾一下xml中的配置标签有哪些：</p><blockquote><p>properties（属性），settings（设置），typeAliases（类型别名），typeHandlers（类型处理器），objectFactory（对象工厂），mappers（映射器）等</p></blockquote><p>Configuration也有对应的对象属性来封装它们：<br><img src="https://i.loli.net/2021/04/19/ZnUdxmWcGEzgoq9.png" alt="在这里插入图片描述"><br>也就是说，<code>初始化配置文件信息的本质就是创建Configuration对象，将解析的xml数据封装到Configuration内部的属性中。</code></p></blockquote><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//在创建XMLConfigBuilder时，它的构造方法中解析器XPathParser已经读取了配置文件</span><span class="token comment">//3. 进入XMLConfigBuilder 中的 parse()方法。</span><span class="token keyword">public</span> <span class="token class-name">Configuration</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Each XMLConfigBuilder can only be used once."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    parsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//parser是XPathParser解析器对象，读取节点内数据，&lt;configuration>是MyBatis配置文件中的顶层标签</span>    <span class="token function">parseConfiguration</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/configuration"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//最后返回的是Configuration 对象</span>    <span class="token keyword">return</span> configuration<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//4. 进入parseConfiguration方法</span><span class="token comment">//此方法中读取了各个标签内容并封装到Configuration中的属性中。</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseConfiguration</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//issue #117 read properties first</span>      <span class="token function">propertiesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Properties</span> settings <span class="token operator">=</span> <span class="token function">settingsAsProperties</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">loadCustomVfs</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">loadCustomLogImpl</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">typeAliasesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeAliases"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">pluginElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"plugins"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">objectFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">objectWrapperFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectWrapperFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">reflectorFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"reflectorFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">settingsElement</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// read it after objectFactory and objectWrapperFactory issue #631</span>      <span class="token function">environmentsElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"environments"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">databaseIdProviderElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"databaseIdProvider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">typeHandlerElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeHandlers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing SQL Mapper Configuration. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>到此对xml配置文件的解析就结束了（下文会对部分解析做详细介绍），回到步骤 2. 中调用的重载build方法。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 5. 调用的重载方法</span><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建了DefaultSqlSessionFactory对象，传入Configuration对象。</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSessionFactory</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><h3 id="配置类方式"><a href="#配置类方式" class="headerlink" title="配置类方式"></a>配置类方式</h3><p>发散一下思路，既然解析xml是对Configuration中的属性进行复制，那么我们同样可以在一个类中创建Configuration对象，手动设置其中属性的值来达到配置的效果。</p><h2 id="执行SQL"><a href="#执行SQL" class="headerlink" title="执行SQL"></a>执行SQL</h2><p>先简单介绍<strong>SqlSession</strong>：</p><blockquote><p>SqlSession是一个接口，它有两个实现类：DefaultSqlSession（默认）和SqlSessionManager（弃用，不做介绍）<br>SqlSession是MyBatis中用于和数据库交互的<code>顶层类</code>，通常将它与ThreadLocal绑定，一个会话使用一个SqlSession，并且在使用完毕后需要close。<br><img src="https://i.loli.net/2021/04/19/sgclvkANYuZ8Tzf.png" alt="在这里插入图片描述"><br>SqlSession中的两个最重要的参数，configuration与初始化时的相同，Executor为执行器，</p></blockquote><p><strong>Executor：</strong></p><blockquote><p>Executor也是一个接口，他有三个常用的实现类BatchExecutor（重用语句并执行批量更新），ReuseExecutor（重用预处理语句prepared statements），SimpleExecutor（普通的执行器，默认）。</p></blockquote><h3 id="SqlSession-API方式"><a href="#SqlSession-API方式" class="headerlink" title="SqlSession API方式"></a>SqlSession API方式</h3><p>继续分析，初始化完毕后，我们就要执行SQL了：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.demo.mapper.UserMapper.getUserByName"</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>获得sqlSession</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//6. 进入openSession方法。</span>  <span class="token keyword">public</span> <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//getDefaultExecutorType()传递的是SimpleExecutor</span>    <span class="token keyword">return</span> <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getDefaultExecutorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//7. 进入openSessionFromDataSource。</span><span class="token comment">//ExecutorType 为Executor的类型，TransactionIsolationLevel为事务隔离级别，autoCommit是否开启事务</span><span class="token comment">//openSession的多个重载方法可以指定获得的SeqSession的Executor类型和事务的处理</span><span class="token keyword">private</span> <span class="token class-name">SqlSession</span> <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">,</span> <span class="token class-name">TransactionIsolationLevel</span> level<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> <span class="token class-name">TransactionFactory</span> transactionFactory <span class="token operator">=</span> <span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//根据参数创建指定类型的Executor</span>      <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//返回的是DefaultSqlSession</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">closeTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// may have fetched a connection so lets call close()</span>      <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error opening session.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre></div><p>执行sqlsession中的api</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//8.进入selectList方法，多个重载方法。</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//根据传入的全限定名+方法名从映射的Map中取出MappedStatement对象</span>      <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//调用Executor中的方法处理</span>      <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span>NO_RESULT_HANDLER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error querying database.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre></div><hr><p>介绍一下<strong>MappedStatement</strong> ：</p><ul><li><strong>作用：</strong> MappedStatement与Mapper配置文件中的一个select/update/insert/delete节点相对应。mapper中配置的标签都被封装到了此对象中，主要用途是描述一条SQL语句。</li><li><strong>初始化过程：</strong>回顾刚开始介绍的加载配置文件的过程中，会对mybatis-config.xml中的各个标签都进行解析，其中有 mappers标签用来引入<code>mapper.xml文件</code>或者配置<code>mapper接口</code>的目录。</li></ul><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>   select * from user where id=#&#123;id&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></div><p>这样的一个select标签会在<code>初始化配置文件时</code>被解析封装成一个<code>MappedStatement</code>对象，然后存储在Configuration对象的mappedStatements属性中，mappedStatements 是一个HashMap，存储时<code>key = 全限定类名 + 方法名，value = 对应的MappedStatement对象</code>。</p><ul><li>在configuration中对应的属性为</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span><span class="token punctuation">></span></span> mappedStatements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MappedStatement</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"Mapped Statements collection"</span><span class="token punctuation">)</span></code></pre></div><ul><li>在XMLConfigBuilder中的处理：</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseConfiguration</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 省略其他标签的处理</span>    <span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing SQL Mapper Configuration. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><hr><p>继续源码中的步骤，进入 executor.query()</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//此方法在SimpleExecutor的父类BaseExecutor中实现</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span><span class="token comment">//根据传入的参数动态获得SQL语句，最后返回用BoundSql对象表示</span>    <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//为本次查询创建缓存的Key</span>    <span class="token class-name">CacheKey</span> key <span class="token operator">=</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//进入query的重载方法中</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"executing a query"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Executor was closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ms<span class="token punctuation">.</span><span class="token function">isFlushCacheRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      queryStack<span class="token operator">++</span><span class="token punctuation">;</span>      list <span class="token operator">=</span> resultHandler <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handleLocallyCachedOutputParameters</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> key<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果缓存中没有本次查找的值，那么从数据库中查询</span>        list <span class="token operator">=</span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      queryStack<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DeferredLoad</span> deferredLoad <span class="token operator">:</span> deferredLoads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        deferredLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// issue #601</span>      deferredLoads<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getLocalCacheScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">LocalCacheScope</span><span class="token punctuation">.</span>STATEMENT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// issue #482</span>        <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//从数据库查询</span><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>    localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> EXECUTION_PLACEHOLDER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 查询的方法</span>      list <span class="token operator">=</span> <span class="token function">doQuery</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      localCache<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将查询结果放入缓存</span>    localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span>CALLABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      localOutputParameterCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">// SimpleExecutor中实现父类的doQuery抽象方法</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">doQuery</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 传入参数创建StatementHanlder对象来执行查询</span>      <span class="token class-name">StatementHandler</span> handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 创建jdbc中的statement对象</span>      stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// StatementHandler进行处理</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token comment">// 创建Statement的方法</span><span class="token keyword">private</span> <span class="token class-name">Statement</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token class-name">StatementHandler</span> handler<span class="token punctuation">,</span> <span class="token class-name">Log</span> statementLog<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Statement</span> stmt<span class="token punctuation">;</span>    <span class="token comment">//条代码中的getConnection方法经过重重调用最后会调用openConnection方法，从连接池中获得连接。</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span>statementLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    stmt <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handler<span class="token punctuation">.</span><span class="token function">parameterize</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> stmt<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//从连接池获得连接的方法</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Opening JDBC Connection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//从连接池获得连接</span>    connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      connection<span class="token punctuation">.</span><span class="token function">setTransactionIsolation</span><span class="token punctuation">(</span>level<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">setDesiredAutoCommit</span><span class="token punctuation">(</span>autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//进入StatementHandler进行处理的query，StatementHandler中默认的是PreparedStatementHandler</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span> statement<span class="token punctuation">;</span>    <span class="token comment">//原生jdbc的执行</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理结果返回。</span>    <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span><span class="token function">handleResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div><h3 id="接口方式"><a href="#接口方式" class="headerlink" title="接口方式"></a>接口方式</h3><p>回顾一下写法：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//前三步都相同</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里不再调用SqlSession 的api，而是获得了接口对象，调用接口中的方法。</span><span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>思考一个问题，通常的Mapper接口我们都没有实现的方法却可以使用，是为什么呢？答案很简单 <code>动态代理</code></p><hr><p>开始之前介绍一下MyBatis初始化时对接口的处理：MapperRegistry是Configuration中的一个属性，它内部维护一个HashMap用于存放mapper接口的<code>工厂类</code>，每个接口对应一个工厂类。mappers中可以配置接口的包路径，或者某个具体的接口类。</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre></div><ul><li>当解析mappers标签时，它会判断解析到的是mapper配置文件时，会再将对应配置文件中的增删改查标签一 一封装成MappedStatement对象，存入mappedStatements中。（上文介绍了）</li><li>当判断解析到接口时，会创建此接口对应的MapperProxyFactory对象，存入HashMap中，key = 接口的字节码对象，value = 此接口对应的MapperProxyFactory对象。</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//MapperRegistry类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperRegistry</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Configuration</span> config<span class="token punctuation">;</span>  <span class="token comment">//这个类中维护一个HashMap存放MapperProxyFactory</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">MapperProxyFactory</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> knownMappers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解析到接口时添加接口工厂类的方法</span>  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Type "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">" is already known to the MapperRegistry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">boolean</span> loadCompleted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//重点在这行，以接口类的class对象为key，value为其对应的工厂对象，构造方法中指定了接口对象</span>        knownMappers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// It's important that the type is added before the parser is run</span>        <span class="token comment">// otherwise the binding may automatically be attempted by the</span>        <span class="token comment">// mapper parser. If the type is already known, it won't try.</span>        <span class="token class-name">MapperAnnotationBuilder</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperAnnotationBuilder</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>        parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loadCompleted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadCompleted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          knownMappers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><hr><p>正文：<br>进入sqlSession.getMapper(UserMapper.class)中</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//DefaultSqlSession中的getMapper</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> configuration<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token function">getMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//configuration中的给getMapper</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">,</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mapperRegistry<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//MapperRegistry中的getMapper</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> type<span class="token punctuation">,</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//从MapperRegistry中的HashMap中拿MapperProxyFactory</span>    <span class="token keyword">final</span> <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> mapperProxyFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> knownMappers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mapperProxyFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Type "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">" is not known to the MapperRegistry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 通过动态代理工厂生成示例。</span>      <span class="token keyword">return</span> mapperProxyFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Error getting mapper instance. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//MapperProxyFactory类中的newInstance方法</span> <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 创建了JDK动态代理的Handler类</span>    <span class="token keyword">final</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> mapperProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">,</span> methodCache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用了重载方法</span>    <span class="token keyword">return</span> <span class="token function">newInstance</span><span class="token punctuation">(</span>mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//MapperProxy类，实现了InvocationHandler接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//省略部分源码</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> mapperInterface<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">MapperMethod</span><span class="token punctuation">></span></span> methodCache<span class="token punctuation">;</span>    <span class="token comment">// 构造，传入了SqlSession，说明每个session中的代理对象的不同的！</span>  <span class="token keyword">public</span> <span class="token class-name">MapperProxy</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> mapperInterface<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">MapperMethod</span><span class="token punctuation">></span></span> methodCache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface <span class="token operator">=</span> mapperInterface<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache <span class="token operator">=</span> methodCache<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//省略部分源码</span><span class="token punctuation">&#125;</span><span class="token comment">//重载的方法，由动态代理创建新示例返回。</span><span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> mapperProxy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> mapperInterface <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div><p>在动态代理返回了示例后，我们就可以直接调用mapper类中的方法了，说明在MapperProxy中的invoke方法中已经为我们实现了方法。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//判断调用是是不是Object中定义的方法，toString，hashCode这类非。是的话直接放行。</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDefaultMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">invokeDefaultMethod</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">final</span> <span class="token class-name">MapperMethod</span> mapperMethod <span class="token operator">=</span> <span class="token function">cachedMapperMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重点在这：MapperMethod最终调用了执行的方法</span>    <span class="token keyword">return</span> mapperMethod<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> result<span class="token punctuation">;</span>    <span class="token comment">//判断mapper中的方法类型，最终调用的还是SqlSession中的方法</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> INSERT<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> UPDATE<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> DELETE<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> SELECT<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">hasResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">executeWithResultHandler</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>          result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result <span class="token operator">=</span> <span class="token function">executeForMany</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result <span class="token operator">=</span> <span class="token function">executeForMap</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result <span class="token operator">=</span> <span class="token function">executeForCursor</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>          result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> FLUSH<span class="token operator">:</span>        result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Unknown execution method for: "</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Mapper method '"</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">+</span> <span class="token string">" attempted to return null from a method with a primitive return type ("</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>middle-component</category>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一个git提交发生了什么</title>
    <link href="/2020/10/12/git%20in%20first/"/>
    <url>/2020/10/12/git%20in%20first/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Git 是目前世界上被最广泛使用的现代软件版本管理系统（Version Control System）。Git 本身亦是一个成熟并处于活跃开发状态的开源项目，今天惊人数量的软件项目依赖 Git 进行版本管理，这些项目包括开源以及各种商业软件。Git 在职业软件开发者中拥有良好的声誉，Git 目前支持绝大多数的操作系统以及 IDE（Integrated Development Environments）。</p><p>Git 最初是由 Linux 操作系统内核的创造者 Linus Torvalds 在 2005 年创造，Git 第一个可用版本是 Linus 花了两周时间用C写出来的。Git 第一个版本就实现了 Git 源码自托管，一个月之内，Linux系统的源码也已经由 Git 管理了！</p><p>Git 的第一个提交源码仅有约1000行，但是已经实现了Git的基本设计原理，比如初始化仓库、提交代码、查看代码diff、读取提交信息等，Git 定义了三个区：工作区（workspace）、暂存区（index）、版本库（commit history），也实现了三类重要的 Git 对象：blob、tree、commit。本文将从源码上分析 Git 的第一个提交并挖掘背后优秀的设计原理。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h4 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h4><p>在Github上可以找到Git的仓库镜像：<br>        <a href="https://github.com/git/git.git">https://github.com/git/git.git</a></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取 git 源码</span>$ <span class="token function">git</span> clone https://github.com/git/git.git<span class="token comment"># 查看第一个提交</span>$ <span class="token function">git</span> log --date-order --reversecommit e83c5163316f89bfbde7d9ab23ca2e25604af290Author: Linus Torvalds <span class="token operator">&lt;</span>torvalds@ppc970.osdl.org<span class="token operator">></span>Date:   Thu Apr <span class="token number">7</span> <span class="token number">15</span>:13:13 <span class="token number">2005</span> -0700    Initial revision of <span class="token string">"git"</span>, the information manager from hell<span class="token comment"># 变更为第一个提交，指定commit-id</span>$ <span class="token function">git</span> reset --hard e83c5163316f89bfbde7d9ab23ca2e25604af290</code></pre></div><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ tree -h.├── [2.4K]  cache.h├── [ 503]  cat-file.c                  # 查看objects文件├── [4.0K]  commit-tree.c               # 提交tree├── [1.2K]  init-db.c                   # 初始化仓库├── [ 970]  Makefile├── [5.5K]  read-cache.c                # 读取当前索引文件内容├── [8.2K]  README├── [ 986]  read-tree.c                 # 读取tree├── [2.0K]  show-diff.c                 # 查看diff内容├── [5.3K]  update-cache.c              # 添加文件或目录└── [1.4K]  write-tree.c                # 写入到tree# 统计代码行数，总共1089行$ find . &quot;(&quot; -name &quot;*.c&quot; -or -name &quot;*.h&quot; -or -name &quot;Makefile&quot; &quot;)&quot; -print | xargs wc -l ... 1089 total</code></pre></div><h4 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h4><p>编译第一个提交的Git会有编译问题，需要更改Makefile添加相关的依赖库：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> ./Makefile<span class="token punctuation">..</span>. -LIBS<span class="token operator">=</span> -lssl+LIBS<span class="token operator">=</span> -lssl -lz -lcrypto<span class="token punctuation">..</span>.</code></pre></div><p>编译：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编译</span>$ <span class="token function">make</span></code></pre></div><p>只支持在 linux 平台上编译运行。</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>Write programs that do one thing and do it well.<br>——Unix philosophy</p><p>查看编译生成的可执行文件，总共有7个：</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/blog/img/git-1.jpg"></h4><p>命令使用过程：</p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/blog/img/git-2.jpg"></h4><h4 id="init-db：初始化仓库"><a href="#init-db：初始化仓库" class="headerlink" title="init-db：初始化仓库"></a>init-db：初始化仓库</h4><h5 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a><strong>命令说明</strong></h5><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ init-db</code></pre></div><div class="code-wrapper"><pre class="language-none"><code class="language-none">创建目录：.dircache。创建目录：.dircache&#x2F;objects。在 .dircache&#x2F;objects 中创建了从 00 ~ ff 共256个目录。.dircache&#x2F; 是Git的工作目录，最新版本的Git工作目录为 .git&#x2F; 。运行示例# 运行init-db初始化仓库$ init-dbdefaulting to private storage area # 查看初始化后的目录结构$ tree . -a.└── .dircache                   # git工作目录    └── objects                 # objects文件        ├── 00        ├── 01        ├── 02        ├── ......              # 省略        ├── fe        └── ff258 directories, 0 files</code></pre></div><p>最新版本Git使用 git init . 初始化仓库，而且初始化工作目录为 .git/，初始化后，.git/ 目录中的文件和功能也非常丰富，包括 .git/HEAD、.git/refs/ 、.git/info/ 等，以及很多的 hooks 示例：.git/hooks/**.sample。</p><h4 id="update-cache：添加文件或目录"><a href="#update-cache：添加文件或目录" class="headerlink" title="update-cache：添加文件或目录"></a>update-cache：添加文件或目录</h4><p>update-cache 主要是把工作区的修改文件提交到暂存区。工作区、暂存区等说明见下文【设计原理】 。</p><h4 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ update-cache <span class="token operator">&lt;</span>file<span class="token operator">></span> <span class="token punctuation">..</span>.</code></pre></div><h4 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h4><p>读取并解析索引文件 ：.dircache/index。<br>遍历多个文件，读取并生成变更文件信息（文件名称、文件内容sha1值、日期、大小等），写入到索引文件中。<br>遍历多个文件，读取并压缩变更文件，存储到objects文件中，该文件为blob对象。</p><p>如果是刚初始化的仓库，会自动创建索引文件。索引文件说明见下文【设计原理 - 索引文件】。blob对象的文件格式及说明见下文【设计原理 - blob对象】。sha1值说明见下文【设计原理 - 哈希算法】。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新增README.md文件</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"hello git"</span> <span class="token operator">></span> README.md<span class="token comment"># 提交</span>$ update-cache README.md<span class="token comment"># 查看索引文件</span>$ hexdump -C .dircache/index00000000  <span class="token number">43</span> <span class="token number">52</span> <span class="token number">49</span> <span class="token number">44</span> 01 00 00 00  01 00 00 00 af a4 fc 8e  <span class="token operator">|</span>CRID<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">|</span>00000010  5e <span class="token number">34</span> 9d <span class="token function">dd</span> <span class="token number">31</span> 8b 4c 8e  <span class="token number">15</span> ca <span class="token number">32</span> 05 5a e9 a4 c8  <span class="token operator">|</span>^4<span class="token punctuation">..</span><span class="token number">1</span>.L<span class="token punctuation">..</span>.2.Z<span class="token punctuation">..</span>.<span class="token operator">|</span>00000020  af bd 4c 5f bf fb <span class="token number">41</span> <span class="token number">37</span>  af bd 4c 5f bf fb <span class="token number">41</span> <span class="token number">37</span>  <span class="token operator">|</span><span class="token punctuation">..</span>L_<span class="token punctuation">..</span>A7<span class="token punctuation">..</span>L_<span class="token punctuation">..</span>A7<span class="token operator">|</span>00000030  00 03 01 00 <span class="token number">91</span> <span class="token number">16</span> d2 04  b4 <span class="token number">81</span> 00 00 ee 03 00 00  <span class="token operator">|</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">|</span>00000040  ee 03 00 00 0a 00 00 00  bb <span class="token number">12</span> <span class="token number">25</span> <span class="token number">52</span> ab 7b <span class="token number">40</span> <span class="token number">20</span>  <span class="token operator">|</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>%R.<span class="token punctuation">&#123;</span>@ <span class="token operator">|</span>00000050  b5 f6 <span class="token number">12</span> cc 3b bd d5 b4  3d 1f d3 a8 09 00 <span class="token number">52</span> <span class="token number">45</span>  <span class="token operator">|</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">;</span><span class="token punctuation">..</span>.<span class="token operator">=</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.RE<span class="token operator">|</span>00000060  <span class="token number">41</span> <span class="token number">44</span> 4d <span class="token number">45</span> 2e 6d <span class="token number">64</span> 00                           <span class="token operator">|</span>ADME.md.<span class="token operator">|</span>00000068<span class="token comment"># 查看objects内容，sha1值从索引文件中获取</span>$ cat-file bb122552ab7b4020b5f612cc3bbdd5b43d1fd3a8temp_git_file_61uTTP: blob$ <span class="token function">cat</span> ./temp_git_file_RwpU8bhello <span class="token function">git</span> </code></pre></div><h4 id="cat-file：查看objects文件内容"><a href="#cat-file：查看objects文件内容" class="headerlink" title="cat-file：查看objects文件内容"></a>cat-file：查看objects文件内容</h4><p>cat-file 根据sha1值查看暂存区中的objects文件内容。cat-file 是一个辅助工具，在正常的开发工作流中一般不会使用到。</p><h4 id="命令使用-1"><a href="#命令使用-1" class="headerlink" title="命令使用"></a>命令使用</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ cat-file <span class="token operator">&lt;</span>sha<span class="token operator"><span class="token file-descriptor important">1</span>></span></code></pre></div><h4 id="运行流程-1"><a href="#运行流程-1" class="headerlink" title="运行流程"></a>运行流程</h4><p>根据入参sha1值定位objects文件，比如 .dircache/objects/46/4b392e2c8c7d2d13d90e6916e6d41defe8bb6a<br>读取该objects文件内容，解压得到真实数据。<br>写入到临时文件 temp_git_file_XXXXXX（随机不重复文件）。</p><p>objects内容为压缩格式，基于zlib压缩算法，objects说明见【设计原理 - objects 文件】。</p><h4 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat-file 会把内容读取到temp_git_file_rLcGKX</span>$ cat-file 82f8604c3652fa5762899b5ff73eb37bef2da795temp_git_file_tBTXFM: blob<span class="token comment"># 查看 temp_git_file_tBTXFM 文件内容</span>$ <span class="token function">cat</span> ./temp_git_file_tBTXFM hello git<span class="token operator">!</span></code></pre></div><h4 id="show-diff：查看diff内容"><a href="#show-diff：查看diff内容" class="headerlink" title="show-diff：查看diff内容"></a>show-diff：查看diff内容</h4><p>查看工作区和暂存区中的文件差异。</p><p><strong>命令使用</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ show-diff</code></pre></div><p><strong>运行流程</strong></p><p>读取并解析索引文件：.dircache/index。<br>循环遍历变更文件信息，比较工作区中的文件信息和索引文件中记录的文件信息差异。<br>无差异，显示 : ok。<br>有差异，调用 diff 命令输出差异内容。</p><p><strong>运行示例</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 创建文件并提交到暂存区$ echo &quot;hello git!&quot; &gt; README.md$ update-cache README.md# 当前无差异$ show-diffREADME.md: ok# 更改README.md$ echo &quot;hello world!&quot; &gt; README.md# 查看diff$ show-diffREADME.md:  82f8604c3652fa5762899b5ff73eb37bef2da795--- -   2020-08-31 17:33:50.047881667 +0800+++ README.md   2020-08-31 17:33:47.827740680 +0800@@ -1 +1 @@-hello git!+hello world! </code></pre></div><h4 id="write-tree：写入到tree"><a href="#write-tree：写入到tree" class="headerlink" title="write-tree：写入到tree"></a>write-tree：写入到tree</h4><p>write-tree 作用将保存在索引文件中的多个objects对象归并到一个类型为tree的objects文件中，该文件即Git中重要的对象：tree。</p><p><strong>命令使用</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ write-tree</code></pre></div><p><strong>运行流程</strong></p><p>读取并解析索引文件：.dircache/index。<br>循环遍历变更文件信息，按照指定格式编排变更文件信息及内容。<br>压缩并存储到objects文件中，该object文件为tree对象。</p><p>tree对象的文件格式及相关说明见下文【设计原理 - tree对象】。</p><p><strong>运行示例</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 提交$ write-treec771b3ab2fe3b7e43099290d3e99a3e8c414ec72# 查看objects内容$ cat-file  c771b3ab2fe3b7e43099290d3e99a3e8c414ec72temp_git_file_r90ft5: tree$ cat .&#x2F;temp_git_file_r90ft5100664 README.md��&#96;L6R�Wb��_�&gt;�&#123;�-��</code></pre></div><h4 id="read-tree：读取tree"><a href="#read-tree：读取tree" class="headerlink" title="read-tree：读取tree"></a>read-tree：读取tree</h4><p>read-tree 读取并解析指定sha1值的tree对象，输出变更文件的信息。</p><p><strong>命令使用</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ read-tree &lt;sha1&gt;</code></pre></div><p><strong>运行步骤</strong></p><p>解析sha1值。<br>读取对应sha1值的object对象。<br>输出变更文件的属性、路径、sha1值。</p><p><strong>运行示例</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 提交$ write-treec771b3ab2fe3b7e43099290d3e99a3e8c414ec72# 读取tree对象$ read-tree  c771b3ab2fe3b7e43099290d3e99a3e8c414ec72100664 README.md (82f8604c3652fa5762899b5ff73eb37bef2da795)</code></pre></div><h4 id="commit-tree：提交tree"><a href="#commit-tree：提交tree" class="headerlink" title="commit-tree：提交tree"></a>commit-tree：提交tree</h4><p>commit-tree 把本地变更提交到版本库里，具体是基于一个tree对象的sha1值创建一个commit对象。</p><p><strong>命令使用</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ commit-tree &lt;sha1&gt; [-p &lt;sha1&gt;]* &lt; changelog</code></pre></div><p><strong>运行流程</strong></p><p>参数解析。<br>获取用户名称、用户邮件、提交日期。<br>写入tree信息。<br>写入parent信息。<br>写入author、commiter信息。<br>写入comments（注释）。<br>压缩并存储到objects文件中，该object文件为commit对象。</p><p>commit对象的文件格式及说明见下文【设计原理 - commit对象】。</p><p><strong>运行示例</strong></p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 写入到tree$ write-tree c771b3ab2fe3b7e43099290d3e99a3e8c414ec72# 提交tree$ echo &quot;first commit&quot; &gt; changelog$ commit-tree c771b3ab2fe3b7e43099290d3e99a3e8c414ec72 &lt; changelogCommitting initial tree c771b3ab2fe3b7e43099290d3e99a3e8c414ec727ea820bd363e24f5daa5de8028d77d88260503d9# 查看commit对象内容$ cat-file 7ea820bd363e24f5daa5de8028d77d88260503d9temp_git_file_CIfJsg: commit$ cat temp_git_file_CIfJsgtree c771b3ab2fe3b7e43099290d3e99a3e8c414ec72author Xiaowen Xia &lt;chenan.xxw@aos-hw09&gt; Tue Sep  1 10:56:16 2020committer Xiaowen Xia &lt;chenan.xxw@aos-hw09&gt; Tue Sep  1 10:56:16 2020first commit</code></pre></div><h4 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h4><blockquote><p>Write programs to work together.<br>——Unix philosophy</p></blockquote><p>与传统的集中式版本控制系统（CVCS）相反，Git 从一开始就设计成了去中心化的分布式系统，每个开发者本地工作区都是一个完整的版本库，拥有本地的代码仓库。另外，Git 的设计初衷是为了让更多的开发者一起开发软件。</p><p>该版本 Git 定义了三种对象：</p><p>blob 对象：保存着文件快照。<br>tree 对象：记录着目录结构和 blob 对象索引。<br>commit 对象：包含着指向前述 tree 对象的指针和所有提交信息。</p><p>三种对象相互之间的关系如下：</p><p><img src="/blog/img/nginx-3.jpg" alt="image.png"></p><p>另外，Git 也定义了三个区，工作区（workspace），暂存区（index）和版本库（commit history）：</p><ul><li>工作区（workspace）：我们直接修改代码的地方。</li><li>暂存区（index）：数据暂时存放的区域，用于在工作区和版本库之间进行数据交流。</li><li>版本库（commit history）：存放已经提交的数据。</li></ul><p>每个可执行文件的具体分工是：init-db 用来创建一个初始化仓库，update-cache 会将 工作区 的变更写到 索引文件 （index）中，write-tree 会将之前的所有变更整理成 tree 对象，commit-tree 会将 指定的 tree 对象写到本地版本库中。另外，show-diff 用来查看 工作区 和 暂存区 中的文件差异，read-tree 用来读取 tree对象 的信息。</p><p>由此可以绘制一个简单的Git开发工作流：</p><p><img src="/blog/img/nginx-4.jpg" alt="image.png"></p><h4 id="objects-文件"><a href="#objects-文件" class="headerlink" title="objects 文件"></a>objects 文件</h4><p>objects文件是载体，用来存储Git中的3个重要对象：blob、tree、commit。</p><p>objects文件的存储目录默认为.dircache/objects，也可以通过环境变量： SHA1_FILE_DIRECTORY 指定。文件路径和名称根据sha1值决定，取sha1值的第一个字节的hex值为目录，其他字节的hex值为名称，比如sha1值为：<br>0277ec89d7ba8c46a16d86f219b21cfe09a611e1<br>的对象文件存储路径为：<br>.dircache/objects/02/77ec89d7ba8c46a16d86f219b21cfe09a611e1</p><p>为了节约存储，同时也能存储多个信息，objects文件内容都是经过 zlib 压缩过的。objects文件的格式由 + + &lt;要存储的内容&gt; 组成，其中 可以是”blob”（blob对象）、”tree”（tree对象）、”commit”（commit对象）。</p><p>使用 cat-file 可以查看object文件是什么类型的对象。</p><p>.dircache/objects 目录结构如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ tree .git&#x2F;objects.git&#x2F;objects├── 02│   └── 77ec89d7ba8c46a16d86f219b21cfe09a611e1├── ......                                          # 省略├── be│   ├── adb5bac00c74c97da7f471905ab0da8b50229c│   └── ee7b5e8ab6ae1c0c1f3cfa2c4643aacdb30b9b├── ......                                          # 省略├── c9│   └── f6098f3ba06cf96e1248e9f39270883ba0e82e├── ......                                          # 省略├── cf│   ├── 631abbf3c4cec0911cb60cc307f3dce4f7a000│   └── 9e478ab3fc98680684cc7090e84644363a4054├── ......                                          # 省略└── ff</code></pre></div><p>问：为什么 .dircache/objects/ 目录下面要以sha1值前一个字节的hex值作为子目录？</p><h4 id="blob-对象"><a href="#blob-对象" class="headerlink" title="blob 对象"></a>blob 对象</h4><p>运行 update-cache 会生成 blob 对象。</p><p>blob 对象用于存储变更文件内容，其实就代表一个变更文件快照。blob 对象由 + + 拼装并压缩：</p><p><img src="/blog/img/git-5.jpg" alt="image.png"></p><p>使用 cat-file 查看 blob 对象内容：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 查看 blob 对象内容$ cat-file 82f8604c3652fa5762899b5ff73eb37bef2da795temp_git_file_tBTXFM: blob$ cat .&#x2F;temp_git_file_tBTXFM hello git!</code></pre></div><h4 id="tree-对象"><a href="#tree-对象" class="headerlink" title="tree 对象"></a>tree 对象</h4><p>运行 write-tree 会生成 tree 对象。</p><p>tree 对象用于存储多个提交文件的信息。tree 对象由 + + 文件模式 + 文件名称 + 文件sha1值 拼装并压缩：</p><p><img src="/blog/img/git-6.jpg" alt="image.png"></p><p>文件sha1值 使用binary格式存储，占用20字节。</p><p>使用 cat-file 查看 tree 对象内容：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 查看 tree 对象内容$ cat-file  c771b3ab2fe3b7e43099290d3e99a3e8c414ec72temp_git_file_r90ft5: tree$ cat .&#x2F;temp_git_file_r90ft5100664 README.md��&#96;L6R�Wb��_�&gt;�&#123;�-��</code></pre></div><p>文件sha1值 使用binary格式存储，所以打印的时候会有乱码。</p><h4 id="commit-对象"><a href="#commit-对象" class="headerlink" title="commit 对象"></a>commit 对象</h4><p>运行 commit-tree 会生成 commit 对象。</p><p>commit 对象存储一次提交的信息，包括所在的tree信息，parent信息以及提交的作者等信息。commit 对象由 + + + * + + + 拼装并压缩：</p><p><img src="/blog/img/git-7.jpg" alt="image.png"></p><p>tree sha1值 和 parent sha1值 使用hex字符串格式存储，占用40字节。</p><p>使用 cat-file 查看 commit 对象内容：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 查看 commit 对象内容$ cat-file 7ea820bd363e24f5daa5de8028d77d88260503d9temp_git_file_CIfJsg: commit$ cat temp_git_file_CIfJsgtree c771b3ab2fe3b7e43099290d3e99a3e8c414ec72author Xiaowen Xia &lt;chenan.xxw@aos-hw09&gt; Tue Sep  1 10:56:16 2020committer Xiaowen Xia &lt;chenan.xxw@aos-hw09&gt; Tue Sep  1 10:56:16 2020first commit</code></pre></div><h4 id="索引文件"><a href="#索引文件" class="headerlink" title="索引文件"></a>索引文件</h4><p>索引文件默认路径为：.dircache/index。索引文件用来存储变更文件的相关信息，当运行 update-cache 时会添加变更文件的信息到索引文件中。</p><p>同时也有一个叫 .dircache/index.lock 的文件，该文件存在时表示当前工作区被锁定，无法进行提交操作。</p><p>使用 hexdump 命令可以查看到索引文件内容：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ hexdump -C .dircache&#x2F;index 00000000  43 52 49 44 01 00 00 00  01 00 00 00 ae 73 c4 f2  |CRID.........s..|00000010  ce 32 c9 6f 13 20 0d 56  9c e8 cf 0d d3 75 10 c8  |.2.o. .V.....u..|00000020  94 ad 4c 5f f4 5c 42 06  94 ad 4c 5f f4 5c 42 06  |..L_.B...L_.B.|00000030  00 03 01 00 91 16 d2 04  b4 81 00 00 ee 03 00 00  |................|00000040  ee 03 00 00 0b 00 00 00  a3 f4 a0 66 c5 46 39 78  |...........f.F9x|00000050  1e 30 19 a3 20 42 e3 82  84 ee 31 54 09 00 52 45  |.0.. B....1T..RE|00000060  41 44 4d 45 2e 6d 64 00                           |ADME.md.|</code></pre></div><p>.dircache/index 索引文件使用二进制存储相关内容，该文件由 文件头 + 变更文件信息 组成：</p><p><img src="/blog/img/git-8.jpg" alt="image.png"></p><p>文件头大小为32字节，一个变更文件信息大小至少是63字节。其中：文件头中的sha1值由整个索引文件内容（文件头 + 变更文件信息）计算得到的。变更文件信息的sha1值由变更文件内容（压缩后）计算得到的。</p><h4 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h4><p>该 Git 版本中使用的哈希算法为 sha1算法 ，代码中使用的是 OpenSSL 库中提供的sha1算法。</p><p>目前 Git 已经有了新的选择：sha256算法 ，且目前正在做 sha1 到 sha256 的迁移。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">#include &lt;openssl&#x2F;sha.h&gt;static int verify_hdr(struct cache_header *hdr, unsigned long size)&#123;  SHA_CTX c;  unsigned char sha1[20];        &#x2F;* 省略 *&#x2F;  &#x2F;* 计算索引文件头sha1值 *&#x2F;  SHA1_Init(&amp;c);  SHA1_Update(&amp;c, hdr, offsetof(struct cache_header, sha1));  SHA1_Update(&amp;c, hdr+1, size - sizeof(*hdr));  SHA1_Final(sha1, &amp;c);  &#x2F;* 省略 *&#x2F;  return 0;&#125; </code></pre></div><h3 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h3><blockquote><p>Use software leverage to your advantage.</p></blockquote><p>——Unix philosophy</p><h4 id="好的代码不是写出来的，是改出来的"><a href="#好的代码不是写出来的，是改出来的" class="headerlink" title="好的代码不是写出来的，是改出来的"></a>好的代码不是写出来的，是改出来的</h4><p>Git 的第一个提交中，虽然实现了 Git 的分布式核心思想，以及三种对象，三个区等核心概念，但是 Git 的灵魂功能比如分支策略、远程仓库、日志系统、git hooks 等功能都是后面逐步迭代出来的。</p><h4 id="关于细节"><a href="#关于细节" class="headerlink" title="关于细节"></a>关于细节</h4><p>问：为什么 .dircache/objects/ 目录下面要以 sha1 值前一个字节的 hex 值作为子目录？</p><p>答：ext3 文件系统下，一个目录下只能有 32000 个一级子文件，如果都把 objects 文件存储到一个 .git/objects/ 目录里，很大概率会达到上限。同时要是一个目录下面子文件太多，那文件查找效率会降低很多。</p><h4 id="关于代码质量"><a href="#关于代码质量" class="headerlink" title="关于代码质量"></a>关于代码质量</h4><p>Git 的第一次提交源码，从代码质量、数据结构上看其实并没有多少参考价值，反而我还发现了很多可以优化的地方，比如：</p><ul><li>异常处理不完善，经常出现段错误（SegmentFault）。</li><li>存在几处内存泄漏的地方，比如 write-tree.c &gt; main函数 &gt; buffer内存块 。</li><li>从索引文件中读取到的变更文件信息使用数组存储，涉及到了比较多的申请释放操作，性能上是有损失的，可以优化成链表存储。</li></ul><p>不过这些都不重要，重要的是 Git 的设计原理和思想。</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-project</title>
    <link href="/2020/09/27/vue-project/"/>
    <url>/2020/09/27/vue-project/</url>
    
    <content type="html"><![CDATA[<h1 id="项目一些思路"><a href="#项目一些思路" class="headerlink" title="项目一些思路"></a>项目一些思路</h1><h3 id="一-项目基本设置"><a href="#一-项目基本设置" class="headerlink" title="一. 项目基本设置"></a>一. 项目基本设置</h3><h4 id="1-1-目录结构"><a href="#1-1-目录结构" class="headerlink" title="1.1. 目录结构"></a>1.1. 目录结构</h4><ul><li>network</li><li>components -&gt; common/content</li><li>pages -&gt; 路由分层</li><li>common </li><li>assets</li><li>router</li><li>store</li></ul><h4 id="1-2-设置CSS初始化和全局样式"><a href="#1-2-设置CSS初始化和全局样式" class="headerlink" title="1.2. 设置CSS初始化和全局样式"></a>1.2. 设置CSS初始化和全局样式</h4><ul><li>initialize.css</li><li>base.css</li></ul><h4 id="1-3-tabbar的封装"><a href="#1-3-tabbar的封装" class="headerlink" title="1.3. tabbar的封装"></a>1.3. tabbar的封装</h4><ul><li>封装HYTabbar</li><li>封装HYTabbarItem</li><li>响应点击切换的设计</li><li>封装完成后，使用时对HYTabbar重新包装</li></ul><h4 id="1-4-axios的封装"><a href="#1-4-axios的封装" class="headerlink" title="1.4. axios的封装"></a>1.4. axios的封装</h4><ul><li>创建axios实例</li><li>拦截响应，返回.data数据</li><li>根据传入的options发送请求，并且调用对应resolve和reject</li></ul><h3 id="二-首先开发"><a href="#二-首先开发" class="headerlink" title="二. 首先开发"></a>二. 首先开发</h3><h4 id="2-1-navbar的封装和使用"><a href="#2-1-navbar的封装和使用" class="headerlink" title="2.1. navbar的封装和使用"></a>2.1. navbar的封装和使用</h4><ul><li>封装navbar包含三个插槽：left、center、right</li><li>设置navbar相关的样式</li><li>使用navbar实现首页的导航栏</li></ul><h4 id="2-2-请求首页数据"><a href="#2-2-请求首页数据" class="headerlink" title="2.2. 请求首页数据"></a>2.2. 请求首页数据</h4><ul><li>封装请求首页更多数据</li><li>将banner数据放在banners变量中</li><li>将recommend数据放在recommends变量中</li></ul><h4 id="2-3-根据Swiper封装HomeSwiper"><a href="#2-3-根据Swiper封装HomeSwiper" class="headerlink" title="2.3. 根据Swiper封装HomeSwiper"></a>2.3. 根据Swiper封装HomeSwiper</h4><ul><li>使用Swiper和SwiperItem</li><li>传入banners进行展示</li></ul><h4 id="2-4-封装FeatureView"><a href="#2-4-封装FeatureView" class="headerlink" title="2.4. 封装FeatureView"></a>2.4. 封装FeatureView</h4><ul><li>传入recommends数据，进行展示</li></ul><h4 id="2-5-封装RecommendView"><a href="#2-5-封装RecommendView" class="headerlink" title="2.5. 封装RecommendView"></a>2.5. 封装RecommendView</h4><ul><li>展示一张图片即可</li></ul><h4 id="2-6-封装tabControl"><a href="#2-6-封装tabControl" class="headerlink" title="2.6. 封装tabControl"></a>2.6. 封装tabControl</h4><ul><li>基本结构的封装</li><li>监听点击</li></ul><h4 id="2-7-请求和保存商品数据"><a href="#2-7-请求和保存商品数据" class="headerlink" title="2.7. 请求和保存商品数据"></a>2.7. 请求和保存商品数据</h4><ul><li>定义goodsList变量，用于存储请求到的商品数据</li><li>根据type和page请求商品数据</li><li>将商品数据保存起来</li></ul><h4 id="2-8-封装GoodsList和GoodsListItem"><a href="#2-8-封装GoodsList和GoodsListItem" class="headerlink" title="2.8. 封装GoodsList和GoodsListItem"></a>2.8. 封装GoodsList和GoodsListItem</h4><ul><li>展示商品列表，封装GoodsList</li><li>列表中每一个商品，封装GoodsListItem</li><li>注意CSS属性的设置即可</li></ul><h4 id="2-9-滚动的封装Scroll"><a href="#2-9-滚动的封装Scroll" class="headerlink" title="2.9. 滚动的封装Scroll"></a>2.9. 滚动的封装Scroll</h4><ul><li>学习BetterScroll的使用</li><li>安装better-scroll</li><li>封装一个独立的组件，用于作为滚动组件：Scroll</li><li>组件内代码的封装：<ul><li>1.创建BetterScroll对象，并且传入DOM和选项（probeType、click、pullUpLoad）</li><li>2.监听scroll事件，该事件会返回一个position</li><li>3.监听pullingUp事件，监听到该事件进行上拉加载更多</li><li>4.封装刷新的方法：this.scroll.refresh()</li><li>5.封装滚动的方法：this.scroll.scrollTo(x, y, time)</li><li>6.封装完成刷新的方法：this.scroll.finishedPullUp</li></ul></li></ul><h4 id="2-10-上拉加载更多"><a href="#2-10-上拉加载更多" class="headerlink" title="2.10. 上拉加载更多"></a>2.10. 上拉加载更多</h4><ul><li>通过Scroll监听上拉加载更多。</li><li>在Home中加载更多的数据。</li><li>请求数据完成后，调动finishedPullUp</li></ul><h4 id="2-11-返回顶部"><a href="#2-11-返回顶部" class="headerlink" title="2.11. 返回顶部"></a>2.11. 返回顶部</h4><ul><li>封装BackTop组件</li><li>定义一个常量，用于决定在什么数值下显示BackTop组件</li><li>监听滚动，决定BackTop的显示和隐藏</li><li>监听BackTop的点击，点击时，调用scrollTo返回顶部</li></ul><h4 id="2-12-tabControl的停留"><a href="#2-12-tabControl的停留" class="headerlink" title="2.12. tabControl的停留"></a>2.12. tabControl的停留</h4><ul><li>重新添加一个tabControl组件（需要设置定位，否则会被盖住）</li><li>在updated钩子中获取tabControl的offsetTop</li><li>判断是否滚动超过了offsetTop来决定是否显示新添加的tabControl</li></ul>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装和启动Kali</title>
    <link href="/2020/09/19/kali-1/"/>
    <url>/2020/09/19/kali-1/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-安装和启动Kali"><a href="#第一章-安装和启动Kali" class="headerlink" title="第一章 安装和启动Kali"></a>第一章 安装和启动Kali</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Kali Linux，简称Kali，是用于安全攻击的最新Linux发行版。它是BackTrack Linux的后继者。不像多数Linux发行版那样，Kali Linux用于渗透测试。渗透测试是一种通过模拟攻击评估计算机系统或网络安全性的方法。在整本书中，我们将会探索一些Kali Linux所提供的工具。</p><p>这一章涉及到Kali Linux在不同场景下的的安装和启动，从插入Kali Linux DVD到配置网络。</p><p>对于本书中所有秘籍，我们都要使用以64位GNOME作为窗口管理器（WM）和架构的Kali Linux（<a href="http://www.kali.org/downloads/%EF%BC%89%E3%80%82%E7%84%B6%E8%80%8C%EF%BC%8C%E4%BD%BF%E7%94%A8KDE%E4%BD%9C%E4%B8%BAWM%E7%9A%84%E7%94%A8%E6%B3%95%E5%B9%B6%E4%B8%8D%E5%9C%A8%E8%BF%99%E6%9C%AC%E4%B9%A6%E9%87%8C%E6%B6%89%E5%8F%8A%EF%BC%8C%E4%BD%A0%E5%BA%94%E8%AF%A5%E8%83%BD%E5%A4%9F%E9%81%B5%E5%BE%AA%E8%BF%99%E4%BA%9B%E7%A7%98%E7%B1%8D%EF%BC%8C%E5%B9%B6%E6%B2%A1%E6%9C%89%E5%A4%9A%E5%B0%91%E9%97%AE%E9%A2%98%E3%80%82">http://www.Kali.org/downloads/）。然而，使用KDE作为WM的用法并不在这本书里涉及，你应该能够遵循这些秘籍，并没有多少问题。</a></p><h2 id="1-1-安装到硬盘"><a href="#1-1-安装到硬盘" class="headerlink" title="1.1 安装到硬盘"></a>1.1 安装到硬盘</h2><p>硬盘的安装是最基本的操作之一。这个任务需要我们不带DVD运行Kali来完成。</p><blockquote><p>执行这个秘籍中的步骤会抹掉你的硬盘，并把Kali标记为你电脑上的主操作系统。</p></blockquote><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在解释整个过程之前，需要满足以下要求：</p><ul><li>为KaliLinux的安装准备最小8GB的空闲磁盘空间（然而我们推荐至少25GB来存放这本书中额外的程序和生成的词汇表）。</li><li>最小512MB的内存。</li><li>在<a href="http://www.kali.org/downloads/">KaliLinux的下载页面</a>下载Kali Linux。</li></ul><p>让我们开始安装吧。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>在光驱中插入Kali Linux Live DVD来开始。你会看到它的启动菜单。选择<code>Graphical install</code>（图形化安装）。</p><p><img src="/img/img/1-1-1.jpg" alt="/img/img"></p></li><li><p>选择语言。这里我们选择<code>English</code>（英语）。</p><p><img src="/img/img/1-1-2.jpg" alt="/img/img"></p></li><li><p>选择你的位置。这里我们选择<code>United States</code>（美国）。</p><p><img src="/img/img/1-1-3.jpg" alt="/img/img"></p></li><li><p>选择你的键盘配置。这里我们选择<code>American English</code>（美国英语）。</p><p><img src="/img/img/1-1-4.jpg" alt="/img/img"></p></li><li><p>下面要完成网络服务配置。输入主机名称，这里我们输入<code>Kali</code>。</p><p><img src="/img/img/1-1-5.jpg" alt="/img/img"></p></li><li><p>下面，我们需要输入域名。这里我们输入<code>kali.secureworks. com</code>。</p><p><img src="/img/img/1-1-6.jpg" alt="/img/img"></p></li><li><p>现在你会看到输入root密码的地方，需要输入两次。</p><p><img src="/img/img/1-1-7.jpg" alt="/img/img"></p></li><li><p>选择你的时区，这里我们选择<code>Eastern</code>（东方）。</p><p><img src="/img/img/1-1-8.jpg" alt="/img/img"></p></li><li><p>我们现在可以选择磁盘分区方式。你会看到四个选项。选择<code>Guided - use entire disk</code>，这会便于你分区。</p><p><img src="/img/img/1-1-9.jpg" alt="/img/img"></p></li><li><p>在这一步，你需要知道你的磁盘会被抹掉，点击<code>Continue</code>（继续）。</p><p><img src="/img/img/1-1-10.jpg" alt="/img/img"></p></li><li><p>下面，你有机会选择三个分区方式之一：所有文件放在一个分区、分离<code>/home</code>、以及分离<code>/home/user/var</code>和<code>/tmp</code>。考虑到Kali用于渗透测试，分区不需要也不必要（即使这对于你的桌面主操作系统是个好主意）。这里我们选择<code>All files in one partition</code>（所有文件放在一个分区）并点击<code>Continue</code>（继续）。</p><p><img src="/img/img/1-1-11.jpg" alt="/img/img"></p></li><li><p>一旦你看到了一个界面，让你知道将要对你磁盘执行的改动，选择<code>Yes</code>之后点击<code>Continue</code>（继续）。要注意这是撤销抹掉你磁盘所有数据的最后机会。</p><p><img src="/img/img/1-1-12.jpg" alt="/img/img"></p></li><li><p>下面，你会被询问是否希望链接到网络镜像。网络镜像允许你接收到Kali的更新。这里我们选择<code>Yes</code>之后点击<code>Continue</code>（继续）。</p><p><img src="/img/img/1-1-13.jpg" alt="/img/img"></p></li><li><p>你可以通过点击<code>Continue</code>（继续）跳过HTTP代理界面。</p><p><img src="/img/img/1-1-14.jpg" alt="/img/img"></p></li><li><p>最后，你会被询问来安装GRUB启动器到主引导记录（MBR）中。选择<code>Yes</code>之后点击<code>Continue</code>（继续）。</p><p><img src="/img/img/1-1-15.jpg" alt="/img/img"></p></li><li><p>祝贺你现在完成了Kali Linux的安装！点击<code>Continue</code>，系统会重启并展示登录界面。</p><p><img src="/img/img/1-1-16.jpg" alt="/img/img"></p></li></ol><h2 id="1-2-安装到U盘或持久存储器中"><a href="#1-2-安装到U盘或持久存储器中" class="headerlink" title="1.2 安装到U盘或持久存储器中"></a>1.2 安装到U盘或持久存储器中</h2><p>Kali Linux U盘能够持久化储存系统设置，以及在U盘中永久升级和安装新的软件包，并让我们将个人定制的Kali Linux随时带在身上。</p><p>多亏了Win32 Disk Imager，我们可以为大多数Linux发行版创建可启动的U盘，包括持久化存储的Kali Linux。</p><h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><p>需要下列工具和准备工作以继续：</p><ul><li>FAT32格式的U盘，最小8GB。</li><li>Kali Linux ISO镜像。</li><li><a href="http://sourceforge.net/projects/win32diskimager/">Win32 Disk Imager</a>。</li><li>你可以从<a href="http://www.kali.org/downloads/">这里</a>下载Kali。</li></ul><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始讲Kali Linux安装到U盘：</p><ol><li><p>插入格式化且可写入的U盘：</p><p><img src="/img/img/1-2-1.jpg" alt="/img/img"></p></li><li><p>启动 Win32 Disk Imager。</p></li><li><p>点击目录图表，选择Kali Linux DVD ISO镜像的位置：</p><p><img src="/img/img/1-2-2.jpg" alt="/img/img"></p></li><li><p>确保<code>Space used to preserve files across reboots</code>（用于在启动中保存文件的空间）设置为4096。</p><p><img src="/img/img/1-2-3.jpg" alt="/img/img"></p></li><li><p>选择我们的U盘，并点击OK按钮来开始创建可启动的U盘：</p></li><li><p>当它解压并复制DVD的文件到U盘，以及安装bootloader时，这个过程会花一些时间来完成。</p></li><li><p>安装完成之后，我们就可以重启电脑，从新创建的Kali Linux U盘以持久存储器来启动了。</p><p><img src="/img/img/1-2-4.jpg" alt="/img/img"></p></li></ol><h2 id="1-3-在-VirtualBox-中安装"><a href="#1-3-在-VirtualBox-中安装" class="headerlink" title="1.3 在 VirtualBox 中安装"></a>1.3 在 VirtualBox 中安装</h2><p>这个秘籍会引导你使用知名的开源虚拟机软件VirtualBox，将Kali Linux安装在一个完全分离的访客操作系统中，它在你的宿主操作系统中。</p><h3 id="准备-2"><a href="#准备-2" class="headerlink" title="准备"></a>准备</h3><p>需要满足下列要求：</p><ul><li><a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a> 的最新版本（本书编写时为4.2.16）。</li><li>Kali Linux ISO 镜像的副本。你可以在[这里](<a href="http://www/">http://www</a>. Kali.org/downloads/)下载。</li></ul><h3 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们在VirtualBox中安装Kali Linux：</p><ol><li><p>运行VirtualBox，点击<code>New</code>（新建）来启动虚拟机向导：</p><p><img src="/img/img/1-3-1.jpg" alt="/img/img"></p></li><li><p>点击<code>Next</code>（下一步）按钮，键入虚拟机的名称，并选择OS类型和版本。这里我们选择Linux类型和Ubuntu（64位）作为版本。点击<code>Next</code>按钮来继续：</p><p><img src="/img/img/1-3-2.jpg" alt="/img/img"></p></li><li><p>选择分配给虚拟机的基本内存（RAM）的总数。我们打算使用默认值，点击<code>Next</code>。</p></li><li><p>为新的虚拟机创建新的虚拟硬盘，点击<code>Next</code>按钮。</p><p><img src="/img/img/1-3-3.jpg" alt="/img/img"></p></li><li><p>一个新的向导窗口将会打开，保留默认的VDI文件类型，因为我们并不需要使用其它的虚拟机软件。</p></li><li><p>我们会保留默认选项作为虚拟机磁盘存储的详情。点击<code>Next</code>来继续：</p></li><li><p>设置虚拟机磁盘文件类型和大小：</p><p><img src="/img/img/1-3-4.jpg" alt="/img/img"></p></li><li><p>检查设置是否正确，之后点击<code>Create</code>（创建）按钮来开始虚拟磁盘文件的创建。</p></li><li><p>我们将会返回前面的向导，带有虚拟机参数的概览。点击<code>Create</code>以结束：</p><p><img src="/img/img/1-3-5.jpg" alt="/img/img"></p></li><li><p>新的虚拟机创建之后，我们将要安装Kali Linux。</p></li><li><p>在VirtualBox的主窗口，高亮Kali Linux，之后点击<code>Settings</code>（设置）按钮：</p><p><img src="/img/img/1-3-6.jpg" alt="/img/img"></p></li><li><p>现在基本的安装步骤就完成了，我们需要让你将下载的ISO文件用于虚拟光盘。这会为你节省烧录物理DVD的时间来完成这个安装。在<code>Settings</code>界面中，点击<code>Storage</code>（存储器）菜单选项：</p><p><img src="/img/img/1-3-7.jpg" alt="/img/img"></p></li><li><p>下一步，在<code>Storage Tree</code>（存储器树形图）下面，高亮<code>Empty</code>（空）磁盘图标，它在<code>IDE Controller</code>（IDE控制器）的下面。这户选择我们的虚拟CD/DVD ROM驱动器。在屏幕的最右边，在 <code>Attributes</code>底下，点击光盘图表。在上面弹出的菜单上选择你的<code>Choose a virtual CD/DVD disc file...</code>（Kali Linux ISO CD/DVD光盘文件）选项，并找到你的ISO。一旦你完成了这些步骤，点击OK按钮。</p><p><img src="/img/img/1-3-8.jpg" alt="/img/img"></p></li><li><p>点击Start（开始）按钮，之后点击里面的新窗口来进行安装。安装步骤在1.1节中已经包括了。</p><blockquote><p>安装VirtualBox 扩展包也允许我们通过添加USB2.0（EHCI）、VirtualBox RDP和 Intel PXE boot ROM的支持，来扩展虚拟机的功能。</p></blockquote></li></ol><h2 id="1-4-安装-VMware-Tools"><a href="#1-4-安装-VMware-Tools" class="headerlink" title="1.4 安装 VMware Tools"></a>1.4 安装 VMware Tools</h2><p>这个秘籍中，我们会展示如何使用 VMware Tools将Kali Linux安装在虚拟机中。</p><h3 id="准备-3"><a href="#准备-3" class="headerlink" title="准备"></a>准备</h3><p>需要满足下列要求：</p><ul><li>已经安装好的Kali Linux VMware 虚拟机。</li><li>网络连接。</li></ul><h3 id="操作步骤-3"><a href="#操作步骤-3" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始将Kali Linux 安装到 VMware上：</p><ol><li><p>打开你的虚拟机的访客操作系统并连接到互联网，之后打开<code>Terminal</code>（终端）窗口，并键入下列命令来准备核心资源：</p><p><code>prepare-kernel-sources</code></p><blockquote><p>这些命令假设你使用Linux或者Mac OS。你不需要在Windows下执行它们。</p></blockquote></li><li><p>在VMware Workstaion的菜单栏上，访问<code>VM | Install VMware Tools…</code>：</p><p><img src="/img/img/1-4-1.jpg" alt="/img/img"></p></li><li><p>将VMware Tools安装工具复制到临时目录下，之后将当前位置改为目标目录：</p><p><code>cp /media/VMware\ Tools/VMwareTools-8.8.2-590212.tar.gz /tmp/; cd /tmp</code></p><blockquote><p>根据你的VMware Tools来替换文件名：<code>VMwareTools--.tar.gz</code>。</p></blockquote></li><li><p>使用以下命令解压并安装：</p><p><code>tar zxpf VMwareTools-8.8.2-590212.tar.gz</code></p></li><li><p>进入VMware Tools的目录中，之后运行安装工具：</p><p><code>cd vmware-tools-distrib/ ./vmware-install.pl</code></p></li><li><p>按下回车键来接受每个配置询问的默认值；<code>vmware-config-tools.pl</code>脚本同上。</p></li><li><p>最后重启系统，工作就完成了。</p></li></ol><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>在第一步中，我们准备好了核心资源。之后，我们向访客操作系统插入了虚拟的 VMware Tools CD 。接着，我们创建了挂载点，并挂载虚拟CD。我们在临时目录中复制并解压了安装工具。最后我们保留默认配置来运行安装工具。</p><h2 id="1-5-修复启动画面"><a href="#1-5-修复启动画面" class="headerlink" title="1.5 修复启动画面"></a>1.5 修复启动画面</h2><p>我们首次启动新安装的Kali Linux系统时，会注意到启动画面消失了。为了手动修复它，我们需要解压<code>Initrd</code>，修改它，之后将它再次压缩。幸运的是，有一个由 Mati Aharoni（也称为“muts”，Kali Linux的创造者）编写的自动化bash脚本使这件事变得容易。</p><h3 id="操作步骤-4"><a href="#操作步骤-4" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>键入下列命令并且按下回车键来修复消失的启动画面：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">fix-splash</code></pre></div><h2 id="1-6-启动网络服务"><a href="#1-6-启动网络服务" class="headerlink" title="1.6 启动网络服务"></a>1.6 启动网络服务</h2><p>Kali Linux 自带了多种网络服务，它们在多种情况下可能很实用，并且默认是禁用的。这个秘籍中，我们会涉及到通过多种方法设置和启动每个服务的步骤。</p><h3 id="准备-4"><a href="#准备-4" class="headerlink" title="准备"></a>准备</h3><p>需要满足下列要求以继续：</p><ul><li>带有有效IP地址的网络连接。</li></ul><h3 id="操作步骤-5"><a href="#操作步骤-5" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始启动默认服务：</p><ol><li><p>启动Apache服务器：</p><p><code>service apache2 start</code></p><p>我们可以通过浏览本地地址来验证服务器是否打开。</p></li><li><p>为了启动SSH服务，首次需要生成SSH密钥：</p><p><code>sshd-generate</code></p></li><li><p>启动SSH服务器：</p><p><code>service ssh start</code></p></li><li><p>使用<code>netstat</code>命令来验证服务器是否开启并正在监听：</p><p><code>netstat -tpan | grep 22</code></p></li><li><p>启动FTP服务器：</p><p><code>service pure-ftpd start</code></p></li><li><p>使用下列命令来验证FTP服务器：</p><p><code>netstat -ant | grep 21</code></p><blockquote><p>你也可以使用<code>ps-ef | grep 21</code>命令。</p></blockquote></li><li><p>使用下列命令来停止服务：</p><p><code>service  stop</code></p><p>其中``代表我们希望停止的网络服务，例如：</p><p><code>service apache2 stop</code></p></li><li><p>使用下列命令来在开机时启用服务：</p><p><code>update-rc.d –f  defaults</code></p><p>其中``代表打算启动的网络服务，例如：</p><p><code>update-rc.d –f ssh defaults</code></p><blockquote><p>你也可以在Kali Linux中通过<code>Services</code>（服务）菜单来完成它。从<code>Start</code>（开始）菜单开始，访问<code>Kali Linux | Services</code>。</p></blockquote></li></ol><h2 id="1-7-设置无线网络"><a href="#1-7-设置无线网络" class="headerlink" title="1.7 设置无线网络"></a>1.7 设置无线网络</h2><p>最后，我们来到了这一章的最后一个秘籍。这个秘籍中，我们会了解在安全状态下的无线网络连接步骤，通过Wicd Network Manager和提供加密的细节。无线网络的设置允许我们以无线方式使用Kali Linux。在真实的、合乎道德的渗透测试中，我们可以不依赖于网线而自由地使用所有常规桌面。</p><h3 id="操作步骤-6"><a href="#操作步骤-6" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始设置无线网络：</p><ol><li><p>从桌面启动网络管理器，通过点击<code>Applications</code>（应用）菜单并且访问<code>Internet | Wicd Network Manager</code>，或者在终端窗口中键入下列命令：</p><p><code>wicd-gtk --no-tray</code></p></li><li><p>Wicd Network Manager会打开，并带有可用网络的列表：</p><p><img src="/img/img/1-7-1.jpg" alt="/img/img"></p></li><li><p>点击<code>Properties</code>（属性）按钮来设定网络细节。完成之后点击OK。</p><p><img src="/img/img/1-7-2.jpg" alt="/img/img"></p></li><li><p>最后，点击<code>Connect</code>（连接）按钮，就完成了。</p></li></ol><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><p>这个秘籍中，我们总结了无线网络的设置方式。这个秘籍以启动网络管理器，和连接到我们的路由器作为开始。</p>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
      <category>kaili</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kaili</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定制 Kali Linux</title>
    <link href="/2020/09/19/kali-2/"/>
    <url>/2020/09/19/kali-2/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章-定制-Kali-Linux"><a href="#第二章-定制-Kali-Linux" class="headerlink" title="第二章 定制 Kali Linux"></a>第二章 定制 Kali Linux</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这一章会向你介绍Kali的定制，便于你更好地利用它。我们会涉及到ATI和英伟达GPU技术的安装和配置，以及后面章节所需的额外工具。基于ATI和英伟达GPU的显卡允许我们使用它们的图像处理单元（GPU）来执行与CPU截然不同的操作。我们会以ProxyChains的安装和数字信息的加密来结束这一章。</p><h2 id="2-1-准备内核头文件"><a href="#2-1-准备内核头文件" class="headerlink" title="2.1 准备内核头文件"></a>2.1 准备内核头文件</h2><p>有时我们需要使用所需的内核头文件来编译代码。内核头文件是Linux内核的源文件。这个秘籍中，我们会解释准备内核头文件所需的步骤，便于以后使用。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>完成这个秘籍需要网络连接。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始准备内核头文件：</p><ol><li><p>我们首先通过执行下列命令升级发行版作为开始：</p><p><code>apt-get update</code></p><p><img src="/img/img/2-1-1.jpg" alt="img"></p></li><li><p>下面，我们需要再次使用<code>apt-get</code>来准备内核头文件，执行下列命令：</p><p><code>apt-get install linux-headers - </code>uname –r``</p><p><img src="/img/img/2-1-2.jpg" alt="img"></p></li><li><p>复制下列目录以及其中的全部内容：</p><p><code>cd /usr/src/linux cp -rf include/generated/* include/linux/</code></p></li><li><p>我们现在已准备好编译需要内核头文件的代码。</p></li></ol><h2 id="2-2-安装-Broadcom-驱动"><a href="#2-2-安装-Broadcom-驱动" class="headerlink" title="2.2 安装 Broadcom 驱动"></a>2.2 安装 Broadcom 驱动</h2><p>在这个秘籍中，我们将要安装 Broadcom 官方的Linux混合无线驱动。 使用Broadcom 无线USB适配器可以让我们在Kali上连接我们的无线USB接入点。对于这本书的其余秘籍，我们假设Broadcom 无线驱动已经安装。</p><h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><p>完成这个秘籍需要网络连接。</p><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始安装 Broadcom 驱动：</p><ol><li><p>打开终端窗口，从<a href="http://www.broadcom.com/support/802.11/linux_sta.php%E4%B8%8B%E8%BD%BD%E5%90%88%E9%80%82%E7%9A%84Broadcom">http://www.broadcom.com/support/802.11/linux_sta.php下载合适的Broadcom</a> 驱动：</p><p><code>cd /tmp/ wget http://www.broadcom.com/docs/linux_sta/hybrid-portsrc_ x86_64-v5_100_82_112.tar.gz</code></p><p><img src="/img/img/2-2-1.jpg" alt="img"></p></li><li><p>使用下列命令解压下载的驱动：</p><p><code>mkdir broadcom tar xvfz hybrid-portsrc_x86_64-v5_100_82_112.tar.gz –C /tmp/ broadcom</code></p></li><li><p>修改<code>wl_cfg80211.c</code>文件，由于5.100.82.112版本中有个bug，会阻止小于2.6.39内核版本上的编译：</p><p><code>vim /tmp/broadcom/src/wl/sys/wl_cfg80211.c</code></p><p>观察代码段的1814行：</p><p>```c</p><h1 id="if-LINUXVERSIONCODE-gt-KERNEL-VERSION-2-6-39"><a href="#if-LINUXVERSIONCODE-gt-KERNEL-VERSION-2-6-39" class="headerlink" title="if LINUXVERSIONCODE &gt; KERNEL_VERSION(2, 6, 39)"></a>if LINUX<em>VERSION</em>CODE &gt; KERNEL_VERSION(2, 6, 39)</h1><p>```</p><p>将其改为：</p><p>```c</p><h1 id="if-LINUXVERSIONCODE-gt-KERNEL-VERSION-2-6-39-1"><a href="#if-LINUXVERSIONCODE-gt-KERNEL-VERSION-2-6-39-1" class="headerlink" title="if LINUXVERSIONCODE &gt;= KERNEL_VERSION(2, 6, 39)"></a>if LINUX<em>VERSION</em>CODE &gt;= KERNEL_VERSION(2, 6, 39)</h1><p>```</p><p>并保存修改。</p></li><li><p>编译代码：</p><p><code>make clean make make install</code></p></li><li><p>更新依赖：</p><p><code>depmod -a</code></p></li><li><p>通过下列命令找到加载的模块：</p><p><code>lsmod | grep b43\|ssb\|bcma</code></p></li><li><p>通过执行下列命令移除发现的模块：</p><p><code>rmmod b43</code></p><p>其中``应为<code>b43</code>、<code>ssb</code>或<code>bcma</code>。</p></li><li><p>将模块加入黑名单，防止它们在系统启动中加载：</p><p><code>echo &quot;blacklist &quot; &gt;&gt; /etc/modprobe.d/blacklist.conf</code></p><p>其中``应为<code>b43</code>、<code>ssb</code>或<code>wl</code>。</p></li><li><p>最后，将新模块添加到Linux内核中，来使它成为启动进程的一部分：</p><p><code>modprobe wl</code></p></li></ol><h2 id="2-3-安装和配置ATI显卡驱动"><a href="#2-3-安装和配置ATI显卡驱动" class="headerlink" title="2.3 安装和配置ATI显卡驱动"></a>2.3 安装和配置ATI显卡驱动</h2><p>这个秘籍中，我们会详细讲解ATI显卡驱动的安装和配置，在此之前需要AMD Accelerated Parallel Processing (APP) SDK、OepnCL和CAL++。我们可以利用 ATI Stream技术的优势来运行计算密集型任务 – 它们通常运行在CPU上 – 使它们更快更高效地执行。更多ATI Stream技术相关的详细信息，请访问<a href="www.amd.com/stream">www.amd.com/stream</a>。</p><h3 id="准备-2"><a href="#准备-2" class="headerlink" title="准备"></a>准备</h3><p>需要网络连接来完成这个秘籍。同时在开始这个秘籍之前需要准备内核头文件，它在第一节有所涉及。</p><h3 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始安装和配置ATI驱动：</p><ol><li><p>下载系统所需的ATI显示驱动：</p><p><code>cd /tmp/ wget http://www2.ati.com/drivers/linux/amd-driver-installer-121-x86.x86_64.run</code></p><p>我们也可以从下面的网址下载显示驱动：[<a href="http://support/">http://support</a>. amd.com/us/gpudownload/Pages/index.aspx](<a href="http://support/">http://support</a>. amd.com/us/gpudownload/Pages/index.aspx)。</p><p><img src="/img/img/2-3-1.jpg" alt="img"></p></li><li><p>通过键入下列命令来开始安装：</p><p><code>sh amd-driver-installer-12-1-x86.x86_64.run</code></p><p><img src="/img/img/2-3-2.jpg" alt="img"></p></li><li><p>在安装完成之后，重启你的系统来使改变生效，并且避免不稳定。</p></li><li><p>为之后的步骤安装一些依赖：</p><p><code>apt-get install libroot-python-dev libboost-python-dev libboost1.40-all-dev cmake</code></p></li><li><p>下载并解压 AMD APP SDK，根据你的CPU架构：</p><p><code>wget http://developer.amd.com/Downloads/AMD-APP-SDK-v2.6-lnx64.tgz mkdir AMD-APP-SDK-v2.6-lnx64 tar zxvf AMD-APP-SDK-v2.6-lnx64.tgz –C /tmp/AMD-APP-SDK-v2.6-lnx64 cd AMD-APP-SDK-v2.6-lnx64</code></p></li><li><p>通过下列命令安装AMD APP SDK：</p><p><code>sh Install-AMD-APP.sh</code></p></li><li><p>在<code>.bashsrc</code>文件中设置ATI Stream的路径：</p><p><code>echo export ATISTREAMSDKROOT=/opt/AMDAPP/ &gt;&gt; ~/.bashrc source ~/.bashrc</code></p></li><li><p>下载并编译<code>calpp</code>：</p><p><code>cd /tmp/ svn co https://calpp.svn.sourceforge.net/svnroot/calpp calpp cd calpp/trunk cmake . make make install</code></p></li><li><p>下载并编译<code>pyrit</code>：</p><p><code>cd /tmp/ svn co http://pyrit.googlecode.com/svn/trunk/ pyrit_src cd pyrit_src/pyrit python setup.py build python setup.py install</code></p></li><li><p>构建并安装OpenCL：</p><p><code>cd /tmp/pyrit_src/cpyrit_opencl python setup.py build python setup.py install\</code></p></li><li><p>对<code>cpyrit_calpp</code>的安装做一些小修改：</p><p><code>cd /tmp/pyrit_source/cpyrit_calpp vi setup.py</code></p><p>找到下面这一行：</p><p><code>py VERSION = &#39;0.4.0-dev&#39;</code></p><p>把它改成：</p><p><code>py VERSION = &#39;0.4.1-dev&#39;</code></p><p>之后，找到下面这一行：</p><p><code>py CALPP_INC_DIRS.append(os.path.join(CALPP_INC_DIR, &#39;include&#39;))</code></p><p>把它改成：</p><p><code>py CALPP_INC_DIRS.append(os.path.join(CALPP_INC_DIR, &#39;include/CAL&#39;))</code></p></li><li><p>最后将ATI GPU模块添加到pyrit：</p><p><code>python setup.py build python setup.py install</code></p></li></ol><blockquote><p>为了展示可用的CAL++设备和CPU的核数，我们需要键入下列命令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">pyrit list_cores</code></pre></div><p>为了进行跑分，我们只需要键入：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">pyrit benchmark</code></pre></div></blockquote><h2 id="2-4-安装和配置英伟达显卡驱动"><a href="#2-4-安装和配置英伟达显卡驱动" class="headerlink" title="2.4 安装和配置英伟达显卡驱动"></a>2.4 安装和配置英伟达显卡驱动</h2><p>这个秘籍中，我们会拥抱CUDA，英伟达的并行计算架构。在CUDA工具包的安装之后，首先会安装英伟达开发者显示驱动。通过使用GPU的威力，这会带来计算性能的戏剧性提升，它们通常用于一些类似密码破解的场合。</p><blockquote><p>有关CUDA的更多信息，请浏览<a href="http://www.nvidia.com/object/cuda_home_new.html">他们的官方网站</a>。</p></blockquote><h3 id="准备-3"><a href="#准备-3" class="headerlink" title="准备"></a>准备</h3><p>需要网络连接来完成这个秘籍。</p><p>同时需要在开始之前准备内核头文件，这在第一节中有所涉及。</p><p>为了完成英伟达驱动的安装，需要关闭X会话。</p><h3 id="操作步骤-3"><a href="#操作步骤-3" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始安装和配置英伟达显卡驱动：</p><ol><li><p>下载英伟达开发者显示驱动，根据你的CPU架构：</p><p><code>cd /tmp/ wget http://developer.download.nvidia.com/compute/cuda/4_1/rel/ drivers/NVIDIA-Linux-x86_64-285.05.33.run</code></p><p><img src="/img/img/2-4-1.jpg" alt="img"></p></li><li><p>安装驱动：</p><p><code>chmod +x NVIDIA-Linux-x86_64-285.05.33.run ./NVIDIA-Linux-x86_64-285.05.33.run –kernel-source-path=&#39;/usr/src/ linux&#39;</code></p></li><li><p>下载CUDA工具包：</p><p><code>wget http://developer.download.nvidia.com/compute/cuda/4_1/rel/ toolkit/cudatoolkit_4.1.28_linux_64_ubuntu11.04.run</code></p></li><li><p>安装CUDA工具包到<code>/opt</code>：</p><p><code>chmod +x cudatoolkit_4.1.28_linux_64_ubuntu11.04.run ./cudatoolkit_4.1.28_linux_64_ubuntu11.04.runConfigure the environment variables required for nvcc to work: echo PATH=$PATH:/opt/cuda/bin &gt;&gt; ~/.bashrc echo LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/cuda/lib &gt;&gt; ~/.bashrc echo export PATH &gt;&gt; ~/.bashrc echo export LD_LIBRARY_PATH &gt;&gt; ~/.bashrc</code></p></li><li><p>运行以下命令来使变量生效：</p><p><code>source ~/.bashrc ldconfig</code></p></li><li><p>安装<code>pyrit</code>的依赖：</p><p><code>apt-get install libssl-dev python-dev python-scapy</code></p></li><li><p>下载并安装GPU增效工具<code>pyrit</code>：</p><p><code>svn co http://pyrit.googlecode.com/svn/trunk/ pyrit_src cd pyrit_src/pyrit python setup.py build python setup.py install</code></p></li><li><p>最后，将英伟达GPU模块添加到<code>pyrit</code>：</p><p><code>cd /tmp/pyrit_src/cpyrit_cuda python setup.py build python setup.py install</code></p></li></ol><blockquote><p>为了验证<code>nvcc</code>是否正确安装，我们需要键入下列命令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">nvcc -V</code></pre></div><p>为了进行跑分，我们只需要键入下列命令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">pyrit benchmark</code></pre></div></blockquote><h2 id="2-5-升级和配置额外的安全工具"><a href="#2-5-升级和配置额外的安全工具" class="headerlink" title="2.5 升级和配置额外的安全工具"></a>2.5 升级和配置额外的安全工具</h2><p>这个秘籍中，我们会涉及到升级Kali，以及配置一些额外的工具，它们对于之后的章节和秘籍十分实用。由于Kali的包在发布之间会不断升级，你很快就会发现比起之前在你的DVD中下载好的工具，又提供了一系列新的工具。我们会以升级来开始，之后获得Nessus的激活码，并以安装Squid来结束。</p><h3 id="操作步骤-4"><a href="#操作步骤-4" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始进行升级，以及配置额外的安全工具。</p><ol><li><p>使用仓库中最新的修改来更新本地的包索引：</p><p><code>apt-get update</code></p></li><li><p>升级现有的包：</p><p><code>apt-get upgrade</code></p></li><li><p>升级到最新版本（如果可用的话）：</p><p><code>apt-get dist-upgrade</code></p></li><li><p>获得Nessus的激活码，通过在[这里]( <a href="http://www.nessus.org/">http://www.nessus.org/</a> products/nessus/nessus-plugins/obtain-an-activation-code)注册。</p></li><li><p>通过执行下列命令来激活Nessus：</p><p><code>/opt/nessus/bin/nessus-fetch --register A60F-XXXX-XXXX-XXXX-0006</code></p><p>其中<code>A60F-XXXX-XXXX-XXXX-0006</code>应为你的激活码。</p></li><li><p>为Nessus Web界面创建账户：</p><p><code>/opt/nessus/sbin/nessus-adduser</code></p></li><li><p>为了启动Nessus服务器，我们只需要执行下列命令：</p><p><code>/etc/init.d/nessusd start</code></p></li><li><p>安装Squid：</p><p><code>apt-get install squid3</code></p></li><li><p>阻止Squid在启动时自动运行：</p><p><code>update-rc.d -f squid3 remove</code></p></li></ol><blockquote><p>为了在仓库中找到特定的包，我们可以在<code>apt-get update</code>之后使用下列命令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">apt-cache search </code></pre></div><p>其中``是包名称或者正则表达式。</p></blockquote><h2 id="2-6-配置ProxyChains"><a href="#2-6-配置ProxyChains" class="headerlink" title="2.6 配置ProxyChains"></a>2.6 配置ProxyChains</h2><p>这个章节中，我们会强制指定应用的网络连接使用用户定义的代理列表，来打破接受者和发送者之间的直接连接。</p><h3 id="操作步骤-5"><a href="#操作步骤-5" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>打开ProxyChains的配置文件：</p><p><code>vim /etc/proxychains.conf</code></p></li><li><p>解除我们打算使用的链接类型的注释，这里是<code>dynamic_chain</code>：</p><p><img src="/img/img/2-6-1.jpg" alt="img"></p></li><li><p>向列表中添加一些代理服务器：</p><p><img src="/img/img/2-6-2.jpg" alt="img"></p></li><li><p>使用我们的链式代理来解析目标主机：</p><p><code>proxyresolv www.targethost.com</code></p></li><li><p>现在可以在我们打算使用的应用上运行ProxyChains，例如<code>msfconsole</code>：</p><p><code>proxychains msfconsole</code></p></li></ol><h2 id="2-7-目录加密"><a href="#2-7-目录加密" class="headerlink" title="2.7 目录加密"></a>2.7 目录加密</h2><p>这一章的最后一个秘籍关于信息隐私。我们会使用TrueCrypt通过密钥来隐藏重要和私密的数字信息，远离公众的眼睛。</p><h3 id="操作步骤-6"><a href="#操作步骤-6" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>通过访问<code>Applications Menu | Kali | Forensics | Digital Anti Forensics | install truecrypt</code>来安装TrueCrypt。</p><p><img src="/img/img/2-7-1.jpg" alt="img"></p><p>点击<code>Install TrueCrypt</code>（安装TrueCrypt）并且遵循屏幕上的指导。</p></li><li><p>从<code>Applications Menu | Kali Linux | Forensics | Digital Anti Forensics | truecrypt</code>运行TrueCrypt，你会看到下面的窗口：</p><p><img src="/img/img/2-7-2.jpg" alt="img"></p></li><li><p>点击<code>Create Volume</code>（新建卷）来启动<code>TrueCrypt Volume Creation Wizard</code>（TrueCrypt卷创建向导）。</p></li><li><p>保留默认选项并点击<code>Next</code>。</p></li><li><p>选择<code>Standard TrueCrypt</code>（标准TrueCrypt）模式并点击<code>Next</code>。</p></li><li><p>点击<code>Select File…</code>（选择文件）按钮并为新的TrueCrypt卷指定名称和路径。完成后点击<code>Save</code>（保存）。</p><p><img src="/img/img/2-7-3.jpg" alt="img"></p></li><li><p>点击<code>Next</code>按钮并选择打算使用的加密和哈希算法。</p></li><li><p>在下个屏幕中，我们会为容器指定空间总量。</p></li><li><p>现在我们需要为我们的卷键入密码。点击<code>Next</code>。</p></li><li><p>选择文件系统类型。</p></li><li><p>按需选择<code>Cross-Platform Support</code>（跨平台支持）。</p></li><li><p>在下个屏幕中，向导会让我们在窗口内移动鼠标，来增加加密密钥的密码强度。完成后点击<code>Format</code>（格式化）按钮。</p></li><li><p>格式化会开始，完成时TrueCrypt的卷就创建好了。按下<code>OK</code>或<code>Exit</code>（退出）。</p></li><li><p>我们现在回到TrupCrypt窗口。</p></li><li><p>从列表中选择一个<code>Slot</code>（槽）来解密我们的卷，点击<code>Select File…</code>（选择文件），并打开我们创建的卷。</p></li><li><p>点击<code>Mount</code>（挂载）并键入我们的密码，完成后点击<code>OK</code>。</p><p><img src="/img/img/2-7-4.jpg" alt="img"></p></li><li><p>我们现在可以通过在槽上双击或通过挂载目录来访问卷，以及在里面保存文件。当我们完成之后，只需要点击<code>Dismount All</code>（解除所有挂载）。</p></li></ol><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>这个秘籍中，我们配置了 Truecrypt，创建了保护卷，之后挂载了它。这是个用于保护数据安全性的实用工具。</p>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
      <category>kaili</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kaili</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali高级测试环境</title>
    <link href="/2020/09/19/kali-3/"/>
    <url>/2020/09/19/kali-3/</url>
    
    <content type="html"><![CDATA[<h1 id="第三章-高级测试环境"><a href="#第三章-高级测试环境" class="headerlink" title="第三章 高级测试环境"></a>第三章 高级测试环境</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>既然我们已经了解了 Kali Linux 所包含的工具，现在我们要调查一些真实世界的场景。我们进行的许多攻击都有意在有漏洞的软件和系统上执行。但是，当你使用 Kali 攻击一个系统时，它不可能像我们当前的测试平台那样没有防护。</p><p>这一章中，我们会探索一些技巧，来建立起一些真实的测试环境。在当前的信息技术水平中，多数公司都使用平台即服务（PAAS）解决方案，云服务器主机，或者使用小型网络，它们由桌面、服务器和防火墙（单独）或防火墙和路由的组合组成。我们会建立这些环境，之后对它们发起攻击。</p><p>我们所有攻击的目的都是获取 root 级别的访问。</p><h2 id="3-1-熟悉-VirtualBox"><a href="#3-1-熟悉-VirtualBox" class="headerlink" title="3.1 熟悉 VirtualBox"></a>3.1 熟悉 VirtualBox</h2><p>在第一章（安装和启动Kali）中，我们简要谈多了 VirtualBox 的用法，便于在虚拟环境中安装 Kali Linux。VirtualBox 是 Oracle 的现有产品，并且作为应用运行在宿主操作系统上。它通过创建虚拟环境允许操作系统安装并运行。这个工具极其重要，可以提供靶机来测试你的 Kali Linux 技巧。</p><p>这一章中，我们会极大依赖VirtualBox，并且会修改它的配置来得到我们希望的网络配置类型。我们将这一节作为每个场景单元的起点，所以关键要熟悉这些步骤。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>需要因特网或内部网络的链接来完成这个模块。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们通过打开VirtualBox 来开始：</p><ol><li><p>启动VirtualBox ，并点击<code>New</code>来开启虚拟机向导：</p><p><img src="/img/img/3-1-1.jpg" alt="img"></p></li><li><p>点击<code>Next</code>按钮，输入虚拟机的名称，并选择 OS 类型和版本：这一章中我们会使用 Linux、Solaris 或 Windows 操作系统。选择合适的操作系统并点击<code>Next</code>按钮来继续：</p><p><img src="/img/img/3-1-2.jpg" alt="img"></p></li><li><p>选择基本内存（RAM）的总量，它们会分配给虚拟机。我们使用默认值。点击<code>Next</code>。</p></li><li><p>为新的虚拟机创建新的虚拟硬盘，点击<code>Next</code>按钮。</p><p><img src="/img/img/3-1-3.jpg" alt="img"></p></li><li><p>新的向导窗口会打开。保留默认的 VDI 文件类型，因为我们不打算使用其它可视化软件。</p></li><li><p>我们会在虚拟磁盘储存上保留默认选项。点击<code>Next</code>来继续。</p></li><li><p>设置虚拟磁盘文件位置和大小：</p><p><img src="/img/img/3-1-4.jpg" alt="img"></p></li><li><p>检查设置是否正确，并且点击<code>Create</code>按钮来开始创建虚拟磁盘文件。</p></li><li><p>我们现在回到前一个向导，展示了虚拟机参数的汇总。点击<code>Create</code>来结束：</p><p><img src="/img/img/3-1-5.jpg" alt="img"></p></li><li><p>创建新的虚拟机之后，我们准备好了安装操作系统，它刚刚在 VirtualBox中配置好。</p></li><li><p>在VirtualBox的主窗口中，选中我们刚刚创建的操作系统名称，之后点击<code>Settings</code>按钮：</p><p><img src="/img/img/3-1-6.jpg" alt="img"></p></li><li><p>既然基本的安装步骤已经完成了，我们现在使用下载的 ISO 文件作为虚拟光盘。这会节省你烧录物理 DVD 来完成安装的时间。在<code>Settings</code>界面，点击<code>Storage</code>菜单项：</p><p><img src="/img/img/3-1-7.jpg" alt="img"></p></li><li><p>之后，在<code>Storage Tree</code>下面，选中<code>Controller: IDE</code>下面的<code>Empty</code>光盘图标。这会选择我们的“虚拟” CD/DVD ROM 驱动。在屏幕的右边，<code>Attribute</code>下面，点击光盘图标。在弹出的菜单中，从列表中选择你的 ISO 文件。如果 ISO 文件没有出现，选择<code>Choose a virtual CD/DVD disc file...</code>选项并找到你的 ISO。一旦你完成了这些步骤，点击<code>OK</code>按钮。</p><p><img src="/img/img/3-1-8.jpg" alt="img"></p></li><li><p>点击<code>Start</code>按钮，之后点击内部的新窗口，并执行安装。安装步骤在这一章的“安装到硬盘”中有所涉及。</p></li></ol><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>这一章以创建新的VirtualBox虚拟实例来开始，之后我们选择了我们的操作系统，并设置内存和硬盘大小。之后，我们选择了 ISO 文件，之后将 ISO 插入我们的虚拟 CD/DVD 驱动器中。最后，我们启动了虚拟环境，便于安装操作系统。</p><p>在这一章的剩余部分中，我们会使用VirtualBox作为所选工具来建立不同的环境。</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>我们所执行的操作可能会让主机不稳定甚至崩溃。VirtualBox提供了杰出的工具来备份虚拟环境：</p><ol><li><p>在主窗口中，点击你打算备份的虚拟服务器：</p></li><li><p>右击虚拟服务器，点击<code>Clone</code>菜单项：</p><p><img src="/img/img/3-1-9.jpg" alt="img"></p></li><li><p>在克隆窗口中，为你的新虚拟服务器输入名称。</p><p><img src="/img/img/3-1-10.jpg" alt="img"></p></li><li><p>点击<code>Next</code>，在随后的界面中，选择<code>Linked clone</code>或<code>Full clone</code>，它们在下面展示：</p><ul><li><code>Full clone</code>：在完整克隆的模式中，会创建完全独立的虚拟机备份。</li><li><code>Linked clone</code>：在链接克隆的模式中，会截取快照来创建备份。但是，链接克隆依赖于原始文件的功能。这会降低链接克隆的性能。</li></ul><p><img src="/img/img/3-1-11.jpg" alt="img"></p></li><li><p>点击<code>Clone</code>并等待虚拟机克隆完成。</p><p><img src="/img/img/3-1-12.jpg" alt="img"></p></li></ol><h2 id="3-2-下载-Windows-靶机"><a href="#3-2-下载-Windows-靶机" class="headerlink" title="3.2 下载 Windows 靶机"></a>3.2 下载 Windows 靶机</h2><p>到目前为止，以及可见的未来中，微软的 Windows 系统都是许多个人和企业所选的操作系统。</p><p>幸运的是，微软提供了一种方法来获取测试操作系统。</p><h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><p>需要互联网或内部网络连接来完成这个模块。</p><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>下载 Windows 靶机的步骤如下所示：</p><ol><li><p>打开浏览器并访问 Microsoft Technet：<a href="http://technet.microsoft.com/en-us/ms376608">http://technet.microsoft.com/en-us/ms376608</a>。</p></li><li><p>在屏幕的右侧，点击<code>Downloads</code>链接：</p><p><img src="/img/img/3-2-1.jpg" alt="img"></p></li><li><p>在<code>Download</code>菜单项中，选择<code>Evaluate new products</code>。</p><p><img src="/img/img/3-2-2.jpg" alt="img"></p></li><li><p>在下一个界面中，你可以选择要下载的东西，取决于你想要测试的产品。推荐你选择 Windows Server 2012，Windows 8 和 Windows 7。</p><p><img src="/img/img/3-2-3.jpg" alt="img"></p></li><li><p>一旦你下载了 ISO，请遵循这一章“熟悉VirtualBox”秘籍中的指南。</p></li></ol><h2 id="3-3-下载-Linux-靶机"><a href="#3-3-下载-Linux-靶机" class="headerlink" title="3.3 下载 Linux 靶机"></a>3.3 下载 Linux 靶机</h2><p>对于多数的面向 Web 的服务器的部署，Linux 是一种备选的操作系统。与 Windows 先比，它的开销相对较低（主流发行版免费），这使它成为多数云主机、PAAS和服务器环境的理想操作系统。</p><p>这个秘籍中，我们会示例如何下载多种 Linux 发行版。</p><h3 id="准备-2"><a href="#准备-2" class="headerlink" title="准备"></a>准备</h3><p>需要互联网或内部网络连接来完成这个模块。</p><h3 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>下载 Linux 靶机的步骤如下所示：</p><ol><li><p>打开浏览器并访问 Distro Watch：<a href="http://www.distrowatch.com./">http://www.distrowatch.com。</a></p></li><li><p>你会看到超过 100 个 Linux 发行版的列表。推荐选择一个最小的发行版，而不是流行的版本（CentOS、Ubuntu、Fedora 和 Debian）。这个页面像下面这样：</p><p><img src="/img/img/3-3-1.jpg" alt="img"></p></li><li><p>一旦你下载了 ISO，请遵循这一章“熟悉VirtualBox”秘籍中的指南。</p></li></ol><h2 id="3-4-攻击-WordPress-和其它应用"><a href="#3-4-攻击-WordPress-和其它应用" class="headerlink" title="3.4 攻击 WordPress 和其它应用"></a>3.4 攻击 WordPress 和其它应用</h2><p>选择越来越多的公司在日常业务中使用 SAAS （软件及服务）工具。例如，公司普遍使用 WordPress作为网站的内容管理系统，或 Drupal 作为内部网络。在这些应用中定位漏洞的能力具有极大的价值。</p><p>收集被测试应用的一个很好的方式就是 [Turnkey Linux](<a href="http://www/">http://www</a>. turnkeylinux.org)。这个秘籍中，我们会下载流行的 WordPress Turnkey Linux 发行版。</p><h3 id="准备-3"><a href="#准备-3" class="headerlink" title="准备"></a>准备</h3><p>需要互联网或内部网络连接来完成这个模块。</p><h3 id="操作步骤-3"><a href="#操作步骤-3" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>攻击 WordPress 应用的步骤如下所示：</p><ol><li><p>打开浏览器并访问 Turnkey Linux 的主页：&lt;<a href="http://www/">http://www</a>. turnkeylinux.org&gt;。主页如图所示：</p><p><img src="/img/img/3-4-1.jpg" alt="img"></p></li><li><p>有许多应用在这里列出，我推荐都试试它们，便于你发现漏洞并提升这方面的技能。但是，对于这个秘籍，我们只测试 WordPress。在<code>Instant Search</code>框中，输入<code>WordPress</code>。</p><p><img src="/img/img/3-4-2.jpg" alt="img"></p></li><li><p>在 WordPress 下载页面中，选择 ISO 镜像。下载完成后，请遵循这一章“熟悉VirtualBox”秘籍中的指南：</p><p><img src="/img/img/3-4-3.jpg" alt="img"></p></li></ol><h3 id="更多-1"><a href="#更多-1" class="headerlink" title="更多"></a>更多</h3><p>既然我们加载的 WordPress 虚拟机，我们可以使用 WPScan 来攻击它了。WPScan 是个黑盒的 WordPress 安全扫描器，允许用户发现 WordPress 上的漏洞。</p><p>WPScan 接受多种参数，包括：</p><ul><li><code>-u &lt;目标域名或 url&gt;</code>：参数<code>u</code>允许你指定目标的域名。</li><li><code>-f</code>：参数<code>f</code>允许你强制检查WordPress是否安装。</li><li><code>-e[选项]</code>：参数<code>e</code>允许你设置枚举。</li></ul><p>让我们开始使用 WPScan。</p><blockquote><p>确保你的 WordPress虚拟机和 Kali Linux 虚拟机都开着，并使用<code>VirtualBox Host Only Adapter</code>网络设置。</p></blockquote><ol><li><p>在 Kali Linux 虚拟机中，加载器 WPScan 帮助文件：</p><p><code>wpscan -h</code></p><p>页面会像下面这样：</p><p><img src="/img/img/3-4-4.jpg" alt="img"></p></li><li><p>让我们对WordPress虚拟机执行基本的 WPScan测试。这里，我们靶机的IP地址是<code>192.168.56.102</code>。</p><p><code>wpscan –u 192.168.56.102</code></p></li><li><p>现在，让我们通过执行下列命令枚举用户名列表：</p><p><code>wpscan –u 192.186.56.102 –e u vp</code></p><p>页面会像下面这样：</p><p><img src="/img/img/3-4-5.jpg" alt="img"></p></li><li><p>最后，我们通过使用<code>–wordlist &lt;文件路径&gt;</code>选项来提供单词列表：</p><p><code>wpscan –u 192.168.56.102 -e u --wordlist /root/wordlist.txt</code></p><p>页面会像下面这样：</p><p><img src="/img/img/3-4-6.jpg" alt="img"></p></li><li><p>这就结束了。我们已经成功获取了 WordPress 的密码。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
      <category>kaili</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kaili</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali 无线攻击</title>
    <link href="/2020/09/19/kali-8/"/>
    <url>/2020/09/19/kali-8/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这一章中，我们要探索一些攻击密码来获得用户账户的方式。密码破解是所有渗透测试者都需要执行的任务。本质上，任何系统的最不安全的部分就是由用户提交的密码。无论密码策略如何，人们必然讨厌输入强密码，或者时常更新它们。这会使它们易于成为黑客的目标。</p><h2 id="8-1-在线密码攻击"><a href="#8-1-在线密码攻击" class="headerlink" title="8.1 在线密码攻击"></a>8.1 在线密码攻击</h2><p>这个秘籍中我们会使用 Hydra 密码破解器。有时候我们有机会来物理攻击基于 Windows 的计算机，直接获取安全账户管理器（SAM）。但是，我们也有时不能这样做，所以这是在线密码攻击具有优势的情况。</p><p>Hydra 支持许多协议，包括（但不仅限于）FTP、HTTP、HTTPS、MySQL、MSSQL、Oracle、Cisco、IMAP、VNC 和更多的协议。需要注意的是，由于这种攻击可能会产生噪声，这会增加你被侦测到的可能。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>需要内部网络或互联网的链接，也需要一台用作受害者的计算机。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始破解在线密码。</p><ol><li><p>在开始菜单中，选择<code>Applications | Kali Linux | Password Attacks | Online Attacks | hydra-gtk</code>。</p><p><img src="/img/img/8-1-1.jpg" alt="/img/img"></p></li><li><p>既然我们已经把 Hydra 打开了，我们需要设置我们的单词列表。点击<code>Passwords</code>（密码）标签页。我们需要使用用户名列表和密码列表。输入你的用户名和密码列表的位置。同时选择<code>Loop around users</code>（循环使用用户名）和<code>Try empty password</code>（尝试空密码）。</p><ul><li>用户名列表：<code>/usr/share/wfuzz/wordlist/fuzzdb/wordlistsuser-passwd/names/nameslist.txt</code></li><li>密码列表：<code>/usr/share/wfuzz/wordlist/fuzzdb/wordlistsuser-passwd/passwds/john.txt</code></li></ul><blockquote><p>你可以使用的快捷方式是，点击单词列表框来打开文件系统窗口。</p></blockquote><p><img src="/img/img/8-1-2.jpg" alt="/img/img"></p></li><li><p>下面，我们要做一些调整。在<code>Performance Options</code>（执行选项）下面，我们将任务数量从 16 设置为 2。原因是我们不打算让这么多进程运行，这样会使服务器崩溃。虽然它是可选的，我们也希望选择<code>Exit after first found pair</code>（在首次发现匹配之后退出）选项。</p><p><img src="/img/img/8-1-3.jpg" alt="/img/img"></p></li><li><p>最后，我们要设置我们的目标。点击<code>Target</code>（目标）标签页并设置我们的目标和协议。这里，我们使用 Metasploitable 主机（<code>192.168.10.111</code>）的 MySQL 端口。</p><p><img src="/img/img/8-1-4.jpg" alt="/img/img"></p></li><li><p>最后我们点击<code>Start</code>（开始）标签页的<code>Start</code>按钮来启动攻击。</p><p><img src="/img/img/8-1-5.jpg" alt="/img/img"></p></li></ol><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>这个秘籍中，我们使用 Hydra 来对目标执行字典攻击。Hydra 允许我们指定目标，并且使用用户名和密码列表。它会通过使用来自两个列表的不同用户名和密码组合来爆破密码。</p><h2 id="8-2-破解-HTTP-密码"><a href="#8-2-破解-HTTP-密码" class="headerlink" title="8.2 破解 HTTP 密码"></a>8.2 破解 HTTP 密码</h2><p>这个秘籍中，我们将要使用 Hydra 密码破解器来破解 HTTP 密码。网站和 Web 应用的访问通常由用户名和密码组合来控制。就像任何密码类型那样，用户通常会输入弱密码。</p><h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><p>需要内部网络或互联网的链接，也需要一台用作受害者的计算机。</p><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始破解 HTTP 密码。</p><ol><li><p>在开始菜单中，选择<code>Applications | Kali Linux | Password Attacks | Online Attacks | hydra-gtk</code>。</p><p><img src="/img/img/8-2-1.jpg" alt="/img/img"></p></li><li><p>既然我们已经把 Hydra 打开了，我们需要设置我们的单词列表。点击<code>Passwords</code>（密码）标签页。我们需要使用用户名列表和密码列表。输入你的用户名和密码列表的位置。同时选择<code>Loop around users</code>（循环使用用户名）和<code>Try empty password</code>（尝试空密码）。</p><ul><li>用户名列表：<code>/usr/share/wfuzz/wordlist/fuzzdb/wordlistsuser-passwd/names/nameslist.txt</code></li><li>密码列表：<code>/usr/share/wfuzz/wordlist/fuzzdb/wordlistsuser-passwd/passwds/john.txt</code></li></ul><blockquote><p>你可以使用的快捷方式是，点击单词列表框来打开文件系统窗口。</p></blockquote><p><img src="/img/img/8-2-2.jpg" alt="/img/img"></p></li><li><p>下面，我们要做一些调整。在<code>Performance Options</code>（执行选项）下面，我们将任务数量从 16 设置为 2。原因是我们不打算让这么多进程运行，这样会使服务器崩溃。虽然它是可选的，我们也希望选择<code>Exit after first found pair</code>（在首次发现匹配之后退出）选项。</p><p><img src="/img/img/8-2-3.jpg" alt="/img/img"></p></li><li><p>最后，我们要设置我们的目标。点击<code>Target</code>（目标）标签页并设置我们的目标和协议。这里，我们使用 Metasploitable 主机（<code>192.168.10.111</code>）的 HTTP 端口。</p><p><img src="/img/img/8-2-4.jpg" alt="/img/img"></p></li><li><p>最后我们点击<code>Start</code>（开始）标签页的<code>Start</code>按钮来启动攻击。</p><p><img src="/img/img/8-2-5.jpg" alt="/img/img"></p></li></ol><h2 id="8-3-获得路由访问"><a href="#8-3-获得路由访问" class="headerlink" title="8.3 获得路由访问"></a>8.3 获得路由访问</h2><p>这个秘籍中，我们会使用 Medusa 来进行爆破攻击。</p><p>当今，我们处于网络社会之中。随着联网视频游戏系统的诞生，多数家庭拥有数台计算机，并且小型业务以创纪录的趋势增长。路由器也成为了网络连接的基石。然而，富有经验的网络管理员的数量并没有增长，以保护这些路由器，使得许多这种路由器易于被攻击。</p><h3 id="准备-2"><a href="#准备-2" class="headerlink" title="准备"></a>准备</h3><p>需要连接到互联网或内部网络的计算机。也需要可用的路由器。</p><h3 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>在开始菜单中，访问<code>Applications | Kali Linux | Password Attacks | Online Attacks | medusa</code>。当 Medusa 启动后，它会加载<code>help</code>（帮助）文件。</p><p><img src="/img/img/8-3-1.jpg" alt="/img/img"></p></li><li><p>我们现在已选定的选项来云顶 Medusa。</p><p><code>medusa –M http -h 192.168.10.1 -u admin -P /usr/share/wfuzz/ wordlist/fuzzdb/wordlists-user-passwd/passwds/john.txt -e ns -n 80 -F</code></p><ul><li><code>-M http</code>允许我们指定模块。这里，我们选择了 HTTP 模块。</li><li><code>-h 192.168.10.1</code>允许我们指定主机。这里，我们选择了<code>192.168.10.1</code>（路由的 IP 地址）。</li><li><code>-u admin</code>允许我们指定用户。这里我们选择了<code>admin</code>。</li><li><code>-P [location of password list]</code>允许我们指定密码列表的位置。</li><li><code>-e ns</code>允许我们指定额外的密码检查。<code>ns</code>变量允许我们使用用户名作为密码，并且使用空密码。</li><li><code>-n 80</code>允许我们指定端口号码。这里我们选择了<code>80</code>。</li><li><code>-F</code>允许我们在成功找到用户名密码组合之后停止爆破。</li></ul><p><img src="/img/img/8-3-2.jpg" alt="/img/img"></p></li><li><p>Medusa 会运行，并尝试所有用户名和密码组合，直到某次成功。</p></li></ol><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><p>这个秘籍中，我们使用 Medusa 来爆破目标路由器的密码。能够这样做的好处就是，一旦你能够访问路由器，你就可以更新它的设置，便于你以后再访问它，或者甚至是重定向发送给它的流量来改变你选择的位置。</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>你也可以直接从命令行运行 Medusa，通过键入<code>medusa</code>命令。</p><p>你也可以传入其它选项给 Medusa，取决于你的情况。细节请参见帮助文档，通过在终端窗口仅仅键入<code>medusa</code>来显示。</p><p><strong>模块类型</strong></p><p>下面是我们可以用于 Medusa 的模块列表：</p><ul><li>AFP</li><li>CVS</li><li>FTP</li><li>HTTP</li><li>IMAP</li><li>MS-SQL</li><li>MySQL</li><li>NetWare</li><li>NNTP</li><li>PCAnywhere</li><li>Pop3</li><li>PostgreSQL</li><li>REXEC</li><li>RLOGIN</li><li>RSH</li><li>SMBNT</li><li>SMTP-AUTH</li><li>SMTp-VRFY</li><li>SNMP</li><li>SSHv2</li><li>Subversion</li><li>Telnet</li><li>VMware Authentication</li><li>VNC</li><li>Generic Wrapper</li><li>Web form</li></ul><h2 id="8-4-密码分析"><a href="#8-4-密码分析" class="headerlink" title="8.4 密码分析"></a>8.4 密码分析</h2><p>这个秘籍中，我们会学到如何在密码攻击之前分析密码。密码分析的目的是允许我们通过收集目标机器、业务以及其它的信息来得到更小的单词列表。在我们的教程中，我们会使用 Ettercap 和 它的 ARP 毒化功能来嗅探流量。</p><h3 id="准备-3"><a href="#准备-3" class="headerlink" title="准备"></a>准备</h3><p>这个秘籍需要局域网的连接。</p><h3 id="操作步骤-3"><a href="#操作步骤-3" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们启动 Ettercap 来进行密码分析。</p><ol><li><p>我们以配置 Ettercap 来开始这个秘籍。首先，我们找到它的配置文件并用 VIM 编辑它。</p><p><code>locate etter.conf vi /etc/etterconf</code></p><p>要注意，你的位置可能不同。</p></li><li><p>将<code>ec_uid</code>和<code>ec_gid</code>改为<code>0</code>。</p><p><img src="/img/img/8-4-1.jpg" alt="/img/img"></p></li><li><p>下面我们需要取消下面的 IPTABLES 行的注释。它在靠近文件末尾的<code>LINUX</code>一节。</p><p><img src="/img/img/8-4-2.jpg" alt="/img/img"></p></li><li><p>现在，我们将要启动 Ettercap。使用<code>-G</code>选项，加载图形化界面（GUI）。</p><p><img src="/img/img/8-4-3.jpg" alt="/img/img"></p></li><li><p>我们开启统一嗅探。你可以按下<code>Shift + U</code>或者访问菜单栏中的<code>Sniff | Unified sniffing...</code>。</p><p><img src="/img/img/8-4-4.jpg" alt="/img/img"></p></li><li><p>选择网络接口。</p><p><img src="/img/img/8-4-5.jpg" alt="/img/img"></p></li><li><p>下面，我们开始<code>Scan for hosts</code>（扫描主机），这可以通过按下<code>Ctrl + S</code>或访问菜单栏的<code>Hosts | Scan for hosts</code>来完成。</p><p><img src="/img/img/8-4-6.jpg" alt="/img/img"></p></li><li><p>现在我们能够让 Ettercap 开始嗅探了。你可以按下<code>Ctrl + W</code>或访问菜单栏的<code>Start | Start Sniffing</code>（开始嗅探）。</p><p><img src="/img/img/8-4-7.jpg" alt="/img/img"></p></li><li><p>最后，我们开始进行 ARP 毒化。访问菜单栏的<code>Mitm | Arp poisoning</code>（ARP 毒化）。</p><p><img src="/img/img/8-4-8.jpg" alt="/img/img"></p></li><li><p>在出现的窗口中，选中<code>Sniff remote connections</code>（嗅探远程连接）的选项。</p><p><img src="/img/img/8-4-9.jpg" alt="/img/img"></p></li><li><p>取决于网络情况，我们会看到信息。</p><p><img src="/img/img/8-4-10.jpg" alt="/img/img"></p></li><li><p>一旦我们找到了我们想找的信息（用户名和密码）。我们会关闭 Ettercap。你可以按下<code>Ctrl + E</code>或者访问菜单栏的<code>Start | Stop sniffing</code>（停止嗅探）来完成。</p><p><img src="/img/img/8-4-11.jpg" alt="/img/img"></p></li><li><p>现在我们需要关闭 ARP 毒化来使网络恢复正常。</p><p><img src="/img/img/8-4-12.jpg" alt="/img/img"></p></li></ol><h3 id="工作原理-2"><a href="#工作原理-2" class="headerlink" title="工作原理"></a>工作原理</h3><p>这个秘籍中，我们使用 Ettercap 来毒化网络并偷取网络上的用户名和密码。我们以寻找和修改 Ettercap 的配置文件来开始。之后我们启动了 Ettercap 并使用 ARP 毒化执行中间人（MITM）攻击。由于流量被重定向到我们的主机，当用户名和密码在网络上传播时，我们就能够看到它们。</p><h3 id="更多-1"><a href="#更多-1" class="headerlink" title="更多"></a>更多</h3><p>我们也可以使用 Metasploit 来分析用户名和面。我们会通过使用搜索邮件收集器模块来执行它。</p><ol><li><p>打开终端窗口并启动 MSFCONSOLE：</p><p><code>msfconsole</code></p></li><li><p>搜索邮件收集器；</p><p><code>search email collector</code></p><p><img src="/img/img/8-4-13.jpg" alt="/img/img"></p></li><li><p>键入下列命令来使用搜索邮件收集器模块：</p><p><code>use auxiliary/gather/search_email_collector</code></p></li><li><p>展示该模块可用的选项：</p><p><code>show options</code></p><p><img src="/img/img/8-4-14.jpg" alt="/img/img"></p></li><li><p>下面我们设置域名。如果不想被有关部门查水表的话，请小心选择域名。</p></li><li><p>将域名设为你希望的域名：</p><p><code>set domain gmail.com</code></p></li><li><p>设置输入文件。这并不是必需的。如果你打算运行多个攻击，或打算稍后也能运行某个攻击，推荐设置它。</p><p><code>set outfile /root/Desktop/fromwillie.txt</code></p><p><img src="/img/img/8-4-15.jpg" alt="/img/img"></p></li><li><p>最后，我们开始攻击。</p><p><code>run</code></p><p><img src="/img/img/8-4-16.jpg" alt="/img/img"></p></li></ol><h2 id="8-5-使用-John-the-Ripper-破解-Windows-密码"><a href="#8-5-使用-John-the-Ripper-破解-Windows-密码" class="headerlink" title="8.5 使用 John the Ripper 破解 Windows 密码"></a>8.5 使用 John the Ripper 破解 Windows 密码</h2><p>这个秘籍中，我们会使用 John the Ripper 来破解 Windows 安全访问管理器（SAM）文件。SAM文件储存了目标系统用户的用户名和密码的哈希。出于安全因素，SAM文件使用授权来保护，并且不能在 Windows 系统运行中直接手动打开或复制。</p><h3 id="准备-4"><a href="#准备-4" class="headerlink" title="准备"></a>准备</h3><p>你将会需要访问 SAM 文件。</p><p>这个秘籍中，我们假设你能够访问某台 Windows 主机。</p><h3 id="操作步骤-4"><a href="#操作步骤-4" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始使用 John the Ripper 破解 Windows SAM 文件。我们假设你能够访问某台 Windows 主机，通过远程入侵，或者物理接触，并且能够通过 USB 或 DVD 驱动器启动 Kali Linux。</p><ol><li><p>看看你想挂载哪个硬盘：</p><p><code>Fdisk -l</code></p></li><li><p>挂载该硬盘，并将<code>target</code>设为它的挂载点。</p><p><code>mount /dev/sda1 /target/</code></p></li><li><p>将目录改为 Windows SAM 文件的位置：</p><p><code>cd /target/windows/system32/config</code></p></li><li><p>列出目录中所有内容。</p><p><code>ls –al</code></p></li><li><p>使用 SamDump2 来提取哈希，并将文件放到你的 root 用户目录中的一个叫做<code>hashes</code>的文件夹中。</p><p><code>samdump2 system SAM &gt; /root/hashes/hash.txt</code></p></li><li><p>将目录改为 John the Ripper 所在目录。</p></li><li><p>运行 John the Ripper：</p><p><code>./john /root/hashes/hash.txt ./john /root/hashes/hash.txt–f:nt (If attacking a file on a NTFS System)</code></p></li></ol><h2 id="8-6-字典攻击"><a href="#8-6-字典攻击" class="headerlink" title="8.6 字典攻击"></a>8.6 字典攻击</h2><p>这个秘籍中，我们会进行字典或单词列表的攻击。字典攻击使用事先准备的密码集合，并尝试使用单词列表爆破与指定用户匹配的密码。所生成的字典通常由三种类型：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">+   只有用户名：列表只含有用户名。+   只有密码：列表只含有密码。+   用户名和密码：列表含有生成的用户名和密码。</code></pre></div><p>出于演示目的，我们使用 Crucnch 来生成我们自己的密码字典。</p><h3 id="准备-5"><a href="#准备-5" class="headerlink" title="准备"></a>准备</h3><p>需要在 Kali 上安装 Crunch。</p><h3 id="操作步骤-5"><a href="#操作步骤-5" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>Kali 的好处是已经安装了 Crunch，不像 BackTrack。</p><ol><li><p>打开终端窗口，并输入<code>crunch</code>命令来查看 Crunch 的帮助文件。</p><p><code>crunch</code></p><p><img src="/img/img/8-6-1.jpg" alt="/img/img"></p></li><li><p>使用 Crunch 生成密码的基本语法是，<code>[minimum length] [maximum length] [character set] [options]</code>。</p></li><li><p>Crunch 拥有几种备选选项。一些常用的如下：</p><ul><li><code>-o</code>：这个选项允许你指定输出列表的文件名称和位置、</li><li><code>-b</code>：这个选项允许你指定每个文件的最大字节数。大小可以以 KB/MB/GB 来指定，并且必须和<code>-o START</code>触发器一起使用。</li><li><code>-t</code>：这个选项允许你指定所使用的模式。</li><li><code>-l</code>：在使用<code>-t</code>选项时，这个选项允许你将一些字符标识为占位符（<code>@</code>，<code>%</code>，<code>^</code>）。</li></ul></li><li><p>下面我们执行命令来在桌面上创建密码列表，它最少 8 个字母，最大 10 个字符，并且使用字符集<code>ABCDEFGabcdefg0123456789</code>。</p><p><code>crunch 8 10 ABCDEFGabcdefg0123456789 –o /root/Desktop/ generatedCrunch.txt</code></p><p><img src="/img/img/8-6-2.jpg" alt="/img/img"></p></li><li><p>一旦生成了文件，我们使用 Nano 来打开文件：</p><p><code>nano /root/Desktop/generatedCrunch.txt</code></p></li></ol><h3 id="工作原理-3"><a href="#工作原理-3" class="headerlink" title="工作原理"></a>工作原理</h3><p>这个秘籍中我们使用了 Crunch 来生成密码字典列表。</p><h2 id="8-7-使用彩虹表"><a href="#8-7-使用彩虹表" class="headerlink" title="8.7 使用彩虹表"></a>8.7 使用彩虹表</h2><p>这个秘籍中我们会学到如何在 Kali 中使用彩虹表。彩虹表是特殊字典表，它使用哈希值代替了标准的字典密码来完成攻击。出于演示目的，我们使用 RainbowCrack 来生成彩虹表。</p><h3 id="操作步骤-6"><a href="#操作步骤-6" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>打开终端窗口并将目录改为<code>rtgen</code>的目录：</p><p><code>cd /usr/share/rainbowcrack/</code></p><p><img src="/img/img/8-7-1.jpg" alt="/img/img"></p></li><li><p>下面我们要启动<code>rtgen</code>来生成基于 MD5 的彩虹表。</p><p><code>./rtgen md5 loweralpha-numeric 1 5 0 3800 33554432 0</code></p><p><img src="/img/img/8-7-2.jpg" alt="/img/img"></p></li><li><p>一旦彩虹表生成完毕，你的目录会包含<code>.rt</code>文件。这取决于用于生成哈希的处理器数量，大约需要 2~7 个小时。</p></li><li><p>为了开始破解密码，我们使用<code>rtsort</code>程序对彩虹表排序，使其更加易于使用。</p></li></ol><h3 id="工作原理-4"><a href="#工作原理-4" class="headerlink" title="工作原理"></a>工作原理</h3><p>这个秘籍中，我们使用了 RainbowCrack 攻击来生成、排序和破解 MD5 密码。RainbowCrack 能够使用彩虹表破解哈希，基于一些预先准备的哈希值。我们以使用小写字母值生成 MD5 彩虹表来开始。在秘籍的末尾，我们成功创建了彩虹表，并使用它来破解哈希文件。</p><h2 id="8-8-使用英伟达统一计算设备架构（CUDA）"><a href="#8-8-使用英伟达统一计算设备架构（CUDA）" class="headerlink" title="8.8 使用英伟达统一计算设备架构（CUDA）"></a>8.8 使用英伟达统一计算设备架构（CUDA）</h2><p>这个秘籍中，我们会使用英伟达统一计算设备架构（CUDA）来破解密码哈希。CUDA 是一个并行计算平台，它通过利用 GPU 的能力来提升计算性能。随着时间的流逝，GPU 的处理能力有了戏剧性的提升，这让我们能够将它用于计算目的。出于演示目的，我们使用 CudaHashcat-plus 来破解密码。</p><h3 id="准备-6"><a href="#准备-6" class="headerlink" title="准备"></a>准备</h3><p>需要 CUDA 所支持的显卡来完成这个秘籍。</p><h3 id="操作步骤-7"><a href="#操作步骤-7" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>打开终端窗口并将目录改为 OclHashcat-plus 所在目录。</p><p><code>cd /usr/share/oclhashcat-plus</code></p><p><img src="/img/img/8-8-1.jpg" alt="/img/img"></p></li><li><p>执行下列命令来启动 CudaHashcat-plus 的帮助文件：</p><p><code>./cudaHashcat-plus.bin –help</code></p></li><li><p>运行 CudaHashcat 的语法是<code>cudaHashcat-plus.bin [options] hash [mask]</code>。</p><blockquote><p>使用 OclHashcat 的重点之一是理解它的字符集结构。</p></blockquote></li><li><p>在我们开始攻击之前，让我们先看看一些可用的攻击向量。CudaHashcat 在攻击中使用左右掩码。密码的字符按照掩码划分，并且被均分为左和右掩码。对于每个掩码，你可以为其指定字典或字符集。出于我们的目的，我们会使用定制的字符集。</p></li><li><p>为了指定自定义字符集，我们使用<code>–1</code>选项。我们可以设置任意多的自定义字符集，只要为它们指定一个数值（<code>1-n</code>）。每个自定义字符都由问号（<code>?</code>）来表示，并且随后是字符类型。可用的选择是：</p><ul><li><code>d</code>指定数字（0~9）</li><li><code>l</code>指定小写字母</li><li><code>u</code>指定大写字母</li><li><code>s</code>指定特殊字符</li><li><code>1-n</code>指定用做占位符的自定义字符集。</li></ul></li><li><p>这样将它们组合起来，我们就指定了一个自定义字符集，它包括特殊字符（<code>s</code>），大写字母（<code>u</code>），小写字母（<code>l</code>）和数字（<code>d</code>），生成长度为 8 的密码。我们打算指定叫做<code>attackfile</code>的哈希表。</p><p><code>./cudaHashcat-plus.bin attackfile -1 ?l?u?d?s ?1?1?1?1 ?1?1?1?1</code></p></li><li><p>我们可以将这个命令这样拆分：</p><ul><li><code>./cudaHashcat-plus.bin</code>调用了 CudaHashcat 。</li><li><code>attackfile</code>是我们的攻击文件。</li><li><code>-1 ?l?u?d?</code>指定了自定义字符集<code>1</code>，它包含小写字母、大写字母、数字和特殊字符。</li><li><code>?1?1?1?1</code>是使用字符集<code>1</code>的左掩码。</li><li><code>?1?1?1?1</code>是使用字符集<code>1</code>的右掩码。</li></ul><p>这就结束了。</p></li></ol><h2 id="8-9-使用-ATI-Stream"><a href="#8-9-使用-ATI-Stream" class="headerlink" title="8.9 使用 ATI Stream"></a>8.9 使用 ATI Stream</h2><p>这个秘籍中，我们会使用 ATI Stream 来破解密码哈希。ATI Stream 类似于 CUDA，因为它是一个并行计算平台，它可以通过利用 GPU 的能力来提升计算性能。随着时间的流逝，GPU 的处理能力有了戏剧性的提升，这让我们能够将它用于计算目的。出于演示目的，我们使用 OclHashcat-plus 来破解密码。OclHashcat 有两种版本：plus 和 lite。两个都包含在 Kali 中。</p><h3 id="准备-7"><a href="#准备-7" class="headerlink" title="准备"></a>准备</h3><p>需要支持 ATI Stream 的显卡来完成这个秘籍。</p><h3 id="操作步骤-8"><a href="#操作步骤-8" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>让我们开始使用 OclHashcat-plus。</p><ol><li><p>打开终端窗口并将目录改为 OclHashcat-plus 所在目录。</p><p><code>cd /usr/share/oclhashcat-plus</code></p><p><img src="/img/img/8-9-1.jpg" alt="/img/img"></p></li><li><p>执行下列命令来启动 OclHashcat-plus 的帮助文件：</p><p><code>./oclHashcat-plus.bin –help</code></p></li><li><p>运行 OclHashcat 的语法是<code>oclHashcat-plus.bin [options] hash [mask]</code>。</p><blockquote><p>使用 OclHashcat 的重点之一是理解它的字符集结构。</p></blockquote></li><li><p>在我们开始攻击之前，让我们先看看一些可用的攻击向量。OclHashcat 在攻击中使用左右掩码。密码的字符按照掩码划分，并且被均分为左和右掩码。对于每个掩码，你可以为其指定字典或字符集。出于我们的目的，我们会使用定制的字符集。</p></li><li><p>为了指定自定义字符集，我们使用<code>–1</code>选项。我们可以设置任意多的自定义字符集，只要为它们指定一个数值（<code>1-n</code>）。每个自定义字符都由问号（<code>?</code>）来表示，并且随后是字符类型。可用的选择是：</p><ul><li><code>d</code>指定数字（0~9）</li><li><code>l</code>指定小写字母</li><li><code>u</code>指定大写字母</li><li><code>s</code>指定特殊字符</li><li><code>1-n</code>指定用做占位符的自定义字符集。</li></ul></li><li><p>这样将它们组合起来，我们就指定了一个自定义字符集，它包括特殊字符（<code>s</code>），大写字母（<code>u</code>），小写字母（<code>l</code>）和数字（<code>d</code>），生成长度为 8 的密码。我们打算指定叫做<code>attackfile</code>的哈希表。</p><p><code>./oclHashcat-plus.bin attackfile -1 ?l?u?d?s ?1?1?1?1 ?1?1?1?1</code></p></li><li><p>我们可以将这个命令这样拆分：</p><ul><li><code>./oclHashcat-plus.bin</code>调用了 OclHashcat 。</li><li><code>attackfile</code>是我们的攻击文件。</li><li><code>-1 ?l?u?d?</code>指定了自定义字符集<code>1</code>，它包含小写字母、大写字母、数字和特殊字符。</li><li><code>?1?1?1?1</code>是使用字符集<code>1</code>的左掩码。</li><li><code>?1?1?1?1</code>是使用字符集<code>1</code>的右掩码。</li></ul><p>这就结束了。</p></li></ol><h2 id="8-10-物理访问攻击"><a href="#8-10-物理访问攻击" class="headerlink" title="8.10 物理访问攻击"></a>8.10 物理访问攻击</h2><p>这个秘籍中，我们会使用 SUCrack 来执行物理访问密码攻击。 SUCrack 是个多线程的工具，能够通过<code>su</code>来执行本地用户账户的暴力破解。Linux 的<code>su</code>命令允许你作为替代用户来运行命令。这个攻击，虽然在你不能通过其他手段提权 Linux 系统时非常有用，但是会填满日志文件，所以请确保在完成之后清理这些日志。</p><p>SUCrack 拥有几种备选的可用命令：</p><ul><li><code>--help</code>允许你查看它的帮助文档。</li><li><code>-l</code>允许你修改我们尝试绕过登录的用户。</li><li><code>-s</code>允许你设置展示统计信息的秒数间隔。默认值为 3 秒。</li><li><code>-a</code>允许你设置是否使用 ANSI 转义代码。</li><li><code>-w</code>允许你设置工作线程的数量。由于 SUCrack 是多线程的，你可以运行任意多的线程。我们推荐你只使用一个线程，因为每次失败的登录尝试在尝试下个密码之前通常有三秒的延迟。</li></ul><h3 id="操作步骤-9"><a href="#操作步骤-9" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>为了使用 SUCrack，你需要在启动时指定单词列表。否则，你会得到一条搞笑的信息。打开终端窗口并执行<code>sucrack</code>命令。出于我们的目的，我们会使用之前创建的自定义单词列表文件，它由 Crunch 生成。但是，你可以指定任何希望的单词列表。</p><p><code>sucrack /usr/share/wordlists/rockyou.txt</code></p></li><li><p>如果你打算设置两个工作线程，以及每 6 秒显示一次统计信息，并且使用 ANSI 转义代码，你可以使用下列命令：</p><p><code>sucrack –w 2 –s 6 –a /usr/share/wordlists/rockyou.txt</code></p><p>这就结束了。</p></li></ol><h3 id="工作原理-5"><a href="#工作原理-5" class="headerlink" title="工作原理"></a>工作原理</h3><p>这个秘籍中，我们使用 SUCrack 来对系统的 root 用户执行物理访问密码攻击。使用单词列表的攻击可以对管理员（默认）或特定用户指定。我们运行<code>sucrack</code>命令，它为我们执行攻击。</p>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
      <category>kaili</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kaili</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>easyCode 代码生成</title>
    <link href="/2020/09/13/easycode/"/>
    <url>/2020/09/13/easycode/</url>
    
    <content type="html"><![CDATA[<h3 id="easyCode-代码生成"><a href="#easyCode-代码生成" class="headerlink" title="easyCode 代码生成"></a>easyCode 代码生成</h3><h5 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">##定义初始变量#<span class="token function">set</span><span class="token punctuation">(</span>$tableName <span class="token operator">=</span> $tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"Mapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>##设置回调$<span class="token operator">!</span>callback<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>$tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableName<span class="token punctuation">,</span> <span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token operator">!</span>callback<span class="token punctuation">.</span><span class="token function">setSavePath</span><span class="token punctuation">(</span>$tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>savePath<span class="token punctuation">,</span> <span class="token string">"/mapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>##拿到主键#<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>$tableInfo<span class="token punctuation">.</span>pkColumn<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    #<span class="token function">set</span><span class="token punctuation">(</span>$pk <span class="token operator">=</span> $tableInfo<span class="token punctuation">.</span>pkColumn<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#end#<span class="token keyword">if</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">)</span><span class="token keyword">package</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>#<span class="token punctuation">&#123;</span>end<span class="token punctuation">&#125;</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>entity<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/**@Author: $&#123;author&#125;@CreateTime: $&#123;time.currTime("yyyy-MM-dd HH:mm:ss")&#125;*/</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableName<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 通过主键查询数据     *     * @param $!pk.name 主键     * @return 对象     */</span>    $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> $<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType $<span class="token operator">!</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过实体不为空的属性作为筛选条件查询单个     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 条件     * @return 对象     */</span>    $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token function">getByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过实体不为空的属性作为筛选条件查询列表     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 条件     * @return 对象列表     */</span>    <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token function">listByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**     * 通过Id列表作为筛选条件查询列表，列表长度不为0     *     * @param list 列表     * @return 对象列表     */</span>    <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token function">listByIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotEmpty</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 新增实体属性不为null的列     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 实例     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 批量新增所有列，列表长度不能为0，且列表id统一为null或者统一不为null     *     * @param list 实例     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">insertBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotEmpty</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过主键修改实体属性不为null的列     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 实例     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过表字段修改实体属性不为null的列     *     * @param where 条件     * @param where set     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">updateByField</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"where"</span><span class="token punctuation">)</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> where<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过主键修改实体列表，列表长度不能为0，注意：当实体属性为null时，对应的列也会别更新为null     *     * @param list 列表     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">updateBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotEmpty</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过主键删除     *     * @param $!pk.name 主键     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> $<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType $<span class="token operator">!</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过实体非空属性删除     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 实体     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">deleteByEntity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * 通过主键列表删除，列表长度不能为0     *     * @param list 列表     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">deleteByIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotEmpty</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**     * 查询行数     *     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">countAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过实体非空查询行数     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 实体     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">countByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h5 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h5><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml">##引入mybatis支持$!mybatisSupport##设置保存名称与保存位置$!callback.setFileName($tool.append($!&#123;tableInfo.name&#125;, "Mapper.xml"))$!callback.setSavePath($tool.append($modulePath, "/src/main/resources/mapper"))##拿到主键#if(!$tableInfo.pkColumn.isEmpty())    #set($pk = $tableInfo.pkColumn.get(0))#end<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.savePackageName&#125;.mapper.$!&#123;tableInfo.name&#125;Mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.savePackageName&#125;.entity.$!&#123;tableInfo.name&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.name&#125;ResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#foreach($column in $tableInfo.fullColumn)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!column.name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!column.obj.name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!column.ext.jdbcType<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>#end    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table_field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      #allSqlColumn()          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>           <span class="token comment">&lt;!--通过Id查询单个--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.name&#125;ResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$pk.type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table_field<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        from $!tableInfo.obj.name        where $!pk.obj.name = #&#123;$!pk.name,jdbcType=$!pk.ext.jdbcType&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过实体不为空的属性作为筛选条件查询列表--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listByEntity<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.name&#125;ResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.savePackageName&#125;.entity.$!&#123;tableInfo.name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table_field<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        from $!tableInfo.obj.name        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>#foreach($column in $tableInfo.fullColumn)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!column.name != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and $!column.obj.name = #&#123;$!column.name,jdbcType=$!column.ext.jdbcType&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>#end        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过实体不为空的属性作为筛选条件查询单个--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getByEntity<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.name&#125;ResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.savePackageName&#125;.entity.$!&#123;tableInfo.name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table_field<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        from $!tableInfo.obj.name        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>#foreach($column in $tableInfo.fullColumn)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!column.name != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and $!column.obj.name = #&#123;$!column.name,jdbcType=$!column.ext.jdbcType&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>#end        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过Id列表作为筛选条件查询列表，列表长度不为0--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listByIds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.name&#125;ResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table_field<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        from $!tableInfo.obj.name        where $!pk.obj.name in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #&#123;item&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--新增实体属性不为null的列--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!pk.name<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.savePackageName&#125;.entity.$!&#123;tableInfo.name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into $!&#123;tableInfo.obj.name&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#foreach($column in  $tableInfo.fullColumn)          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!column.name != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             $!column.obj.name,          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>#end                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>values (<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#foreach($column in  $tableInfo.fullColumn)          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!column.name != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             #&#123;$!column.name,jdbcType=$!column.ext.jdbcType&#125;,          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>#end        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--批量新增所有列，列表长度不能为0，且列表id统一为null或者统一不为null--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertBatch<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!pk.name<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into $!&#123;tableInfo.obj.name&#125;         (#foreach($column in $tableInfo.fullColumn)$!&#123;column.obj.name&#125;#if($velocityHasNext), #end#end)        values        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         (#foreach($column in $tableInfo.fullColumn)#&#123;item.$!&#123;column.name&#125;,jdbcType=$!column.ext.jdbcType&#125;#if($velocityHasNext), #end#end)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过主键修改实体属性不为null的列--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.savePackageName&#125;.entity.$!&#123;tableInfo.name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update $!&#123;tableInfo.obj.name&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>#foreach($column in $tableInfo.otherColumn)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!column.name != null#if($column.type.equals(<span class="token punctuation">"</span></span><span class="token attr-name">java.lang.String"))</span> <span class="token attr-name">and</span> <span class="token attr-name">$!column.name</span> <span class="token attr-name">!</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span></span><span class="token attr-name">#end"</span><span class="token punctuation">></span></span>                $!column.obj.name = #&#123;$!column.name,jdbcType=$!column.ext.jdbcType&#125;,            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>#end        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        where $!pk.obj.name = #&#123;$!pk.name,jdbcType=$!pk.ext.jdbcType&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过表字段修改实体属性不为null的列--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateByField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update $!&#123;tableInfo.obj.name&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>#foreach($column in $tableInfo.otherColumn)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>where.$!&#123;column.name&#125; == null and set.$!&#123;column.name&#125; != null#if($column.type.equals(<span class="token punctuation">"</span></span><span class="token attr-name">java.lang.String"))</span> <span class="token attr-name">and</span> <span class="token attr-name">set.$!&#123;column.name&#125;</span> <span class="token attr-name">!</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span></span><span class="token attr-name">#end"</span><span class="token punctuation">></span></span>                $!column.obj.name = #&#123;set.$!&#123;column.name&#125;,jdbcType=$!column.ext.jdbcType&#125;,            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>#end        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>#foreach($column in $tableInfo.fullColumn)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>where.$!&#123;column.name&#125; != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and $!column.obj.name = #&#123;where.$!&#123;column.name&#125;,jdbcType=$!column.ext.jdbcType&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>#end        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过主键修改实体列表，列表长度不能为0，注意：当实体属性为null时，对应的列也会别更新为null--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateBatch<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update $!&#123;tableInfo.obj.name&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#foreach($column in $tableInfo.otherColumn)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;column.obj.name&#125; = case<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>end,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  when $!pk.obj.name = #&#123;item.$!pk.name&#125; then #&#123;item.$!column.name&#125;                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>#end        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>        where $!pk.obj.name in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #&#123;item.$!pk.name,jdbcType=$!pk.ext.jdbcType&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--通过主键删除--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$pk.type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from $!&#123;tableInfo.obj.name&#125; where $!pk.obj.name = #&#123;$!pk.name,jdbcType=$!pk.ext.jdbcType&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过实体非空属性删除--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteByEntity<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.savePackageName&#125;.entity.$!&#123;tableInfo.name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from $!&#123;tableInfo.obj.name&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>#foreach($column in $tableInfo.otherColumn)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!column.name != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and $!column.obj.name = #&#123;$!column.name,jdbcType=$!column.ext.jdbcType&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>#end        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--通过主键列表删除，列表长度不能为0--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteByIds<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from $!&#123;tableInfo.obj.name&#125; where $!pk.obj.name in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #&#123;item&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count($!pk.obj.name) from $!&#123;tableInfo.obj.name&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countByEntity<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!&#123;tableInfo.savePackageName&#125;.entity.$!&#123;tableInfo.name&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count($!pk.obj.name) from $!&#123;tableInfo.obj.name&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>#foreach($column in $tableInfo.fullColumn)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$!column.name != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and $!column.obj.name = #&#123;$!column.name,jdbcType=$!column.ext.jdbcType&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>#end        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></div><h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">##定义初始变量#<span class="token function">set</span><span class="token punctuation">(</span>$tableName <span class="token operator">=</span> $tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"Service"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>##设置回调$<span class="token operator">!</span>callback<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>$tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableName<span class="token punctuation">,</span> <span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token operator">!</span>callback<span class="token punctuation">.</span><span class="token function">setSavePath</span><span class="token punctuation">(</span>$tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>savePath<span class="token punctuation">,</span> <span class="token string">"/service"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>##拿到主键#<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>$tableInfo<span class="token punctuation">.</span>pkColumn<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    #<span class="token function">set</span><span class="token punctuation">(</span>$pk <span class="token operator">=</span> $tableInfo<span class="token punctuation">.</span>pkColumn<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#end#<span class="token keyword">if</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">)</span><span class="token keyword">package</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>#<span class="token punctuation">&#123;</span>end<span class="token punctuation">&#125;</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>entity<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token punctuation">.</span></span><span class="token class-name">PageHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token punctuation">.</span></span><span class="token class-name">PageInfo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/**@Author: $&#123;author&#125;@CreateTime: $&#123;time.currTime("yyyy-MM-dd HH:mm:ss")&#125;*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableName<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**     * 通过主键查询数据     *     * @param $!pk.name 主键     * @return 对象     */</span>    $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token function">getById</span><span class="token punctuation">(</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType $<span class="token operator">!</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过实体不为空的属性作为筛选条件查询单个     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 条件     * @return 对象     */</span>    $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token function">getByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过实体不为空的属性作为筛选条件查询列表     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 条件     * @return 对象列表     */</span>    <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token function">listByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**     * 条件分页查询     *     * @param $!&#123;tableInfo.name&#125; $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 查询条件     * @param page 起始标号     * @param pageSize 查询条目     * @return 对象列表     */</span>    <span class="token class-name">PageInfo</span> <span class="token function">listPageByEntity</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 条件分页查询     *     * @param page 起始标号     * @param pageSize 查询条目     * @return 对象列表     */</span>    <span class="token class-name">PageInfo</span> <span class="token function">listPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Id列表查询对象列表     *     * @param ids Id列表     * @return 对象列表     */</span>    <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token function">listByIds</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 插入     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 对象     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 列表插入     *     * @param list 列表对象     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">insertBatch</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 更新     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 对象     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 列表更新     *     * @param list 列表对象     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">updateBatch</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 删除     *     * @param $!pk.name 主键     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType $<span class="token operator">!</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 条件删除     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 对象     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">deleteByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**     * 主键列表删除     *     * @param list 主键列表     * @return 影响行数     */</span>     <span class="token keyword">int</span> <span class="token function">deleteByIds</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">/**     * 数据条目     *     * @return 影响行数     */</span>     <span class="token keyword">int</span> <span class="token function">countAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 条件查询数目     *     * @param $!tool.firstLowerCase($!&#123;tableInfo.name&#125;) 对象     * @return 影响行数     */</span>    <span class="token keyword">int</span> <span class="token function">countByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="serviceImpl"><a href="#serviceImpl" class="headerlink" title="serviceImpl"></a>serviceImpl</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">##定义初始变量#<span class="token function">set</span><span class="token punctuation">(</span>$tableName <span class="token operator">=</span> $tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"ServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>##设置回调$<span class="token operator">!</span>callback<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>$tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableName<span class="token punctuation">,</span> <span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token operator">!</span>callback<span class="token punctuation">.</span><span class="token function">setSavePath</span><span class="token punctuation">(</span>$tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>savePath<span class="token punctuation">,</span> <span class="token string">"/service/impl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>##拿到主键#<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>$tableInfo<span class="token punctuation">.</span>pkColumn<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    #<span class="token function">set</span><span class="token punctuation">(</span>$pk <span class="token operator">=</span> $tableInfo<span class="token punctuation">.</span>pkColumn<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#end#<span class="token keyword">if</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">)</span><span class="token keyword">package</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>#<span class="token punctuation">&#123;</span>end<span class="token punctuation">&#125;</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>entity<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token punctuation">.</span></span><span class="token class-name">PageHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token punctuation">.</span></span><span class="token class-name">PageInfo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/**@Author: $&#123;author&#125;@CreateTime: $&#123;time.currTime("yyyy-MM-dd HH:mm:ss")&#125;*/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableName<span class="token punctuation">&#125;</span> <span class="token keyword">implements</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token class-name">Service</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>type <span class="token operator">=</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token class-name">Mapper</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token function">getById</span><span class="token punctuation">(</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType $<span class="token operator">!</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token function">getByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">getByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token function">listByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">listByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PageInfo</span> <span class="token function">listPageByEntity</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> list <span class="token operator">=</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">listByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PageInfo</span> <span class="token function">listPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> list <span class="token operator">=</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">listByEntity</span><span class="token punctuation">(</span><span class="token keyword">new</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token function">listByIds</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType<span class="token operator">></span> ids<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">listByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertBatch</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">insertBatch</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateBatch</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">updateBatch</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType $<span class="token operator">!</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">deleteByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteByIds</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">deleteByIds</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">countAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token function">countByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">##定义初始变量#<span class="token function">set</span><span class="token punctuation">(</span>$tableName <span class="token operator">=</span> $tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"Controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>##设置回调$<span class="token operator">!</span>callback<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>$tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableName<span class="token punctuation">,</span> <span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token operator">!</span>callback<span class="token punctuation">.</span><span class="token function">setSavePath</span><span class="token punctuation">(</span>$tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>savePath<span class="token punctuation">,</span> <span class="token string">"/controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>##拿到主键#<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>$tableInfo<span class="token punctuation">.</span>pkColumn<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    #<span class="token function">set</span><span class="token punctuation">(</span>$pk <span class="token operator">=</span> $tableInfo<span class="token punctuation">.</span>pkColumn<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#end#<span class="token keyword">if</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">)</span><span class="token keyword">package</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>#<span class="token punctuation">&#123;</span>end<span class="token punctuation">&#125;</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>entity<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/**@Author: $&#123;author&#125;@CreateTime: $&#123;time.currTime("yyyy-MM-dd HH:mm:ss")&#125;*/</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/$!tool.firstLowerCase($tableInfo.name)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableName<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token class-name">Service</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token class-name">Service</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get/&#123;$!pk.name&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> $<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType $<span class="token operator">!</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        $tableInfo<span class="token punctuation">.</span>name $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">=</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>$<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token function">getByEntity</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">getByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">>></span> <span class="token function">list</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span>$tableInfo<span class="token punctuation">.</span>name<span class="token operator">></span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">List</span> <span class="token operator">=</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">listByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">List</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/pageListByEntity/&#123;page&#125;/&#123;size&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PageInfo</span><span class="token punctuation">></span></span> <span class="token function">listPageByEntity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"page"</span><span class="token punctuation">)</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"size"</span><span class="token punctuation">)</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> $tableInfo<span class="token punctuation">.</span>name $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PageInfo</span> pageInfo <span class="token operator">=</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">listPageByEntity</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">,</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/pageList/&#123;page&#125;/&#123;size&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PageInfo</span><span class="token punctuation">></span></span> <span class="token function">listPage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"page"</span><span class="token punctuation">)</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"size"</span><span class="token punctuation">)</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PageInfo</span> pageInfo <span class="token operator">=</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">listPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/insert"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token operator">&lt;</span>$tableInfo<span class="token punctuation">.</span>name<span class="token operator">></span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> $tableInfo<span class="token punctuation">.</span>name $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>$<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/insertBatch"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&lt;</span>$tableInfo<span class="token punctuation">.</span>name<span class="token operator">>></span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token operator">&lt;</span> $tableInfo<span class="token punctuation">.</span>name<span class="token operator">></span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">insertBatch</span><span class="token punctuation">(</span>$<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> $tableInfo<span class="token punctuation">.</span>name $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>$<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/updateBatch"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>$tableInfo<span class="token punctuation">.</span>name<span class="token operator">></span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">updateBatch</span><span class="token punctuation">(</span>$<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/&#123;$!pk.name&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> $<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType $<span class="token operator">!</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteByEntity/&#123;$!pk.name&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> $tableInfo<span class="token punctuation">.</span>name $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">deleteByEntity</span><span class="token punctuation">(</span>$<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">deleteBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>$<span class="token operator">!</span>pk<span class="token punctuation">.</span>shortType<span class="token operator">></span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>s<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             result <span class="token operator">=</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token function">deleteByIds</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">&#123;</span>pk<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>MSG_SUCCESS<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">##引入宏定义$<span class="token operator">!</span>init$<span class="token operator">!</span>define##使用宏定义设置回调（保存位置与文件后缀）#<span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"/entity"</span><span class="token punctuation">,</span> <span class="token string">".java"</span><span class="token punctuation">)</span>##使用宏定义设置包后缀#<span class="token function">setPackageSuffix</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span>##使用全局变量实现默认包导入$<span class="token operator">!</span>autoImport<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span> ##使用宏定义实现类注释信息#<span class="token function">tableComment</span><span class="token punctuation">(</span><span class="token string">"实体类"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">serial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>#<span class="token function">foreach</span><span class="token punctuation">(</span>$column in $tableInfo<span class="token punctuation">.</span>fullColumn<span class="token punctuation">)</span>    #<span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span>column<span class="token punctuation">.</span>comment<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">/**      *$&#123;column.comment&#125;      */</span>    #end     <span class="token keyword">private</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>tool<span class="token punctuation">.</span><span class="token function">getClsNameByFullName</span><span class="token punctuation">(</span>$column<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> $<span class="token operator">!</span><span class="token punctuation">&#123;</span>column<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>#end#<span class="token function">foreach</span><span class="token punctuation">(</span>$column in $tableInfo<span class="token punctuation">.</span>fullColumn<span class="token punctuation">)</span>    ##使用宏定义实现get<span class="token punctuation">,</span>set方法    #<span class="token function">getSetMethod</span><span class="token punctuation">(</span>$column<span class="token punctuation">)</span>#end <span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easyCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>luna-commons-common</title>
    <link href="/2020/08/10/luna-commons-common/"/>
    <url>/2020/08/10/luna-commons-common/</url>
    
    <content type="html"><![CDATA[<h2 id="基础工具包Api"><a href="#基础工具包Api" class="headerlink" title="基础工具包Api"></a>基础工具包Api</h2><h3 id="http操作"><a href="#http操作" class="headerlink" title="http操作"></a>http操作</h3><h5 id="HttpUtils类"><a href="#HttpUtils类" class="headerlink" title="HttpUtils类"></a>HttpUtils类</h5><ol><li>普通get请求</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * get     *     * @param host 主机     * @param path 路径     * @param headers 请求头     * @param queries 请求参数     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpResponse</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headers<span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> queries<span class="token punctuation">)</span> </code></pre></div><ol start="2"><li>参数/文件post请求</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Post File/form * * @param host 主机 * @param path 路径 * @param headers 请求头 * @param queries 请求参数 * @param bodies &lt;p>Map&lt;文件名或者参数key,文件地址或者参数value>&lt;p/> * @return * @throws Exception */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpResponse</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headers<span class="token punctuation">,</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> queries<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> bodies<span class="token punctuation">)</span></code></pre></div><ol start="3"><li>流post请求</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Post stream * * @param host 主机 * @param path 路径 * @param headers 请求头 * @param queries 请求参数 * @param body 字节流 * @return * @throws Exception */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpResponse</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headers<span class="token punctuation">,</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> queries<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span></code></pre></div><ol start="4"><li>字符串post请求</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Post String * * @param host 主机 * @param path 路径 * @param headers 请求头 * @param queries 请求参数 * @param body 字符串 * @return * @throws Exception */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpResponse</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headers<span class="token punctuation">,</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> queries<span class="token punctuation">,</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span> </code></pre></div><ol start="5"><li>返回结果解析及检查</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 检测响应体     *      * @param httpResponse     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">checkResponseAndGetResult</span><span class="token punctuation">(</span><span class="token class-name">HttpResponse</span> httpResponse<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isEnsure<span class="token punctuation">)</span></code></pre></div><ol start="6"><li>简单的检查是否为网络路径</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 检查是不是网络路径    *     * @param url    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNetUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></code></pre></div><h3 id="jsonfile"><a href="#jsonfile" class="headerlink" title="jsonfile"></a>jsonfile</h3><h5 id="InformationConverter类"><a href="#InformationConverter类" class="headerlink" title="InformationConverter类"></a>InformationConverter类</h5><ol><li>读取JSON文件操作</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 读取json文件并转换为JSONObject     * @param path JSON文件路径     * @return a fastjson JSONObject     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">fileToJson</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span></code></pre></div><ol start="2"><li>JSONObject写入JSON文件</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * write json String to a json file * @param text the json text needs to write * @param path the json file path needs to save */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stringToFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span></code></pre></div><ol start="3"><li>获取JSON文件中的指定值</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * get item from json text file     * @param path the json file path     * @param item the item you want to get, can be para, header     * @return a Map, key is String, value is Object     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span></code></pre></div><ol start="4"><li>将JSONObject的值转为HashMap</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Convert jsonobject to hashMap * @param object the jsonObject need to convert * @return the hashMap(String, String) */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">jsonToHasMap</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span> object<span class="token punctuation">)</span></code></pre></div><h3 id="okHttp"><a href="#okHttp" class="headerlink" title="okHttp"></a>okHttp</h3><ol><li>Get请求</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * send a get to a site * @param url the website url * @param para the parameter hashMap, use put to add * @param header the header hasMap, use put to add * @return a response json object */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> para<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> header<span class="token punctuation">)</span></code></pre></div><ol start="2"><li>POST请求</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * send a post to a site     *      * @param url the website url     * @param para the parameter hashMap, use put to add     * @param header the header hasMap, use put to add     * @param bodyFormat the body hashMap, if use none, put("none",""), if form-data, put(key,value)     * @return a response json object     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> para<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> header<span class="token punctuation">,</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> bodyFormat<span class="token punctuation">)</span></code></pre></div><h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><h5 id="fileUtils"><a href="#fileUtils" class="headerlink" title="fileUtils"></a>fileUtils</h5><ol><li>获取文件夹内文件数</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取文件夹内文件数目 * * @param path * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">getFileLength</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></code></pre></div><ol start="2"><li>批量转换文件类型</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 批量转换文件类型 * * @param path 文件夹路径 * @param oldExt 原本类型 * @param newExt 转换后类型 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">renameFiles</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span> oldExt<span class="token punctuation">,</span> <span class="token class-name">String</span> newExt<span class="token punctuation">)</span></code></pre></div><ol start="3"><li>复制文件</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 复制文件 * * @param input 输入 * @param output 输出 * @throws IOException */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> input<span class="token punctuation">,</span> <span class="token class-name">File</span> output<span class="token punctuation">)</span> </code></pre></div><ol start="4"><li>批量复制文件</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 批量复制文件 * * @param inputPath 输入目录 * @param outputPath 输出目录 * @param number 每个文件复制数量 * @param inputPrefix 输入文件前缀 * @param outputPrefix 输出文件前缀 * @param inputType 输入文件类型 * @param outputType 输出文件类型 * @return 文件操作数 * @throws IOException */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> inputPath<span class="token punctuation">,</span> <span class="token class-name">String</span> outputPath<span class="token punctuation">,</span> <span class="token class-name">Integer</span> number<span class="token punctuation">,</span> <span class="token class-name">String</span> inputPrefix<span class="token punctuation">,</span>    <span class="token class-name">String</span> outputPrefix<span class="token punctuation">,</span> <span class="token class-name">String</span> inputType<span class="token punctuation">,</span> <span class="token class-name">String</span> outputType<span class="token punctuation">)</span></code></pre></div><h5 id="imageUtils"><a href="#imageUtils" class="headerlink" title="imageUtils"></a>imageUtils</h5><ol><li>图片/文件转为字节</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 图片转字节 *  * @param imgFile 文件路径 * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">String</span> imgFile<span class="token punctuation">)</span> </code></pre></div><ol start="2"><li>字节转图片</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 字节转图片 *  * @param data 数据 * @param path 输出路径 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">byte2image</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span></code></pre></div><h5 id="textUtils"><a href="#textUtils" class="headerlink" title="textUtils"></a>textUtils</h5><p>CharsetKit 字符串处理工具栏</p><p>Convert 类型转换器</p><p> DatePattern 日期格式匹配</p><p>IdWorker Id生成器</p><p>RandomValueUtil 随机姓名生成器</p><p>StrFormatter 字符串格式化,替换{}标识</p>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>commons</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>luna-commons</title>
    <link href="/2020/07/27/luna-commons/"/>
    <url>/2020/07/27/luna-commons/</url>
    
    <content type="html"><![CDATA[<h1 id="luna-commons"><a href="#luna-commons" class="headerlink" title="luna-commons"></a>luna-commons</h1><!-- PROJECT SHIELDS --><p><a href="https://github.com/czy1024/luna-commons/graphs/contributors"><img src="https://img.shields.io/github/contributors/czy1024/luna-commons.svg?style=flat-square" alt="Contributors"></a><br><a href="https://github.com/czy1024/luna-commons/network/members"><img src="https://img.shields.io/github/forks/czy1024/luna-commons.svg?style=flat-square" alt="Forks"></a><br><a href="https://github.com/czy1024/luna-commons/stargazers"><img src="https://img.shields.io/github/stars/czy1024/luna-commons.svg?style=flat-square" alt="Stargazers"></a><br><a href="https://img.shields.io/github/issues/czy1024/luna-commons.svg"><img src="https://img.shields.io/github/issues/czy1024/luna-commons.svg?style=flat-square" alt="Issues"></a><br><a href="https://github.com/czy1024/luna-commons/blob/master/LICENSE.txt"><img src="https://img.shields.io/github/license/czy1024/luna-commons.svg?style=flat-square" alt="MIT License"></a><br><a href="https://linkedin.com/in/luna-commons"><img src="https://img.shields.io/badge/-LinkedIn-black.svg?style=flat-square&logo=linkedin&colorB=555" alt="LinkedIn"></a></p><!-- PROJECT LOGO --><br /><p align="center">  <a href="https://github.com/czy1024/luna-commons/">    <img src="https://i.loli.net/2020/07/28/5MzIVArBZyp8NgX.png" alt="Logo" width="80" height="80">  </a>  <h3 align="center">"完美的"开发工具</h3>  <p align="center">    市场上许多界面和工具的集合,例如ftp,httpd等文件与工具操作，包括但不限于图像处理、人脸识别等的api。让你免去寻找工具的烦恼    <br />    <a href="https://github.com/czy1024/luna-commons"><strong>探索本项目的文档 »</strong></a>    <br />    <br />    <a href="">查看Demo</a>    ·    <a href="">报告Bug</a>    ·    <a href="https://github.com/czy1024/luna-commons/issues">提出新特性</a>  </p></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97">上手指南</a><ul><li><a href="#%E5%BC%80%E5%8F%91%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E8%A6%81%E6%B1%82">开发前的配置要求</a></li><li><a href="#%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4">安装步骤</a></li></ul></li><li><a href="#%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E8%AF%B4%E6%98%8E">文件目录说明</a></li><li><a href="#%E9%83%A8%E7%BD%B2">部署</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84%E6%A1%86%E6%9E%B6">使用到的框架</a></li><li><a href="#%E8%B4%A1%E7%8C%AE%E8%80%85">贡献者</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE">如何参与开源项目</a></li></ul></li><li><a href="#%E4%BD%9C%E8%80%85">作者</a></li><li><a href="#%E9%B8%A3%E8%B0%A2">鸣谢</a></li></ul><h3 id="上手指南"><a href="#上手指南" class="headerlink" title="上手指南"></a>上手指南</h3><h6 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a><strong>安装步骤</strong></h6><ol><li>Get a free API Key at <a href="https://ai.baidu.com/sdk#ocr">https://ai.baidu.com/sdk#ocr</a></li><li>Get a free API Key at <a href="https://cloud.tencent.com/">https://cloud.tencent.com</a></li><li>Get a free API Key at <a href="https://account.aliyun.com/">https://account.aliyun.com</a></li><li>找到config目录下的xxxConfigValue,application.properties</li><li>Clone the repo</li></ol><div class="code-wrapper"><pre class="language-sh" data-language="sh"><code class="language-sh">git clone https:&#x2F;&#x2F;github.com&#x2F;czy1024&#x2F;luna-commons.git</code></pre></div><h3 id="文件目录说明"><a href="#文件目录说明" class="headerlink" title="文件目录说明"></a>文件目录说明</h3><p>eg:</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">luna-commons-loc├── ARCHITECTURE.md├── LICENSE.txt├── .gitignore├── README.md├── luna-commons-ali│  ├── pom.xml│  │  ├── &#x2F;config&#x2F;│  │  └── &#x2F;api&#x2F;│  └──── &#x2F;resource&#x2F;├── luna-commons-api│  ├── pom.xml│  │  ├── &#x2F;config&#x2F;│  │  └── &#x2F;api&#x2F;│  └──── &#x2F;resource&#x2F;├── luna-commons-baidu│  ├── pom.xml│  │  ├── &#x2F;config&#x2F;│  │  └── &#x2F;api&#x2F;│  └──── &#x2F;resource&#x2F;├── luna-commons-common│  ├── pom.xml│  │  ├── &#x2F;config&#x2F;│  │  └── &#x2F;api&#x2F;│  └──── &#x2F;resource&#x2F;├── luna-commons-file│  ├── pom.xml│  │  ├── &#x2F;config&#x2F;│  │  └── &#x2F;api&#x2F;│  └──── &#x2F;resource&#x2F;├── luna-commons-media│  ├── pom.xml│  │  ├── &#x2F;config&#x2F;│  │  └── &#x2F;api&#x2F;│  └──── &#x2F;resource&#x2F;├── luna-commons-message│  ├── pom.xml│  │  ├── &#x2F;config&#x2F;│  │  └── &#x2F;api&#x2F;│  └──── &#x2F;resource&#x2F;├── luna-commons-tencent│  ├── pom.xml│  │  ├── &#x2F;config&#x2F;│  │  └── &#x2F;api&#x2F;│  └──── &#x2F;resource&#x2F;└── pom.xml</code></pre></div><h2 id="各-Module-介绍"><a href="#各-Module-介绍" class="headerlink" title="各 Module 介绍"></a>各 Module 介绍</h2><table><thead><tr><th>Module 名称</th><th>Module 介绍</th></tr></thead><tbody><tr><td><a href="./luna-commons-ali">luna-commons-ali</a></td><td>关于阿里oss和alpay支付宝的使用</td></tr><tr><td><a href="./luna-commons-common">luna-commons-common</a></td><td>基础工具包,加密字符等操作,http网络操作</td></tr><tr><td><a href="./luna-commons-api">luna-commons-api</a></td><td>api集合模块,现阶段为学小易查题目接口,<a href="https://github.com/czy1024/luna-commons/wiki/sm.ms-api-todo">sm.ms 图床api</a></td></tr><tr><td><a href="./luna-commons-baidu">luna-commons-baidu</a></td><td>百度Api集合,包含人脸识别,人证审核百度地图等api封装</td></tr><tr><td><a href="./luna-commons-file">luna-commons-file</a></td><td>文件处理工具集合,包括ftp,httpd,fastdfs等文件操作</td></tr><tr><td><a href="./luna-commons-media">luna-commons-media</a></td><td>媒体流处理工具,包含ffmpeg工具封装,JavaCv图像处理</td></tr></tbody></table><p>| <a href="./luna-commons-message">luna-commons-message</a>       |  消息发送,短信邮件消息发送,有html模板附赠 <a href="https://github.com/czy1024/luna-commons/blob/master/luna-commons-message/src/main/resources/static/luna-message.html">HTML邮件模板</a><br>| <a href="./luna-commons-tencent">luna-commons-tencent</a> | 腾讯Api集合,包含人脸识别,人证审核腾讯地图等api封装 |</p><h3 id="开发的架构"><a href="#开发的架构" class="headerlink" title="开发的架构"></a>开发的架构</h3><p>请阅读<a href="https://github.com/czy1024/luna-commons/blob/master/ARCHITECTURE.md">ARCHITECTURE.md</a> 查阅为该项目的架构。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>请前往各个小项目查看</p><h3 id="使用到的框架"><a href="#使用到的框架" class="headerlink" title="使用到的框架"></a>使用到的框架</h3><ul><li><a href="https://spring.io/">springboot</a></li></ul><h3 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h3><p>请阅读<strong>CONTRIBUTING.md</strong> 查阅为该项目做出贡献的开发者。</p><h4 id="如何参与开源项目"><a href="#如何参与开源项目" class="headerlink" title="如何参与开源项目"></a>如何参与开源项目</h4><p>贡献使开源社区成为一个学习、激励和创造的绝佳场所。你所作的任何贡献都是<strong>非常感谢</strong>的。</p><ol><li>Fork the Project</li><li>Create your Feature Branch (<code>git checkout -b feature/AmazingFeature</code>)</li><li>Commit your Changes (<code>git commit -m &#39;Add some AmazingFeature&#39;</code>)</li><li>Push to the Branch (<code>git push origin feature/AmazingFeature</code>)</li><li>Open a Pull Request</li></ol><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>该项目使用Git进行版本管理。您可以在repository参看当前可用版本。</p><h3 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h3><p>luna</p><p>email <a href="mailto:&#75;&#101;&#121;&#x6c;&#x75;&#x6e;&#x61;&#x40;&#49;&#50;&#54;&#46;&#x63;&#111;&#x6d;">&#75;&#101;&#121;&#x6c;&#x75;&#x6e;&#x61;&#x40;&#49;&#50;&#54;&#46;&#x63;&#111;&#x6d;</a>  &ensp; qq:1173288254</p><p> <em>您也可以在贡献者名单中参看所有参与该项目的开发者。</em></p><h3 id="版权说明"><a href="#版权说明" class="headerlink" title="版权说明"></a>版权说明</h3><p>该项目签署了MIT 授权许可，详情请参阅 <a href="https://github.com/czy1024/luna-commons/blob/master/LICENSE">LICENSE.txt</a></p><h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢<a href=""></a></h3><ul><li><a href="">ffmpeg</a></li><li><a href="">Javacv</a></li></ul><!-- links -->]]></content>
    
    
    <categories>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>commons</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql 免安装配置学习</title>
    <link href="/2020/07/27/mysql-install/"/>
    <url>/2020/07/27/mysql-install/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL5-7绿色版（免装版）的初始化和修改密码"><a href="#MySQL5-7绿色版（免装版）的初始化和修改密码" class="headerlink" title="MySQL5.7绿色版（免装版）的初始化和修改密码"></a><a href="https://www.cnblogs.com/jyiqing/p/6924062.html">MySQL5.7绿色版（免装版）的初始化和修改密码</a></h2><h2 id="1-下载MySQL5-7-18绿色版"><a href="#1-下载MySQL5-7-18绿色版" class="headerlink" title="1.下载MySQL5.7.18绿色版"></a>1.下载MySQL5.7.18绿色版</h2><h3 id="1-1下载链接"><a href="#1-1下载链接" class="headerlink" title="1.1下载链接"></a>1.1下载链接</h3><p>以下是MySQL5.7.18绿色版的链接（来源oracle官网），打开链接直接下载</p><p><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.18-winx64.zip"> https://dev.mysql.com/gt/Downloads/MySQL-5.7/mysql-5.7.18-winx64.zip</a></p><p><img src="https://i.loli.net/2021/04/18/Fslm6cZMqWU5JCz.png" alt="img"></p><h3 id="1-2解压"><a href="#1-2解压" class="headerlink" title="1.2解压"></a>1.2解压</h3><p>解压到文件夹</p><p><img src="https://i.loli.net/2021/04/18/hqpuc7SHXJ8LQgP.png" alt="img"></p><h2 id="2-新建或清空data文件夹"><a href="#2-新建或清空data文件夹" class="headerlink" title="2.新建或清空data文件夹"></a>2.新建或清空data文件夹</h2><p>2.1解压以后，在目录下创建一个data文件夹</p><p><img src="https://i.loli.net/2021/04/18/GCqjWEg8un7N46r.png" alt="img"></p><p>2.2如果原来已经有一个data文件夹，就把里面的数据全部删掉。</p><p><img src="https://i.loli.net/2021/04/18/YZfb3eRmorDVaJ8.png" alt="img"></p><h2 id="3-安装服务"><a href="#3-安装服务" class="headerlink" title="3.安装服务"></a>3.安装服务</h2><h3 id="3-1打开cmd（管理员）"><a href="#3-1打开cmd（管理员）" class="headerlink" title="3.1打开cmd（管理员）"></a>3.1打开cmd（管理员）</h3><p>右键开始菜单→选择  命令提示符（管理员）  </p><p><img src="https://i.loli.net/2021/04/18/VRUrtOW9iNyLcKl.png" alt="img"></p><p>3.2在cmd中打开mysql的bin文件夹</p><p><img src="https://i.loli.net/2021/04/18/LCwnjzseMSNaPOJ.png" alt="img"></p><h3 id="3-3安装服务"><a href="#3-3安装服务" class="headerlink" title="3.3安装服务"></a>3.3安装服务</h3><p>3.3.1运行命令mysqld –install安装服务，如下图：</p><p><img src="https://i.loli.net/2021/04/18/9n3YDyxGzNiP25Q.png" alt="img"></p><p>3.3.2（可忽略）如果不需要mysql里，只需要运行mysqld –remove即可移除，如下图</p><p><img src="https://i.loli.net/2021/04/18/ZO9XSDgvMQluIVa.png" alt="img"></p><h2 id="4-初始化数据库"><a href="#4-初始化数据库" class="headerlink" title="4.初始化数据库"></a>4.初始化数据库</h2><p>4.1运行命令：mysqld –initialize-insecure –user=mysql –explicit_defaults_for_timestamp。</p><p>运行前，先确保data目录下没有任何文件（如果有文件，会初始化失败）。</p><p>如图：</p><p><img src="https://i.loli.net/2021/04/18/wWMe2ogFzNkxLq9.png" alt="img"></p><h2 id="5启动服务"><a href="#5启动服务" class="headerlink" title="5启动服务"></a>5启动服务</h2><p>5.1运行net start mysql 启动服务，如下图:</p><p><img src="https://i.loli.net/2021/04/18/NQcxrwq8CvEWkAj.png" alt="img"></p><p>5.2运行net stop mysql 启动服务，如下图:</p><p><img src="https://i.loli.net/2021/04/18/qv6uYVKd5RgsUyF.png" alt="img"></p><h2 id="6-客户端测试"><a href="#6-客户端测试" class="headerlink" title="6.客户端测试"></a>6.客户端测试</h2><p>6.1运行：mysql –uroot –p</p><p>如下图：</p><p><img src="https://i.loli.net/2021/04/18/TVWS7py5utzA8fE.png" alt="img"></p><p> 这里不需要密码，直接按回车键</p><p><img src="https://i.loli.net/2021/04/18/ZVoBid1muUFENrt.png" alt="img"></p><p>看到 mysql&gt; 就证明是成功进入mysql的了</p><h2 id="7-配置编码为UTF-8"><a href="#7-配置编码为UTF-8" class="headerlink" title="7.配置编码为UTF-8"></a>7.配置编码为UTF-8</h2><p>7.1创建.txt文件，改名为my.ini</p><p><img src="https://i.loli.net/2021/04/18/k9GPZ2D7nFf3pMA.png" alt="img"></p><p>将以下代码添加到my.ini</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[mysqld]character-set-server&#x3D;utf8[mysql]default-character-set&#x3D;utf8</code></pre></div><p> 如图：</p><p><img src="https://i.loli.net/2021/04/18/Sc3UfXNeYqiw2Pd.png" alt="img"></p><p>7.2在mysql中查看编码</p><p>7.2.1重启mysql，命令：mysqld restart</p><p>7.2.2查看编码命令：<code>show variables ``like &#39;``character``%&#39;;（修改前）</code></p><p><img src="https://i.loli.net/2021/04/18/2tIM8EgOsAauTYG.png" alt="img"></p><p> 7.2.3查看编码命令：<code>show variables ``like &#39;``character``%&#39;;（修改后）</code></p><p> <img src="https://i.loli.net/2021/04/18/BxcSJWG346qTHme.png" alt="img"></p><h2 id="8-修改密码"><a href="#8-修改密码" class="headerlink" title="8.修改密码"></a>8.修改密码</h2><p>在mysql 中逐步输入以下的代码：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">use mysql;&#x2F;&#x2F;密码为123456update user set authentication_string&#x3D;PASSWORD(&quot;123456&quot;) where user&#x3D;&quot;root&quot;;&#x2F;&#x2F;更新权限flush privileges; &#x2F;&#x2F;退出mysqlquit;</code></pre></div><p> 如图：</p><p> a.</p><p><img src="https://i.loli.net/2021/04/18/cQzYPhGJK324mVd.png" alt="img"></p><p> b.</p><p><img src="https://i.loli.net/2021/04/18/Qxkv5G4cCVbpjXf.png" alt="img"></p><p>c.</p><p><img src="https://i.loli.net/2021/04/18/C8KUryuVfz4dOkW.png" alt="img"></p><p> d.</p><p><img src="https://i.loli.net/2021/04/18/nGYSEdOCfsq6AKt.png" alt="img"></p><h2 id="9-重新打开mysql"><a href="#9-重新打开mysql" class="headerlink" title="9.重新打开mysql"></a>9.重新打开mysql</h2><p>使用刚刚设置的密码123456登录</p><p><img src="https://images2015.cnblogs.com/blog/1082630/201705/1082630-20170531194808383-101044283.png" alt="img"></p><p> 登录成功！！！</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql-install</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个简单的反向代理Nginx</title>
    <link href="/2020/07/27/nginx-install/"/>
    <url>/2020/07/27/nginx-install/</url>
    
    <content type="html"><![CDATA[<p><img src="/blog/img/nginx.jpg" alt="nginx"></p><p>NGINX联合创始人安德鲁·阿列克谢夫（Andrew Alexeev）曾说：NGINX是为对Apache性能不满意的人而构建的。随着Internet需求的变化，Web服务器的工作也在变化。NGINX的构建比以往任何时候都更有效率，更可扩展，更安全，更强大。</p><p>本文提供了Nginx的基本概念及知识。以开发者必备的Nginx基础知识为主，罗列了一些Nginx教程，希望对大家有所帮助。</p><p><strong>一.环境</strong></p><p>服务器版本：CentOS 7.2</p><p>为了保证学习阶段不遇到奇怪的事情，请保证以下四点：</p><ol><li>确认系统网络</li><li>确认yum可用</li><li>确认关闭iptables</li><li>确认停用selinux</li></ol><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看iptables状态</span>systemctl status firewalld.service<span class="token comment">#关闭防火墙（临时关闭）</span>systemctl stop firewalld.service<span class="token comment">#查看SELinux状态 </span>getenforce<span class="token comment">#临时关闭SELinux </span>setenforce <span class="token number">0</span></code></pre></div><p>安装一些系统基本工具，正常情况系统都会自带</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">yum -y install gcc gcc-c++ autoconf pcre pcre-devel make automakeyum -y install wget httpd-tools vim</code></pre></div><p><strong>二.基本概念</strong></p><p><strong>2.1Nginx是什么？</strong></p><p><code>Nginx</code>是一个高性能的<code>http</code>和反向代理服务器，其特点是占用内存小，并发能力强。<code>Nginx</code>专为性能优化而开发，性能是其最重要的考量，能经受高负载的考验，有报告表明能支持高达50000个并发连接数。</p><p><img src="/blog/img/nginx-1.jpg"></p><p><strong>2.2正向代理与反向代</strong></p><p>为了便于理解，首先先来了解一下一些基础知识，nginx是一个高性能的反向代理服务器那么什么是反向代理呢？</p><p>代理是在服务器和客户端之间假设的一层服务器，代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。</p><p>不管是正向代理还是反向代理，实现的都是上面的功能。如果你对OSI 七层模型与 TCP/IP 四层模型不是很熟悉可以再回顾下。</p><p><img src="/blog/img/nginx-2.jpg"></p><blockquote><p><strong>正向代理</strong></p></blockquote><p>正向代理（forward）意思是一个位于客户端和原始服务器 (origin server) 之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标 (原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p><p>正向代理是为我们服务的，即为客户端服务的，客户端可以根据正向代理访问到它本身无法访问到的服务器资源。</p><p>正向代理对我们是透明的，对服务端是非透明的，即服务端并不知道自己收到的是来自代理的访问还是来自真实客户端的访问。</p><blockquote><p><strong>反向代理</strong></p></blockquote><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p>反向代理是为服务端服务的，反向代理可以帮助服务器接收来自客户端的请求，帮助服务器做请求转发，负载均衡等。</p><p>反向代理对服务端是透明的，对我们是非透明的，即我们并不知道自己访问的是代理服务器，而服务器知道反向代理在为他服务。</p><p><strong>2.3负载均衡</strong></p><p>如果请求数过大，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器的情况改为请求分发到多个服务器上，就是负载均衡。</p><p>Upstream 指定后端服务器地址列表，在 server 中拦截响应请求，并将请求转发到 Upstream 中配置的服务器列表。</p><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">upstream balanceServer &#123; server 10.1.22.33:12345;  server 10.1.22.34:12345;server 10.1.22.35:12345;&#125;server &#123;   server_name fe.server.com;  listen 80;  location &#x2F;api &#123;    proxy_pass [http:&#x2F;&#x2F;balanceServer](http:&#x2F;&#x2F;balanceserver&#x2F;); &#125;&#125;</code></pre></div><p>上面的配置只是指定了 nginx 需要转发的服务端列表，并没有指定分配策略。</p><p>默认情况下采用的是轮询策略，将所有客户端请求轮询分配给服务端。这种策略是可以正常工作的，但是如果其中某一台服务器压力太大，出现延迟，会影响所有分配在这台服务器下的用户。</p><p><strong>Nginx支持的负载均衡调度算法方式如下：</strong></p><p>weight轮询(默认，常用)：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。ip_hash（常用）：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</p><p>fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</p><p><strong>2.4动静分离</strong></p><p>为了加快服务器的解析速度，可以把动态页面和静态页面交给不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。</p><p><strong>2.5Nginx常用命令</strong></p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 快速关闭Nginx，可能不保存相关信息，并迅速终止web服务</span>nginx -s stop<span class="token comment"># 平稳关闭Nginx，保存相关信息，有安排的结束web服务</span>nginx -s quit<span class="token comment"># 因改变了Nginx相关配置，需要重新加载配置而重载</span>nginx -s reload<span class="token comment"># 重新打开日志文件</span>nginx -s reopen<span class="token comment"># 为 Nginx 指定一个配置文件，来代替缺省的</span>nginx -c filename<span class="token comment"># 不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件</span>nginx -t<span class="token comment">#  显示 nginx 的版本</span>nginx -v<span class="token comment"># 显示 nginx 的版本，编译器版本和配置参数</span>nginx -V<span class="token comment"># 格式换显示 nginx 配置参数</span><span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> nginx -V <span class="token operator">|</span> <span class="token function">xargs</span> -n1<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> nginx -V <span class="token operator">|</span> <span class="token function">xargs</span> -n1 <span class="token operator">|</span> <span class="token function">grep</span> lua</code></pre></div><p><strong>三.为什么选择****Nginx？</strong></p><p>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。在Nginx网站上，其功能包括：</p><ul><li>HTTP和HTTPS（TLS / SSL / SNI）</li><li>超快速的Web服务器用于静态内容</li><li>FastCGI，WSGI，SCGI用于动态内容</li><li>具有负载平衡和缓存功能的加速Web代理</li><li>不间断实时二进制升级和配置</li><li>压缩和内容过滤器</li><li>虚拟主机</li><li>FLV和MP4的媒体流</li><li>带宽和连接策略</li><li>全面的访问控制</li><li>自定义日志</li><li>嵌入式脚本</li><li>带有TLS的SMTP / IMAP / POP3的邮件代理</li><li>逻辑，灵活，可扩展的配置</li><li>在Linux，FreeBSD，Mac OS X，Solaris和Windows上运行</li></ul><p><strong>nginx有如下优势：</strong></p><p><strong>1. IO多路复用epoll（IO复用）</strong></p><p>如何理解呢？举个例子吧！<br>有A、B、C三个老师，他们都遇到一个难题，要帮助一个班级的学生解决课堂作业。<br>老师A采用从第一排开始一个学生一个学生轮流解答的方式去回答问题，老师A浪费了很多时间，并且有的学生作业还没有完成呢，老师就来了，反反复复效率极慢。<br>老师B是一个忍者，他发现老师A的方法行不通，于是他使用了影分身术，分身出好几个自己同一时间去帮好几个同学回答问题，最后还没回答完，老师B消耗光了能量累倒了。<br>老师C比较精明，他告诉学生，谁完成了作业举手，有举手的同学他才去指导问题，他让学生主动发声，分开了“并发”。<br>这个老师C就是Nginx。</p><p><strong>2.</strong> <strong>轻量级</strong></p><ul><li>功能模块少 - Nginx仅保留了HTTP需要的模块，其他都用插件的方式，后天添加</li><li>代码模块化 - 更适合二次开发，如阿里巴巴Tengine</li></ul><p><strong>3. CPU亲和</strong></p><p>把CPU核心和Nginx工作进程绑定，把每个worker进程固定在一个CPU上执行，减少切换CPU的cache miss，从而提高性能。</p><p><strong>四.Nginx的安装</strong></p><h4 id="1-本地安装"><a href="#1-本地安装" class="headerlink" title="1.本地安装"></a><strong>1.本地安装</strong></h4><ul><li>windows系统：</li></ul><blockquote><p>直接去官网：<a href="https://nginx.org/en/download">https://nginx.org/en/download</a>… 下载相应版本即可。</p></blockquote><ul><li>mac系统：</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ brew <span class="token function">install</span> nginx</code></pre></div><h4 id="2-Linux安装："><a href="#2-Linux安装：" class="headerlink" title="2.Linux安装："></a><strong>2.Linux安装：</strong></h4><blockquote><p>以centOS系统为例，有下面两种安装方式(推荐1)</p></blockquote><p>1.) 通过rpm镜像源安装</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rpm</span> -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm$ yum <span class="token function">install</span> -y nginx</code></pre></div><p>2.) 通过依赖包详细安装</p><blockquote><p>安装nginx依赖库pcre、zlib</p></blockquote><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ yum <span class="token function">install</span> pcre pcre-devel$ yum <span class="token function">install</span> zlib zlib-devel</code></pre></div><blockquote><p>如有必要，可以安装c++编译环境和openssl</p></blockquote><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">$ yum <span class="token function">install</span> gcc-c++$ yum <span class="token function">install</span> openssl openssl-devel</code></pre></div><blockquote><p>下载/编译nginx</p></blockquote><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">$ wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.16.0.tar.gz$ tar -zxvf nginx-1.16.0.tar.gz# 编译安装$ cd nginx-1.16.0$ .&#x2F;configure  # 默认安装在&#x2F;usr&#x2F;local&#x2F;nginx$ make &amp;&amp; make install# 创建软链$ ln -s &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;nginx$ nginx -v</code></pre></div><p><strong>五.Nginx配置</strong></p><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">#打开主配置文件，若你是用lnmp环境安装vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf----------------------------------------user                    #设置nginx服务的系统使用用户worker_processes        #工作进程数 一般情况与CPU核数保持一致error_log               #nginx的错误日志pid                     #nginx启动时的pidevents &#123;    worker_connections    #每个进程允许最大连接数    use                   #nginx使用的内核模型&#125;</code></pre></div><p>我们使用 nginx 的 http 服务，在配置文件 nginx.conf 中的 http 区域内，配置无数个 server ，每一个 server 对应这一个虚拟主机或者域名。</p><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">http &#123;    ... ...        #后面再详细介绍 http 配置项目        server &#123;        listen 80                          #监听端口;        server_name localhost              #地址                location &#x2F; &#123;                       #访问首页路径            root &#x2F;xxx&#x2F;xxx&#x2F;index.html       #默认目录            index index.html index.htm     #默认文件        &#125;                        error_page  500 504   &#x2F;50x.html    #当出现以上状态码时从新定义到50x.html        location &#x3D; &#x2F;50x.html &#123;             #当访问50x.html时            root &#x2F;xxx&#x2F;xxx&#x2F;html             #50x.html 页面所在位置        &#125;            &#125;        server &#123;        ... ... &#125; &#125;</code></pre></div><p>一个 server 可以出现多个 location ，我们对不同的访问路径进行不同情况的配置<br>我们再来看看 http 的配置详情。</p><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">http &#123;    sendfile  on                  #高效传输文件的模式 一定要开启    keepalive_timeout   65        #客户端服务端请求超时时间    log_format  main   XXX        #定义日志格式 代号为main    access_log  &#x2F;usr&#x2F;local&#x2F;access.log  main     #日志保存地址 格式代码 main&#125;</code></pre></div><p>下面是 nginx 一些配置中常用的内置全局变量，你可以在配置的任何位置使用它们。</p><p><img src="/blog/img/nginx-3.jpg"></p><p><strong>六.Nginx实战</strong></p><p>各种开发工具的配置结合实战来讲述，会让人更易理解。</p><p>我们先实现一个小目标：不考虑复杂的配置，仅仅是完成一个 http 反向代理。</p><p>nginx.conf 配置文件如下：</p><blockquote><p><em>注：_</em><code>conf/nginx.conf</code> 是 nginx 的默认配置文件。你也可以使用 nginx -c 指定你的配置文件_</p></blockquote><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">#运行用户#user somebody;#启动进程,通常设置成和cpu的数量相等worker_processes  1;#全局错误日志error_log  D:&#x2F;Tools&#x2F;nginx-1.10.1&#x2F;logs&#x2F;error.log;error_log  D:&#x2F;Tools&#x2F;nginx-1.10.1&#x2F;logs&#x2F;notice.log  notice;error_log  D:&#x2F;Tools&#x2F;nginx-1.10.1&#x2F;logs&#x2F;info.log  info;#PID文件，记录当前启动的nginx的进程IDpid        D:&#x2F;Tools&#x2F;nginx-1.10.1&#x2F;logs&#x2F;nginx.pid;#工作模式及连接数上限events &#123;    worker_connections 1024;    #单个后台worker process进程的最大并发链接数&#125;#设定http服务器，利用它的反向代理功能提供负载均衡支持http &#123;    #设定mime类型(邮件支持类型),类型由mime.types文件定义    include       D:&#x2F;Tools&#x2F;nginx-1.10.1&#x2F;conf&#x2F;mime.types;    default_type  application&#x2F;octet-stream;    #设定日志    log_format  main  &#39;[$remote_addr] - [$remote_user] [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log    D:&#x2F;Tools&#x2F;nginx-1.10.1&#x2F;logs&#x2F;access.log main;    rewrite_log     on;    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I&#x2F;O处理速度，降低系统的uptime.    sendfile        on;    #tcp_nopush     on;    #连接超时时间    keepalive_timeout  120;    tcp_nodelay        on;    #gzip压缩开关    #gzip  on;    #设定实际的服务器列表    upstream zp_server1&#123;        server 127.0.0.1:8089;    &#125;    #HTTP服务器    server &#123;        #监听80端口，80端口是知名端口号，用于HTTP协议        listen       80;        #定义使用www.xx.com访问        server_name  www.helloworld.com;        #首页        index index.html        #指向webapp的目录        root D:01_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebapp;        #编码格式        charset utf-8;        #代理配置参数        proxy_connect_timeout 180;        proxy_send_timeout 180;        proxy_read_timeout 180;        proxy_set_header Host $host;        proxy_set_header X-Forwarder-For $remote_addr;        #反向代理的路径（和upstream绑定），location 后面设置映射的路径        location &#x2F; &#123;            proxy_pass http:&#x2F;&#x2F;zp_server1;        &#125;        #静态文件，nginx自己处理        location ~ ^&#x2F;(images|javascript|js|css|flash|media|static)&#x2F; &#123;            root D:01_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebappviews;            #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。            expires 30d;        &#125;        #设定查看Nginx状态的地址        location &#x2F;NginxStatus &#123;            stub_status           on;            access_log            on;            auth_basic            &quot;NginxStatus&quot;;            auth_basic_user_file  conf&#x2F;htpasswd;        &#125;        #禁止访问 .htxxx 文件        location ~ &#x2F;.ht &#123;            deny all;        &#125;        #错误处理页面（可选择性配置）        #error_page   404              &#x2F;404.html;        #error_page   500 502 503 504  &#x2F;50x.html;        #location &#x3D; &#x2F;50x.html &#123;        #    root   html;        #&#125;    &#125;&#125;</code></pre></div><p>好了，让我们来试试吧：</p><ol><li>启动 webapp，注意启动绑定的端口要和 nginx 中的 upstream 设置的端口保持一致。</li><li>更改 host：在 C:WindowsSystem32driversetc 目录下的 host 文件中添加一条 DNS 记录</li></ol><div class="code-wrapper"><pre class="language-none"><code class="language-none">127.0.0.1 www.helloworld.com</code></pre></div><ol><li>启动前文中 startup.bat 的命令</li><li>在浏览器中访问 <a href="http://www.helloworld.com,不出意外,已经可以访问了./">www.helloworld.com，不出意外，已经可以访问了。</a></li></ol><h3 id="搭建文件服务器"><a href="#搭建文件服务器" class="headerlink" title="搭建文件服务器"></a><strong>搭建文件服务器</strong></h3><p>有时候，团队需要归档一些数据或资料，那么文件服务器必不可少。使用 Nginx 可以非常快速便捷的搭建一个简易的文件服务。</p><p>Nginx 中的配置要点：</p><ul><li>将 autoindex 开启可以显示目录，默认不开启。</li><li>将 autoindex_exact_size 开启可以显示文件的大小。</li><li>将 autoindex_localtime 开启可以显示文件的修改时间。</li><li>root 用来设置开放为文件服务的根路径。</li><li>charset 设置为 charset utf-8,gbk;，可以避免中文乱码问题</li></ul><p>一个最简化的配置如下：</p><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">autoindex on;# 显示目录autoindex_exact_size on;# 显示文件大小autoindex_localtime on;# 显示文件时间server &#123;    charset      utf-8,gbk; # windows 服务器下设置后，依然乱码，暂时无解    listen       9050 default_server;    listen       [::]:9050 default_server;    server_name  _;    root         &#x2F;share&#x2F;fs;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven配置学习</title>
    <link href="/2020/07/27/maven/"/>
    <url>/2020/07/27/maven/</url>
    
    <content type="html"><![CDATA[<div class="htmledit_views" id="content_views">                                            <p>二、pom文件节点</p><p>pom.xml文件的节点大致可以分为以下几个部分：</p><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string"><span class="hljs-string">"http://maven.apache.org/POM/4.0.0</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">            http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!-- 基本配置 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!-- 依赖配置 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!-- 构建配置 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">reporting</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">reporting</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!-- 项目信息 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">inceptionYear</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">inceptionYear</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">licenses</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">licenses</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">organization</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">organization</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">developers</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">developers</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">contributors</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">contributors</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!-- 环境设置 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">issueManagement</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">issueManagement</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">ciManagement</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">ciManagement</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">mailingLists</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">mailingLists</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">scm</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">scm</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">prerequisites</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">prerequisites</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><p>接下来，我们就这几个部分进行挨个学习。</p><p>1. 基础配置信息</p><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment">&lt;!-- pom模型版本，maven2和3只能为4.0.0--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment">&lt;!-- 项目的组ID，用于maven定位--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.company.bank<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment">&lt;!-- 项目ID，通常是项目的名称,唯一标识符--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment">&lt;!-- 项目的版本--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment">&lt;!-- 项目的打包方式--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><p>pom.xml文件中，最外层的标签是<code>project</code>标签，该标签定义了如下属性：</p><blockquote><ol><li><code>xmlns</code>属性：表明了该标签下元素的默认命名空间是：<a href="https://link.jianshu.com?t=http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0" rel="nofollow">http://maven.apache.org/POM/4.0.0</a>，xml文件中，定义命名空间的格式为：xmlns:namespace-prefix="namespaceURI"，而定义默认命名空间的格式为：xmlns="namespaceURI"；</li>    <li><code>xmlns:xsi</code>属性：定义了一个namespace-prefix，其代表的命名空间URI为：<a href="https://link.jianshu.com?t=http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema-instance" rel="nofollow">http://www.w3.org/2001/XMLSchema-instance</a>，定义该命名空间主要是为了更方便的使用其所代表的命名空间中的schemaLocation属性；其中，使用xsi作为namespace-prefix，并不是硬性规定，只是一种通用的选择，当然也可以改成别的命名；</li>    <li><code>xsi:schemaLocation</code>属性：该属性的使用格式为：<code>xsi:schemaLocation="namespaceURI1 schemaURI1 namespaceURI2 schemaURI2 ..."</code>，这里是说使用schemaURI1所对应的schema文件，校验命名空间namespaceURI1下的元素是否符合XML语法规范，后面的则是以此类推。</li></ol></blockquote><hr><p>再来看一下基础信息的几个节点：</p><div class="table-box"><table><thead><tr><th>节点</th>            <th>对应的解释</th>        </tr></thead><tbody><tr><td>modelVersion</td>            <td>pom模型版本，根据官方文档，Maven2和3只能为4.0.0</td>        </tr><tr><td>groupId</td>            <td>项目组id，表明该项目所属的组织或公司，命名规则通常为组织或公司域名反转，然后再加项目名称</td>        </tr><tr><td>artifactId</td>            <td>项目的id，有时候和项目名保持一致，有时候是<code>项目名 + 模块名</code>，该id是唯一的，一个goupId下面可能会有多个artifactId，就是通过artifactId区分。比如：<code>consumer-banking</code>。</td>        </tr><tr><td>version</td>            <td>当前项目的版本号，一般是：<code>大版本.小版本.增量版本-限定版本号</code>，<code>SHAPSHOT</code>意为快照，说明该项目还处于开发中</td>        </tr><tr><td>packaging</td>            <td>项目的打包方式，常用可选值：<code>pom, jar, ejb, maven-plugin, war, ear, rar, par</code>等，默认方式为jar</td>        </tr></tbody></table></div><p>2. 项目信息</p><p>下面再来看下项目的一些信息：</p><div class="table-box"><table><thead><tr><th>节点</th>            <th>对应的解释</th>        </tr></thead><tbody><tr><td>name</td>            <td>声明了一个对于用户更加友好的项目名称，非必须项，一般用于Maven生成的文档</td>        </tr><tr><td>description</td>            <td>项目的详细描述信息，能使用HTML格式描述时不建议使用纯文本来描述， 一般用于Maven生成的文档</td>        </tr><tr><td>url</td>            <td>项目主页的url，一般用于Maven生成的文档</td>        </tr><tr><td>inceptionYear</td>            <td>项目开始的年份，一般是4位数字，涉及到介绍情况时用作提供版权信息</td>        </tr><tr><td>licenses</td>            <td>当前项目所有的许可文件，每一个许可文件用一个许可元素来描述，然后描述额外的元素。 通常只列出适用于这个项目的许可文件，无需列出依赖项目的 许可文件列表。如果列出多个license，那么用户可以选择其中所需的，而不是接受所有的许可文件。</td>        </tr><tr><td>organization</td>            <td>组织相关信息</td>        </tr><tr><td>developers</td>            <td>项目开发人员列表</td>        </tr><tr><td>contributors</td>            <td>项目其他贡献者列表，同developers</td>        </tr></tbody></table></div><p>licenses列表：</p><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">license</span>&gt;</span>    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--license用于法律上的名称--&gt;</span>    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>     </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--官方的license正文页面的URL--&gt;</span>    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>....<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--项目分发的主要方式：repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖--&gt;</span>    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">distribution</span>&gt;</span>repo<span class="hljs-tag">&lt;/<span class="hljs-name">distribution</span>&gt;</span>     </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--关于license的补充信息--&gt;</span>    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">comments</span>&gt;</span>....<span class="hljs-tag">&lt;/<span class="hljs-name">comments</span>&gt;</span>     </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">license</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><p>organization属性：</p><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">organization</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!-- 组织的主页 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!-- 组织名称 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">organization</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><p>developers属性：</p><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">developers</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--某个开发者信息--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">developer</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--开发者的唯一标识符--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>....<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--开发者的全名--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--开发者的email--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--开发者的主页--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>...<span class="hljs-tag">&lt;<span class="hljs-name">url</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--开发者在项目中的角色--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">roles</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">role</span>&gt;</span>Java Dev<span class="hljs-tag">&lt;/<span class="hljs-name">role</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">role</span>&gt;</span>Web UI<span class="hljs-tag">&lt;/<span class="hljs-name">role</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">roles</span>&gt;</span> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--开发者所属组织--&gt;</span> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">organization</span>&gt;</span>sun<span class="hljs-tag">&lt;/<span class="hljs-name">organization</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--开发者所属组织的URL--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">organizationUrl</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">organizationUrl</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--开发者属性，如即时消息如何处理等--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!-- 和主标签中的properties一样，可以随意定义子标签 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--开发者所在时区， -11到12范围内的整数。--&gt;</span> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">timezone</span>&gt;</span>-5<span class="hljs-tag">&lt;/<span class="hljs-name">timezone</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">developer</span>&gt;</span>  </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">developers</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><p>contributors属性：</p><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">contributors</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">contributor</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        ...</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">contributor</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">contributors</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><p>3. 依赖配置</p><ol><li><code>dependencies</code>：项目相关依赖，如果父项目中的依赖，会被子项目引用，所以一般在父项目中定义子项目中共有的依赖。并且如果有需要，子项目可以修改所依赖包的版本：</li></ol><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><ol><li><code>parent</code>：用于确定父项目的坐标位置。</li></ol><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.learnPro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SIP-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><ul><li>groupId： 父项目的组Id标识符</li>    <li>artifactId：父项目的唯一标识符</li>    <li>relativePath：Maven首先在当前项目中找父项目的pom，然后在文件系统的这个位置（relativePath）查找，然后在本地仓库查找，再在远程仓库找。</li>    <li>version：父项目的版本</li></ul><ol><li><code>dependencyManagement</code>：用于帮助管理children的依赖。例如如果parent使用<code>dependencyManagement</code>定义了一个<code>junit:junit4.0</code>，那么它的children就可以只引用 groupId和artifactId，而version就可以直接使用父模块的，如果有需要，我们也可以设置version，这样的好处就是可以集中管理依赖的详情，并且也更灵活。<br>      不过<code>dependencyManagement</code>里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。配置同<code>dependencies</code>类似；</li><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">&lt;!-- 子项目先通过parent继承之后，就可以引入使用了 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><p>dependencies几个重要的属性介绍：</p><blockquote><ol><li>type属性，默认为jar，指定pom，可以定义整个pom文件；</li>    <li>scope属性，当前包的依赖范围，用于限制依赖项的传递性，通过控制依赖的范围，可以指定该依赖在什么阶段有效。该属性共有5个值，默认是<code>compile</code>，也就是依赖关系在包含编译，测试，运行的所有类路径中都是可用的。而比如<code>provided</code>，则是依赖关系在编译和测试阶段的类路径中是可用的。如需查看全部，可参考：<a href="https://link.jianshu.com?t=http%3A%2F%2Fmaven.apache.org%2Fguides%2Fintroduction%2Fintroduction-to-dependency-mechanism.html" rel="nofollow">Introduction to the Dependency Mechanism -Dependency Scope</a></li>    <li>optional属性，因为依赖是具有传递性的，例如 Project A 依赖于 Project B，B 依赖于 C，那么 B 对 C 的依赖关系也会传递给 A，如果我们不需要这种传递性依赖，就可以通过设置该属性的值。默认为false，即子项目默认都继承，true的话子项目必须显示的引入，与dependencyManagement里定义的依赖类似；</li>    <li>exclusions和exclusion属性，用于移除项目依赖相关，如果项目X需要A，而A包含B依赖，那么X可以声明不要B依赖，只要在exclusions中声明exclusion，将B从依赖树中删除即可。这一般用于解决jar包冲突的问题；</li></ol></blockquote><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.china.shared<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>alibaba.apollo.webx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>org.slf4j.slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.external<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><ol><li><code>modules</code>：Maven项目的一大特点就是以多模块著称，该标签就是用于指定当前项目所包含的模块，对该模块进行的Maven操作，会让所有子模块也进行相应的操作；</li></ol><div class="code-wrapper"><pre class="has" name="code"><code class="hljs crystal"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&lt;modules&gt;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   &lt;<span class="hljs-class"><span class="hljs-keyword">module</span>&gt;<span class="hljs-title">com</span>-<span class="hljs-title">a</span>&lt;/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   &lt;<span class="hljs-class"><span class="hljs-keyword">module</span>&gt;<span class="hljs-title">com</span>-<span class="hljs-title">b</span>&lt;/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   &lt;<span class="hljs-class"><span class="hljs-keyword">module</span>&gt;<span class="hljs-title">com</span>-<span class="hljs-title">c</span>&lt;/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&lt;modules/&gt;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><ol><li><code>properties</code>：该标签用于定义pom文件中的常量，这样，在pom文件的任何地方，都可以通过<code>$&#123;java.version&#125;</code>来引用该值；</li></ol><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!-- 定义常量 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">rocketmq.version</span>&gt;</span>3.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">rocketmq.version</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">&lt;!-- 使用 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.rocketmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rocketmq-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;rocketmq.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><p>4. 构建配置</p><ol><li>所谓的build，也就是项目构建。在构建配置的过程中，一般包含两个部分，一个是&lt;build&gt;，另一个是&lt;reporting&gt;；而在Maven的pom.xml中build又分为两种，一种被称为Project Build，也就是&lt;project&gt;下的直接子元素，另一种&lt;build&gt;被称为Profile Build，即是&lt;profile&gt;的直接子元素。Profile Build包含了基本的build元素，而Project Build还包含两个特殊的元素，即各种&lt;...Directory&gt;和&lt;extensions&gt;。</li></ol><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln hundred" style="width:2185px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">scriptSourceDirectory</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">testSourceDirectory</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--被编译过的应用程序class文件存放的目录。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--被编译过的测试class文件存放的目录。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">testOutputDirectory</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--使用来自该项目的一系列构建扩展--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--描述使用到的构建扩展。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">extension</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--构建扩展的groupId--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--构建扩展的artifactId--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--构建扩展的版本--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">extension</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">defaultGoal</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--描述存放资源的目录，该路径相对POM路径--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--包含的模式列表，例如**/*.xml.--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--排除的模式列表，例如**/*.xml--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">testResources</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">testResource</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">testResource</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">testResources</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--构建产生的所有文件存放的目录--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--使用的插件列表 。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--plugin元素包含描述插件所需要的信息。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">&lt;!--插件在仓库里的group ID--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">&lt;!--插件在仓库里的artifact ID--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="68"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">&lt;!--被使用的插件的版本（或版本范围）--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-comment">&lt;!--execution元素包含了插件执行需要的信息--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="78"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="79"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="80"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">&lt;!--配置的执行目标--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="82"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="83"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">&lt;!--配置是否被传播到子POM--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="84"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="85"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">&lt;!--作为DOM对象的配置--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="86"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="87"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="88"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="89"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">&lt;!--项目引入插件所需要的额外依赖--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="90"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="91"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="92"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="93"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        ......</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="94"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="95"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="96"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">&lt;!--任何配置是否被传播到子项目--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="97"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="98"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">&lt;!--作为DOM对象的配置--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="99"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="100"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="101"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="102"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="103"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--使用的插件列表--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="104"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="105"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="106"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="107"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="108"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="109"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="110"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="111"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="112"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="113"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="114"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="115"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="116"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="117"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="118"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="119"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="120"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="121"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">&lt;!--参见dependencies/dependency元素--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="122"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="123"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    ......</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="124"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="125"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="126"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="127"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="128"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="129"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="130"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="131"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><ol><li>reporting，该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。</li></ol><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">reporting</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--true，则网站不包括默认的报表。这包括“项目信息”菜单中的报表。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">excludeDefaults</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">&lt;!--使用的报表插件和他们的配置。--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">&lt;!--plugin元素包含描述报表插件需要的信息--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--报表插件在仓库里的group ID--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--报表插件在仓库里的artifact ID--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--被使用的报表插件的版本（或版本范围）--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--任何配置是否被传播到子项目--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!--报表插件的配置--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment"><span class="hljs-comment">&lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">              例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">              2，5，8构成B报表集，对应另一个执行目标--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">reportSets</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">&lt;!--表示报表的一个集合，以及产生该集合的配置--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;<span class="hljs-name">reportSet</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-comment">&lt;!--报表集合的唯一标识符，POM继承时用到--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-comment">&lt;!--产生报表集合时，被使用的报表的配置--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-comment">&lt;!--配置是否被继承到子POMs--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">inherited</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-comment">&lt;!--这个集合里使用到哪些报表--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-tag">&lt;<span class="hljs-name">reports</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-tag">&lt;/<span class="hljs-name">reportSet</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;/<span class="hljs-name">reportSets</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">reporting</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><p>5. 环境配置</p><ol><li><code>issueManagement</code>：用于缺陷系统的跟踪与管理，比如Bugzilla, Jira等管理工具：</li></ol><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">issueManagement</span>&gt;</span> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">system</span>&gt;</span>Bugzilla<span class="hljs-tag">&lt;/<span class="hljs-name">system</span>&gt;</span> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://127.0.0.1/bugzilla/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">issueManagement</span>&gt;</span> </div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><ol><li><code>ciManagement</code>：项目的持续集成信息：</li></ol><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">ciManagement</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">system</span>&gt;</span>continuum<span class="hljs-tag">&lt;/<span class="hljs-name">system</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://127.0.0.1:8080/continuum<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">notifiers</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">notifier</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>mail<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">sendOnError</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">sendOnError</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">sendOnFailure</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">sendOnFailure</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">sendOnSuccess</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">sendOnSuccess</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">sendOnWarning</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">sendOnWarning</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>continuum@127.0.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">notifier</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">notifiers</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">ciManagement</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><blockquote><ol><li>system：持续集成系统的名字</li>    <li>url：持续集成系统的URL</li>    <li>notifiers：构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）</li></ol></blockquote><ul><li>type：通知方式</li>    <li>sendOnError：错误时是否通知</li>    <li>sendOnFailure：失败时是否通知</li>    <li>sendOnSuccess：成功时是否通知</li>    <li>sendOnWarning：警告时是否通知</li>    <li>address：通知发送到的地址</li>    <li>configuration：扩展项</li></ul><ol><li><code>mailingLists</code>：项目相关邮件列表：</li><blockquote><ol><li>subscribe, unsubscribe: 订阅邮件（取消订阅）的地址或链接，如果是邮件地址，创建文档时，链接会被自动创建；</li>    <li>archive：浏览邮件信息的URL；</li>    <li>post：接收邮件的地址；</li></ol></blockquote><ol><li><code>SCM</code>：(Source Control Management)，该标签允许你配置你的代码库，供Maven Web站点和其他插件使用。</li></ol><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">scm</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">connection</span>&gt;</span>scm:svn:http://127.0.0.1/svn/my-project<span class="hljs-tag">&lt;/<span class="hljs-name">connection</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">developerConnection</span>&gt;</span>scm:svn:https://127.0.0.1/svn/my-project<span class="hljs-tag">&lt;/<span class="hljs-name">developerConnection</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">tag</span>&gt;</span>HEAD<span class="hljs-tag">&lt;/<span class="hljs-name">tag</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://127.0.0.1/websvn/my-project<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">scm</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><ul><li>connection, developerConnection：这两个表示我们如何连接到maven的版本库。connection只提供读，developerConnection将提供写的请求；写法如：<code>scm:[provider]:[provider_specific]</code>，如果连接到CVS仓库，可以配置如下：<br><code>scm:cvs:pserver:127.0.0.1:/cvs/root:my-project</code></li>    <li>tag：项目标签，默认HEAD</li>    <li>url：共有仓库路径</li></ul><ol><li><code>prerequisites</code>：项目构建的前提。</li><ol><li><code>repositories</code>，<code>pluginRepositories</code>，依赖和扩展的远程仓库列表；pom里面的仓库与setting.xml里的仓库功能是一样的。主要的区别在于，pom里的仓库是个性化的。比如一家大公司里的setting文件是公用 的，所有项目都用一个setting文件，但各个子项目却会引用不同的第三方库，所以就需要在pom里设置自己需要的仓库地址。而<code>pluginRepositories</code>，与Repositories具有类似的结构，只是Repositories是dependencies的home，而这个是plugins 的home。</li></ol><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>always<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">checksumPolicy</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>never<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>&gt;</span>fail<span class="hljs-tag">&lt;/<span class="hljs-name">checksumPolicy</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>codehausSnapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Codehaus Snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://snapshots.maven.codehaus.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;<span class="hljs-name">pluginRepositories</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    ...</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginRepositories</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><ul><li>releases，snapshots：这是各种构件的策略，release或者snapshot，这两个集合，POM就可以根据独立仓库任意类型的依赖改变策略。如：一个人可能只激活下载snapshot用来开发。</li>    <li>enable：true或者false，决定仓库是否对于各自的类型激活(release 或者 snapshot)。</li>    <li>updatePolicy: 这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的。有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never。</li>    <li>checksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。</li>    <li>layout：在上面描述仓库的时候，提到他们有统一的布局。Maven 2有它仓库默认布局。然而，Maven 1.x有不同布局。使用这个元素来表明它是default还是legacy。</li></ul><ol><li><code>profiles</code>：POM 4.0的一个新特性是一个项目能够根据所构建的环境改变设置。通过profiles，我们可以指定构建的环境是开发，测试，UAT，生产等环境；</li><p>我们可以通过activation标签来激活相应的profile，也就是指定要构建的默认的环境，并且可以配置各种需要的环境，并且激活profile的方式也有多种，具体参数可查看官网文档。</p><div class="code-wrapper"><pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string"><span class="hljs-string">"http://maven.apache.org/POM/4.0.0</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">                      https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  ...</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.5<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">os</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Windows XP<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">family</span>&gt;</span>Windows<span class="hljs-tag">&lt;/<span class="hljs-name">family</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">arch</span>&gt;</span>x86<span class="hljs-tag">&lt;/<span class="hljs-name">arch</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.2600<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">os</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>sparrow-type<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>African<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">exists</span>&gt;</span>$&#123;basedir&#125;/file2.properties<span class="hljs-tag">&lt;/<span class="hljs-name">exists</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">          <span class="hljs-tag">&lt;<span class="hljs-name">missing</span>&gt;</span>$&#123;basedir&#125;/file1.properties<span class="hljs-tag">&lt;/<span class="hljs-name">missing</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      ...</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div><p>&nbsp;</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-DDL</title>
    <link href="/2020/07/04/mysql-DDL/"/>
    <url>/2020/07/04/mysql-DDL/</url>
    
    <content type="html"><![CDATA[<h2 id="Review-mysql"><a href="#Review-mysql" class="headerlink" title="Review mysql"></a>Review mysql</h2><h3 id="库管理"><a href="#库管理" class="headerlink" title="库管理"></a>库管理</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、创建库<span class="token keyword">create</span> <span class="token keyword">database</span> 【<span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span>】 库名【 <span class="token keyword">character</span> <span class="token keyword">set</span> 字符集名】<span class="token punctuation">;</span>二、修改库<span class="token keyword">alter</span> <span class="token keyword">database</span> 库名 <span class="token keyword">character</span> <span class="token keyword">set</span> 字符集名<span class="token punctuation">;</span>三、删除库<span class="token keyword">drop</span> <span class="token keyword">database</span> 【<span class="token keyword">if</span> <span class="token keyword">exists</span>】 库名<span class="token punctuation">;</span></code></pre></div><h3 id="表管理"><a href="#表管理" class="headerlink" title="表管理"></a>表管理</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、创建表 ★<span class="token keyword">create</span> <span class="token keyword">table</span> 【<span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span>】 表名<span class="token punctuation">(</span>字段名 字段类型 【约束】<span class="token punctuation">,</span>字段名 字段类型 【约束】<span class="token punctuation">,</span>。。。字段名 字段类型 【约束】 <span class="token punctuation">)</span>二、修改表<span class="token number">1.</span>添加列<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">column</span> 列名 类型 【<span class="token keyword">first</span><span class="token operator">|</span><span class="token keyword">after</span> 字段名】<span class="token punctuation">;</span><span class="token number">2.</span>修改列的类型或约束<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 列名 新类型 【新约束】<span class="token punctuation">;</span><span class="token number">3.</span>修改列名<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change <span class="token keyword">column</span> 旧列名 新列名 类型<span class="token punctuation">;</span><span class="token number">4</span> <span class="token punctuation">.</span>删除列<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">column</span> 列名<span class="token punctuation">;</span><span class="token number">5.</span>修改表名<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">rename</span> 【<span class="token keyword">to</span>】 新表名<span class="token punctuation">;</span>三、删除表<span class="token keyword">drop</span> <span class="token keyword">table</span>【<span class="token keyword">if</span> <span class="token keyword">exists</span>】 表名<span class="token punctuation">;</span>四、复制表<span class="token number">1</span>、复制表的结构<span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token operator">like</span> 旧表<span class="token punctuation">;</span><span class="token number">2</span>、复制表的结构<span class="token operator">+</span>数据<span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token keyword">select</span> 查询列表 <span class="token keyword">from</span> 旧表【<span class="token keyword">where</span> 筛选】<span class="token punctuation">;</span></code></pre></div><h3 id="类型约束"><a href="#类型约束" class="headerlink" title="类型约束"></a>类型约束</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、数值型<span class="token number">1</span>、整型<span class="token keyword">tinyint</span>、<span class="token keyword">smallint</span>、<span class="token keyword">mediumint</span>、<span class="token keyword">int</span><span class="token operator">/</span><span class="token keyword">integer</span>、<span class="token keyword">bigint</span><span class="token number">1</span>         <span class="token number">2</span>        <span class="token number">3</span>          <span class="token number">4</span>            <span class="token number">8</span>特点：①都可以设置无符号和有符号，默认有符号，通过<span class="token keyword">unsigned</span>设置无符号②如果超出了范围，会报<span class="token keyword">out</span> <span class="token operator">or</span> range异常，插入临界值③长度可以不指定，默认会有一个长度长度代表显示的最大宽度，如果不够则左边用<span class="token number">0</span>填充，但需要搭配zerofill，并且默认变为无符号整型<span class="token number">2</span>、浮点型定点数：<span class="token keyword">decimal</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span>D<span class="token punctuation">)</span>浮点数:<span class="token keyword">float</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span>D<span class="token punctuation">)</span>   <span class="token number">4</span><span class="token keyword">double</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span>D<span class="token punctuation">)</span>  <span class="token number">8</span>特点：①M代表整数部位<span class="token operator">+</span>小数部位的个数，D代表小数部位②如果超出范围，则报<span class="token keyword">out</span> <span class="token operator">or</span> range异常，并且插入临界值③M和D都可以省略，但对于定点数，M默认为<span class="token number">10</span>，D默认为<span class="token number">0</span>④如果精度要求较高，则优先考虑使用定点数二、字符型<span class="token keyword">char</span>、<span class="token keyword">varchar</span>、<span class="token keyword">binary</span>、<span class="token keyword">varbinary</span>、<span class="token keyword">enum</span>、<span class="token keyword">set</span>、<span class="token keyword">text</span>、<span class="token keyword">blob</span><span class="token keyword">char</span>：固定长度的字符，写法为<span class="token keyword">char</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span>，最大长度不能超过M，其中M可以省略，默认为<span class="token number">1</span><span class="token keyword">varchar</span>：可变长度的字符，写法为<span class="token keyword">varchar</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span>，最大长度不能超过M，其中M不可以省略三、日期型<span class="token keyword">year</span>年<span class="token keyword">date</span>日期<span class="token keyword">time</span>时间<span class="token keyword">datetime</span> 日期<span class="token operator">+</span>时间          <span class="token number">8</span>      <span class="token keyword">timestamp</span> 日期<span class="token operator">+</span>时间         <span class="token number">4</span>   比较容易受时区、语法模式、版本的影响，更能反映当前时区的真实时间</code></pre></div><h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、常见的约束<span class="token operator">NOT</span> <span class="token boolean">NULL</span>：非空，该字段的值必填<span class="token keyword">UNIQUE</span>：唯一，该字段的值不可重复<span class="token keyword">DEFAULT</span>：默认，该字段的值不用手动插入有默认值<span class="token keyword">CHECK</span>：检查，mysql不支持<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span>：主键，该字段的值不可重复并且非空  <span class="token keyword">unique</span><span class="token operator">+</span><span class="token operator">not</span> <span class="token boolean">null</span><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span>：外键，该字段的值引用了另外的表的字段主键和唯一<span class="token number">1</span>、区别：①、一个表至多有一个主键，但可以有多个唯一②、主键不允许为空，唯一可以为空<span class="token number">2</span>、相同点都具有唯一性都支持组合键，但不推荐外键：<span class="token number">1</span>、用于限制两个表的关系，从表的字段值引用了主表的某字段值<span class="token number">2</span>、外键列和主表的被引用列要求类型一致，意义一样，名称无要求<span class="token number">3</span>、主表的被引用列要求是一个<span class="token keyword">key</span>（一般就是主键）<span class="token number">4</span>、插入数据，先插入主表删除数据，先删除从表可以通过以下两种方式来删除主表的记录<span class="token comment">#方式一：级联删除</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stuinfo <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> fk_stu_major <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span class="token comment">#方式二：级联置空</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stuinfo <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> fk_stu_major <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>二、创建表时添加约束<span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段名 字段类型 <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token comment">#非空</span>字段名 字段类型 <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token comment">#主键</span>字段名 字段类型 <span class="token keyword">unique</span><span class="token punctuation">,</span><span class="token comment">#唯一</span>字段名 字段类型 <span class="token keyword">default</span> 值<span class="token punctuation">,</span><span class="token comment">#默认</span><span class="token keyword">constraint</span> 约束名 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表（被引用列）<span class="token punctuation">)</span>注意：支持类型可以起约束名列级约束除了外键不可以表级约束除了非空和默认可以，但对主键无效列级约束可以在一个字段上追加多个，中间用空格隔开，没有顺序要求三、修改表时添加或删除约束<span class="token number">1</span>、非空添加非空<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 字段名 字段类型 <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>删除非空<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 字段名 字段类型 <span class="token punctuation">;</span><span class="token number">2</span>、默认添加默认<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 字段名 字段类型 <span class="token keyword">default</span> 值<span class="token punctuation">;</span>删除默认<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 字段名 字段类型 <span class="token punctuation">;</span><span class="token number">3</span>、主键添加主键<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span>【 <span class="token keyword">constraint</span> 约束名】 <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token punctuation">;</span>删除主键<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span class="token number">4</span>、唯一添加唯一<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span>【 <span class="token keyword">constraint</span> 约束名】 <span class="token keyword">unique</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token punctuation">;</span>删除唯一<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">index</span> 索引名<span class="token punctuation">;</span><span class="token number">5</span>、外键添加外键<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span>【 <span class="token keyword">constraint</span> 约束名】 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表（被引用列）<span class="token punctuation">;</span>删除外键<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> 约束名<span class="token punctuation">;</span>四、自增长列特点：<span class="token number">1</span>、不用手动插入值，可以自动提供序列值，默认从<span class="token number">1</span>开始，步长为<span class="token number">1</span>auto_increment_increment如果要更改起始值：手动插入值如果要更改步长：更改系统变量<span class="token keyword">set</span> auto_increment_increment<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token number">2</span>、一个表至多有一个自增长列<span class="token number">3</span>、自增长列只能支持数值型<span class="token number">4</span>、自增长列必须为一个<span class="token keyword">key</span>一、创建表时设置自增长列<span class="token keyword">create</span> <span class="token keyword">table</span> 表<span class="token punctuation">(</span>字段名 字段类型 约束 <span class="token keyword">auto_increment</span><span class="token punctuation">)</span>二、修改表时设置自增长列<span class="token keyword">alter</span> <span class="token keyword">table</span> 表 <span class="token keyword">modify</span> <span class="token keyword">column</span> 字段名 字段类型 约束 <span class="token keyword">auto_increment</span>三、删除自增长列<span class="token keyword">alter</span> <span class="token keyword">table</span> 表 <span class="token keyword">modify</span> <span class="token keyword">column</span> 字段名 字段类型 约束 </code></pre></div>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-DML</title>
    <link href="/2020/07/04/mysql-DML/"/>
    <url>/2020/07/04/mysql-DML/</url>
    
    <content type="html"><![CDATA[<h2 id="Review-mysql"><a href="#Review-mysql" class="headerlink" title="Review mysql"></a>Review mysql</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、方式一语法：<span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段名<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>特点：<span class="token number">1</span>、要求值的类型和字段的类型要一致或兼容<span class="token number">2</span>、字段的个数和顺序不一定与原始表中的字段个数和顺序一致但必须保证值和字段一一对应<span class="token number">3</span>、假如表中有可以为<span class="token boolean">null</span>的字段，注意可以通过以下两种方式插入<span class="token boolean">null</span>值①字段和值都省略②字段写上，值使用<span class="token boolean">null</span><span class="token number">4</span>、字段和值的个数必须一致<span class="token number">5</span>、字段名可以省略，默认所有列二、方式二语法：<span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">set</span> 字段<span class="token operator">=</span>值<span class="token punctuation">,</span>字段<span class="token operator">=</span>值<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>两种方式 的区别：<span class="token number">1.</span>方式一支持一次插入多行，语法如下：<span class="token keyword">insert</span> <span class="token keyword">into</span> 表名【<span class="token punctuation">(</span>字段名<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>】 <span class="token keyword">values</span><span class="token punctuation">(</span>值，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token number">2.</span>方式一支持子查询，语法如下：<span class="token keyword">insert</span> <span class="token keyword">into</span> 表名查询语句<span class="token punctuation">;</span></code></pre></div><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、修改单表的记录 ★语法：<span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段<span class="token operator">=</span>值<span class="token punctuation">,</span>字段<span class="token operator">=</span>值 【<span class="token keyword">where</span> 筛选条件】<span class="token punctuation">;</span>二、修改多表的记录【补充】语法：<span class="token keyword">update</span> 表<span class="token number">1</span> 别名 <span class="token keyword">left</span><span class="token operator">|</span><span class="token keyword">right</span><span class="token operator">|</span><span class="token keyword">inner</span> <span class="token keyword">join</span> 表<span class="token number">2</span> 别名 <span class="token keyword">on</span> 连接条件  <span class="token keyword">set</span> 字段<span class="token operator">=</span>值<span class="token punctuation">,</span>字段<span class="token operator">=</span>值 【<span class="token keyword">where</span> 筛选条件】<span class="token punctuation">;</span></code></pre></div><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">方式一：使用<span class="token keyword">delete</span>一、删除单表的记录★语法：<span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 【<span class="token keyword">where</span> 筛选条件】【<span class="token keyword">limit</span> 条目数】二、级联删除<span class="token punctuation">[</span>补充<span class="token punctuation">]</span>语法：<span class="token keyword">delete</span> 别名<span class="token number">1</span><span class="token punctuation">,</span>别名<span class="token number">2</span> <span class="token keyword">from</span> 表<span class="token number">1</span> 别名 <span class="token keyword">inner</span><span class="token operator">|</span><span class="token keyword">left</span><span class="token operator">|</span><span class="token keyword">right</span> <span class="token keyword">join</span> 表<span class="token number">2</span> 别名 <span class="token keyword">on</span> 连接条件 【<span class="token keyword">where</span> 筛选条件】方式二：使用<span class="token keyword">truncate</span>语法：<span class="token keyword">truncate</span> <span class="token keyword">table</span> 表名两种方式的区别【面试题】★<span class="token number">1.</span><span class="token keyword">truncate</span>删除后，如果再插入，标识列从<span class="token number">1</span>开始  <span class="token keyword">delete</span>删除后，如果再插入，标识列从断点开始<span class="token number">2.</span><span class="token keyword">delete</span>可以添加筛选条件 <span class="token keyword">truncate</span>不可以添加筛选条件<span class="token number">3.</span><span class="token keyword">truncate</span>效率较高<span class="token number">4.</span><span class="token keyword">truncate</span>没有返回值<span class="token keyword">delete</span>可以返回受影响的行数<span class="token number">5.</span><span class="token keyword">truncate</span>不可以回滚<span class="token keyword">delete</span>可以回滚</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-DQL</title>
    <link href="/2020/06/29/mysql-DQL/"/>
    <url>/2020/06/29/mysql-DQL/</url>
    
    <content type="html"><![CDATA[<h2 id="Review-mysql"><a href="#Review-mysql" class="headerlink" title="Review mysql"></a>Review mysql</h2><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、语法<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表名<span class="token punctuation">;</span>二、特点<span class="token number">1</span>、查询列表可以是字段、常量、表达式、函数，也可以是多个<span class="token number">2</span>、查询结果是一个虚拟表三、示例<span class="token number">1</span>、查询单个字段<span class="token keyword">select</span> 字段名 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token number">2</span>、查询多个字段<span class="token keyword">select</span> 字段名，字段名 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token number">3</span>、查询所有字段<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名<span class="token number">4</span>、查询常量<span class="token keyword">select</span> 常量值<span class="token punctuation">;</span>注意：字符型和日期型的常量值必须用单引号引起来，数值型不需要<span class="token number">5</span>、查询函数<span class="token keyword">select</span> 函数名<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6</span>、查询表达式<span class="token keyword">select</span> <span class="token number">100</span><span class="token operator">/</span><span class="token number">1234</span><span class="token punctuation">;</span><span class="token number">7</span>、起别名①<span class="token keyword">as</span>②空格<span class="token number">8</span>、去重<span class="token keyword">select</span> <span class="token keyword">distinct</span> 字段名 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token number">9</span>、<span class="token operator">+</span>作用：做加法运算<span class="token keyword">select</span> 数值<span class="token operator">+</span>数值<span class="token punctuation">;</span> 直接运算<span class="token keyword">select</span> 字符<span class="token operator">+</span>数值<span class="token punctuation">;</span>先试图将字符转换成数值，如果转换成功，则继续运算；否则转换成<span class="token number">0</span>，再做运算<span class="token keyword">select</span> <span class="token boolean">null</span><span class="token operator">+</span>值<span class="token punctuation">;</span>结果都为<span class="token boolean">null</span><span class="token number">10</span>、【补充】concat函数功能：拼接字符<span class="token keyword">select</span> concat<span class="token punctuation">(</span>字符<span class="token number">1</span>，字符<span class="token number">2</span>，字符<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">11</span>、【补充】ifnull函数功能：判断某字段或表达式是否为<span class="token boolean">null</span>，如果为<span class="token boolean">null</span> 返回指定的值，否则返回原本的值<span class="token keyword">select</span> ifnull<span class="token punctuation">(</span>commission_pct<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">;</span><span class="token number">12</span>、【补充】isnull函数功能：判断某字段或表达式是否为<span class="token boolean">null</span>，如果是，则返回<span class="token number">1</span>，否则返回<span class="token number">0</span></code></pre></div><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、语法<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表名<span class="token keyword">where</span> 筛选条件二、筛选条件的分类<span class="token number">1</span>、简单条件运算符<span class="token operator">></span> <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token operator">&lt;></span> <span class="token operator">!=</span> <span class="token operator">>=</span> <span class="token operator">&lt;=</span>  <span class="token operator">&lt;=></span>安全等于<span class="token number">2</span>、逻辑运算符<span class="token operator">&amp;&amp;</span> <span class="token operator">and</span><span class="token operator">||</span> <span class="token operator">or</span><span class="token operator">!</span>  <span class="token operator">not</span><span class="token number">3</span>、模糊查询<span class="token operator">like</span>:一般搭配通配符使用，可以判断字符型或数值型通配符：<span class="token operator">%</span>任意多个字符，_任意单个字符<span class="token operator">between</span> <span class="token operator">and</span><span class="token operator">in</span><span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">/</span><span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>：用于判断<span class="token boolean">null</span>值<span class="token operator">is</span> <span class="token boolean">null</span> PK <span class="token operator">&lt;=></span>普通类型的数值<span class="token boolean">null</span>值可读性<span class="token operator">is</span> <span class="token boolean">null</span>×√√<span class="token operator">&lt;=></span>√√×</code></pre></div><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、语法<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表<span class="token keyword">where</span> 筛选条件<span class="token keyword">order</span> <span class="token keyword">by</span> 排序列表 【<span class="token keyword">asc</span>&#125;<span class="token keyword">desc</span>】二、特点<span class="token number">1</span>、<span class="token keyword">asc</span> ：升序，如果不写默认升序   <span class="token keyword">desc</span>：降序<span class="token number">2</span>、排序列表 支持 单个字段、多个字段、函数、表达式、别名<span class="token number">3</span>、<span class="token keyword">order</span> <span class="token keyword">by</span>的位置一般放在查询语句的最后（除<span class="token keyword">limit</span>语句之外）</code></pre></div><h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、概述功能：类似于java中的方法好处：提高重用性和隐藏实现细节调用：<span class="token keyword">select</span> 函数名<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">;</span>二、单行函数<span class="token number">1</span>、字符函数concat:连接substr:截取子串upper:变大写lower：变小写<span class="token keyword">replace</span>：替换length：获取字节长度trim:去前后空格lpad：左填充rpad：右填充instr:获取子串第一次出现的索引<span class="token number">2</span>、数学函数ceil:向上取整round：四舍五入mod:取模floor：向下取整<span class="token keyword">truncate</span>:截断rand:获取随机数，返回<span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span>之间的小数<span class="token number">3</span>、日期函数now：返回当前日期<span class="token operator">+</span>时间<span class="token keyword">year</span>:返回年<span class="token keyword">month</span>：返回月<span class="token keyword">day</span>:返回日date_format:将日期转换成字符curdate:返回当前日期str_to_date:将字符转换成日期curtime：返回当前时间<span class="token keyword">hour</span>:小时<span class="token keyword">minute</span>:分钟<span class="token keyword">second</span>：秒datediff:返回两个日期相差的天数monthname:以英文形式返回月<span class="token number">4</span>、其他函数version 当前数据库服务器的版本<span class="token keyword">database</span> 当前打开的数据库<span class="token keyword">user</span>当前用户password<span class="token punctuation">(</span><span class="token string">'字符'</span><span class="token punctuation">)</span>：返回该字符的密码形式md5<span class="token punctuation">(</span><span class="token string">'字符'</span><span class="token punctuation">)</span>:返回该字符的md5加密形式<span class="token number">5</span>、流程控制函数①<span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式，表达式<span class="token number">1</span>，表达式<span class="token number">2</span><span class="token punctuation">)</span>：如果条件表达式成立，返回表达式<span class="token number">1</span>，否则返回表达式<span class="token number">2</span>②<span class="token keyword">case</span>情况<span class="token number">1</span><span class="token keyword">case</span> 变量或表达式或字段<span class="token keyword">when</span> 常量<span class="token number">1</span> <span class="token keyword">then</span> 值<span class="token number">1</span><span class="token keyword">when</span> 常量<span class="token number">2</span> <span class="token keyword">then</span> 值<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> 值n<span class="token keyword">end</span>③<span class="token keyword">case</span>情况<span class="token number">2</span><span class="token keyword">case</span> <span class="token keyword">when</span> 条件<span class="token number">1</span> <span class="token keyword">then</span> 值<span class="token number">1</span><span class="token keyword">when</span> 条件<span class="token number">2</span> <span class="token keyword">then</span> 值<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> 值n<span class="token keyword">end</span>三、分组函数<span class="token number">1</span>、分类max 最大值min 最小值sum 和avg 平均值count 计算个数<span class="token number">2</span>、特点①语法<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span>②支持的类型sum和avg一般用于处理数值型max、min、count可以处理任何数据类型③以上分组函数都忽略<span class="token boolean">null</span>④都可以搭配<span class="token keyword">distinct</span>使用，实现去重的统计<span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> 字段<span class="token punctuation">)</span> <span class="token keyword">from</span> 表<span class="token punctuation">;</span>⑤count函数<span class="token function">count</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span>：统计该字段非空值的个数<span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>:统计结果集的行数案例：查询每个部门的员工个数<span class="token number">1</span> xx    <span class="token number">10</span><span class="token number">2</span> dd    <span class="token number">20</span><span class="token number">3</span> mm    <span class="token number">20</span><span class="token number">4</span> aa    <span class="token number">40</span><span class="token number">5</span> hh    <span class="token number">40</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>:统计结果集的行数效率上：MyISAM存储引擎，<span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>最高<span class="token keyword">InnoDB</span>存储引擎，<span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>和<span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>效率<span class="token operator">></span><span class="token function">count</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span>⑥ 和分组函数一同查询的字段，要求是<span class="token keyword">group</span> <span class="token keyword">by</span>后出现的字段</code></pre></div><h4 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、语法<span class="token keyword">select</span> 分组函数，分组后的字段<span class="token keyword">from</span> 表【<span class="token keyword">where</span> 筛选条件】<span class="token keyword">group</span> <span class="token keyword">by</span> 分组的字段【<span class="token keyword">having</span> 分组后的筛选】【<span class="token keyword">order</span> <span class="token keyword">by</span> 排序列表】二、特点使用关键字筛选的表 位置分组前筛选<span class="token keyword">where</span>原始表  <span class="token keyword">group</span> <span class="token keyword">by</span>的前面分组后筛选<span class="token keyword">having</span>分组后的结果<span class="token keyword">group</span> <span class="token keyword">by</span> 的后面</code></pre></div><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、含义当查询中涉及到了多个表的字段，需要使用多表连接<span class="token keyword">select</span> 字段<span class="token number">1</span>，字段<span class="token number">2</span><span class="token keyword">from</span> 表<span class="token number">1</span>，表<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>笛卡尔乘积：当查询多个表时，没有添加有效的连接条件，导致多个表所有行实现完全连接如何解决：添加有效的连接条件二、分类按年代分类：sql92：等值非等值自连接也支持一部分外连接（用于oracle、sqlserver，mysql不支持）sql99【推荐使用】内连接等值非等值自连接外连接左外右外全外（mysql不支持）交叉连接三、SQL92语法<span class="token number">1</span>、等值连接语法：<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token punctuation">,</span>表<span class="token number">2</span> 别名<span class="token keyword">where</span> 表<span class="token number">1.</span><span class="token keyword">key</span><span class="token operator">=</span>表<span class="token number">2.</span><span class="token keyword">key</span>【<span class="token operator">and</span> 筛选条件】【<span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段】【<span class="token keyword">having</span> 分组后的筛选】【<span class="token keyword">order</span> <span class="token keyword">by</span> 排序字段】特点：① 一般为表起别名②多表的顺序可以调换③n表连接至少需要n<span class="token operator">-</span><span class="token number">1</span>个连接条件④等值连接的结果是多表的交集部分<span class="token number">2</span>、非等值连接语法：<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token punctuation">,</span>表<span class="token number">2</span> 别名<span class="token keyword">where</span> 非等值的连接条件【<span class="token operator">and</span> 筛选条件】【<span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段】【<span class="token keyword">having</span> 分组后的筛选】【<span class="token keyword">order</span> <span class="token keyword">by</span> 排序字段】<span class="token number">3</span>、自连接语法：<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表 别名<span class="token number">1</span><span class="token punctuation">,</span>表 别名<span class="token number">2</span><span class="token keyword">where</span> 等值的连接条件【<span class="token operator">and</span> 筛选条件】【<span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段】【<span class="token keyword">having</span> 分组后的筛选】【<span class="token keyword">order</span> <span class="token keyword">by</span> 排序字段】四、SQL99语法<span class="token number">1</span>、内连接语法：<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表<span class="token number">1</span> 别名【<span class="token keyword">inner</span>】 <span class="token keyword">join</span> 表<span class="token number">2</span> 别名 <span class="token keyword">on</span> 连接条件<span class="token keyword">where</span> 筛选条件<span class="token keyword">group</span> <span class="token keyword">by</span> 分组列表<span class="token keyword">having</span> 分组后的筛选<span class="token keyword">order</span> <span class="token keyword">by</span> 排序列表<span class="token keyword">limit</span> 子句<span class="token punctuation">;</span>特点：①表的顺序可以调换②内连接的结果<span class="token operator">=</span>多表的交集③n表连接至少需要n<span class="token operator">-</span><span class="token number">1</span>个连接条件分类：等值连接非等值连接自连接<span class="token number">2</span>、外连接语法：<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token keyword">left</span><span class="token operator">|</span><span class="token keyword">right</span><span class="token operator">|</span><span class="token keyword">full</span>【<span class="token keyword">outer</span>】 <span class="token keyword">join</span> 表<span class="token number">2</span> 别名 <span class="token keyword">on</span> 连接条件<span class="token keyword">where</span> 筛选条件<span class="token keyword">group</span> <span class="token keyword">by</span> 分组列表<span class="token keyword">having</span> 分组后的筛选<span class="token keyword">order</span> <span class="token keyword">by</span> 排序列表<span class="token keyword">limit</span> 子句<span class="token punctuation">;</span>特点：①查询的结果<span class="token operator">=</span>主表中所有的行，如果从表和它匹配的将显示匹配行，如果从表没有匹配的则显示<span class="token boolean">null</span>②<span class="token keyword">left</span> <span class="token keyword">join</span> 左边的就是主表，<span class="token keyword">right</span> <span class="token keyword">join</span> 右边的就是主表  <span class="token keyword">full</span> <span class="token keyword">join</span> 两边都是主表③一般用于查询除了交集部分的剩余的不匹配的行<span class="token number">3</span>、交叉连接语法：<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表<span class="token number">1</span> 别名<span class="token keyword">cross</span> <span class="token keyword">join</span> 表<span class="token number">2</span> 别名<span class="token punctuation">;</span>特点：类似于笛卡尔乘积</code></pre></div><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、含义嵌套在其他语句内部的<span class="token keyword">select</span>语句称为子查询或内查询，外面的语句可以是<span class="token keyword">insert</span>、<span class="token keyword">update</span>、<span class="token keyword">delete</span>、<span class="token keyword">select</span>等，一般<span class="token keyword">select</span>作为外面语句较多外面如果为<span class="token keyword">select</span>语句，则此语句称为外查询或主查询二、分类<span class="token number">1</span>、按出现位置<span class="token keyword">select</span>后面：仅仅支持标量子查询<span class="token keyword">from</span>后面：表子查询<span class="token keyword">where</span>或<span class="token keyword">having</span>后面：标量子查询列子查询行子查询<span class="token keyword">exists</span>后面：标量子查询列子查询行子查询表子查询<span class="token number">2</span>、按结果集的行列标量子查询（单行子查询）：结果集为一行一列列子查询（多行子查询）：结果集为多行一列行子查询：结果集为多行多列表子查询：结果集为多行多列三、示例<span class="token keyword">where</span>或<span class="token keyword">having</span>后面<span class="token number">1</span>、标量子查询案例：查询最低工资的员工姓名和工资①最低工资<span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> employees②查询员工的姓名和工资，要求工资<span class="token operator">=</span>①<span class="token keyword">select</span> last_name<span class="token punctuation">,</span>salary<span class="token keyword">from</span> employees<span class="token keyword">where</span> salary<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>、列子查询案例：查询所有是领导的员工姓名①查询所有员工的 manager_id<span class="token keyword">select</span> manager_id<span class="token keyword">from</span> employees②查询姓名，employee_id属于①列表的一个<span class="token keyword">select</span> last_name<span class="token keyword">from</span> employees<span class="token keyword">where</span> employee_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> manager_id<span class="token keyword">from</span> employees<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、应用场景当要查询的条目数太多，一页显示不全二、语法<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表<span class="token keyword">limit</span> 【<span class="token keyword">offset</span>，】size<span class="token punctuation">;</span>注意：<span class="token keyword">offset</span>代表的是起始的条目索引，默认从<span class="token number">0</span>卡死size代表的是显示的条目数公式：假如要显示的页数为page，每一页条目数为size<span class="token keyword">select</span> 查询列表<span class="token keyword">from</span> 表<span class="token keyword">limit</span> <span class="token punctuation">(</span>page<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">,</span>size<span class="token punctuation">;</span></code></pre></div><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">一、含义<span class="token keyword">union</span>：合并、联合，将多次查询结果合并成一个结果二、语法查询语句<span class="token number">1</span><span class="token keyword">union</span> 【<span class="token keyword">all</span>】查询语句<span class="token number">2</span><span class="token keyword">union</span> 【<span class="token keyword">all</span>】<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>三、意义<span class="token number">1</span>、将一条比较复杂的查询语句拆分成多条语句<span class="token number">2</span>、适用于查询多个表的时候，查询的列基本是一致四、特点<span class="token number">1</span>、要求多条查询语句的查询列数必须一致<span class="token number">2</span>、要求多条查询语句的查询的各列类型、顺序最好一致<span class="token number">3</span>、<span class="token keyword">union</span> 去重，<span class="token keyword">union</span> <span class="token keyword">all</span>包含重复项</code></pre></div><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">语法：<span class="token keyword">select</span> 查询列表    ⑦<span class="token keyword">from</span> 表<span class="token number">1</span> 别名       ①连接类型 <span class="token keyword">join</span> 表<span class="token number">2</span>   ②<span class="token keyword">on</span> 连接条件         ③<span class="token keyword">where</span> 筛选          ④<span class="token keyword">group</span> <span class="token keyword">by</span> 分组列表   ⑤<span class="token keyword">having</span> 筛选         ⑥<span class="token keyword">order</span> <span class="token keyword">by</span>排序列表    ⑧<span class="token keyword">limit</span> 起始条目索引，条目数<span class="token punctuation">;</span>  ⑨</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-demo</title>
    <link href="/2020/06/15/vue-demo/"/>
    <url>/2020/06/15/vue-demo/</url>
    
    <content type="html"><![CDATA[<h2 id="1-vue脚手架"><a href="#1-vue脚手架" class="headerlink" title="1. vue脚手架"></a>1. vue脚手架</h2><div class="code-wrapper"><pre><code>用来创建vue项目的工具包创建项目:    npm install -g vue-cli    vue init webpack VueDemo开发环境运行:    cd VueDemo    npm install    npm run dev生产环境打包发布    npm run build    npm install -g serve    serve dist    http://localhost:5000</code></pre></div><h2 id="2-eslint"><a href="#2-eslint" class="headerlink" title="2. eslint"></a>2. eslint</h2><div class="code-wrapper"><pre><code>用来做项目编码规范检查的工具基本原理: 定义了很多规则, 检查项目的代码一旦发现违背了某个规则就输出相应的提示信息有相应的配置, 可定制检查</code></pre></div><h2 id="3-组件化编程"><a href="#3-组件化编程" class="headerlink" title="3. 组件化编程"></a>3. 组件化编程</h2><div class="code-wrapper"><pre><code>vue文件包含3个部分    &lt;template&gt;      &lt;div&gt;&lt;/div&gt;    &lt;/template&gt;    &lt;script&gt;        export default &#123;          props: []/&#123;&#125;          data()&#123;&#125;,          computed: &#123;&#125;          methods: &#123;&#125;,                    watch: &#123;&#125;          filters: &#123;&#125;          directives: &#123;&#125;          components: &#123;&#125;        &#125;    &lt;/script&gt;    &lt;style&gt;    &lt;/style&gt;组件化编码的基本流程    1). 拆分界面, 抽取组件    2). 编写静态组件    3). 编写动态组件        初始化数据, 动态显示初始化界面        实现与用户交互功能组件通信的5种方式    props    vue的自定义事件    pubsub第三方库    slot    vuex(后面单独讲)props:    父子组件间通信的基本方式    属性值的2大类型:         一般: 父组件--&gt;子组件        函数: 子组件--&gt;父组件    隔层组件间传递: 必须逐层传递(麻烦)    兄弟组件间: 必须借助父组件(麻烦)vue自定义事件    子组件与父组件的通信方式    用来取代function props    不适合隔层组件和兄弟组件间的通信pubsub第三方库(消息订阅与发布)    适合于任何关系的组件间通信slot    通信是带数据的标签    注意: 标签是在父组件中解析vuex    多组件共享状态(数据的管理)    组件间的关系也没有限制    功能比pubsub强大, 更适用于vue项目</code></pre></div><h2 id="4-ajax"><a href="#4-ajax" class="headerlink" title="4. ajax"></a>4. ajax</h2><div class="code-wrapper"><pre class="language-js" data-language="js"><code class="language-js">相关库<span class="token operator">:</span>    vue<span class="token operator">-</span>resource<span class="token operator">:</span> vue插件<span class="token punctuation">,</span> 多用于vue1<span class="token punctuation">.</span>x    axios<span class="token operator">:</span> 第三方库<span class="token punctuation">,</span> 多用于vue2<span class="token punctuation">.</span>xvue<span class="token operator">-</span>resource使用    <span class="token comment">// 引入模块</span>    <span class="token keyword">import</span> VueResource <span class="token keyword">from</span> <span class="token string">'vue-resource'</span>    <span class="token comment">// 使用插件</span>    Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueResource<span class="token punctuation">)</span>        <span class="token comment">// 通过vue/组件对象发送ajax请求</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/someUrl'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// success callback</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">//返回结果数据</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// error callback</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span> <span class="token comment">//错误信息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>axios使用    <span class="token comment">// 引入模块</span>    <span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>        <span class="token comment">// 发送ajax请求</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">// 得到返回结果数据</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></div><h2 id="5-vue-router"><a href="#5-vue-router" class="headerlink" title="5. vue-router"></a>5. vue-router</h2><div class="code-wrapper"><pre class="language-html" data-language="html"><code class="language-html">vue用来实现SPA的插件使用vue-router    1. 创建路由器: router/index.js      new VueRouter(&#123;        routes: [          &#123; // 一般路由            path: '/about',            component: about          &#125;,          &#123; // 自动跳转路由            path: '/',             redirect: '/about'          &#125;        ]      &#125;)    2. 注册路由器: main.js       import router from './router'       new Vue(&#123;       router       &#125;)    3. 使用路由组件标签:       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Go to XXX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>编写路由的3步    1. 定义路由组件        2. 映射路由    3. 编写路由2个标签嵌套路由    children: [        &#123;          path: '/home/news',          component: news        &#125;,        &#123;          path: 'message',          component: message        &#125;     ]向路由组件传递数据    params: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home/news/abc/123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    props: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>abc<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>缓存路由组件    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span>路由的编程式导航this.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面)this.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面)this.$router.back(): 请求(返回)上一个记录路由</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-start</title>
    <link href="/2020/06/12/vue-start/"/>
    <url>/2020/06/12/vue-start/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Vue-js是什么"><a href="#1-Vue-js是什么" class="headerlink" title="1. Vue.js是什么?"></a>1. Vue.js是什么?</h1><div class="code-wrapper"><pre class="language-tex" data-language="tex"><code class="language-tex">1). 一位华裔前Google工程师(尤雨溪)开发的前端js库2). 作用: 动态构建用户界面3). 特点:* 遵循MVVM模式* 编码简洁, 体积小, 运行效率高, 移动&#x2F;PC端开发* 它本身只关注UI, 可以轻松引入vue插件和其它第三库开发项目4). 与其它框架的关联:* 借鉴angular的模板和数据绑定技术* 借鉴react的组件化和虚拟DOM技术5). vue包含一系列的扩展插件(库):* vue-cli: vue脚手架* vue-resource(axios): ajax请求* vue-router: 路由* vuex: 状态管理* vue-lazyload: 图片懒加载* vue-scroller: 页面滑动相关* mint-ui: 基于vue的组件库(移动端)* element-ui: 基于vue的组件库(PC端)</code></pre></div><h1 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h1><div class="code-wrapper"><pre><code>1). 引入vue.js2). 创建Vue实例对象(vm), 指定选项(配置)对象    el : 指定dom标签容器的选择器    data : 指定初始化状态数据的对象/函数(返回一个对象)3). 在页面模板中使用&#123;&#123;&#125;&#125;或vue指令# 3. Vue对象的选项## 1). el指定dom标签容器的选择器Vue就会管理对应的标签及其子标签## 2). data对象或函数类型指定初始化状态属性数据的对象vm也会自动拥有data中所有属性页面中可以直接访问使用数据代理: 由vm对象来代理对data中所有属性的操作(读/写)## 3). methods包含多个方法的对象供页面中的事件指令来绑定回调回调函数默认有event参数, 但也可以指定自己的参数所有的方法由vue对象来调用, 访问data中的属性直接使用this.xxx## 4). computed包含多个方法的对象对状态属性进行计算返回一个新的数据, 供页面获取显示一般情况下是相当于是一个只读的属性利用set/get方法来实现属性数据的计算读取, 同时监视属性数据的变化如何给对象定义get/set属性在创建对象时指定: get name () &#123;return xxx&#125; / set name (value) &#123;&#125;  对象创建之后指定: Object.defineProperty(obj, age, &#123;get()&#123;&#125;, set(value)&#123;&#125;&#125;)</code></pre></div><h2 id="5-watch"><a href="#5-watch" class="headerlink" title="5). watch"></a>5). watch</h2><div class="code-wrapper"><pre><code>包含多个属性监视的对象分为一般监视和深度监视    xxx: function(value)&#123;&#125;    xxx : &#123;        deep : true,        handler : fun(value)    &#125;另一种添加监视方式: vm.$watch(&#39;xxx&#39;, function(value)&#123;&#125;)</code></pre></div><h1 id="4-过渡动画"><a href="#4-过渡动画" class="headerlink" title="4. 过渡动画"></a>4. 过渡动画</h1><div class="code-wrapper"><pre class="language-html" data-language="html"><code class="language-html">利用vue去操控css的transition/animation动画模板: 使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>xxx<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>包含带动画的标签css样式.fade-enter-active: 进入过程, 指定进入的transition.fade-leave-active: 离开过程, 指定离开的transition.xxx-enter, .xxx-leave-to: 指定隐藏的样式编码例子    .xxx-enter-active, .xxx-leave-active &#123;      transition: opacity .5s    &#125;    .xxx-enter, .xxx-leave-to &#123;      opacity: 0    &#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre></div><h1 id="5-生命周期"><a href="#5-生命周期" class="headerlink" title="5. 生命周期"></a>5. 生命周期</h1><div class="code-wrapper"><pre><code>vm/组件对象生命周期图主要的生命周期函数(钩子)    created() / mounted(): 启动异步任务(启动定时器,发送ajax请求, 绑定监听)    beforeDestroy(): 做一些收尾的工作</code></pre></div><h1 id="6-自定义过滤器"><a href="#6-自定义过滤器" class="headerlink" title="6. 自定义过滤器"></a>6. 自定义过滤器</h1><h2 id="1-理解"><a href="#1-理解" class="headerlink" title="1). 理解"></a>1). 理解</h2><div class="code-wrapper"><pre><code>对需要显示的数据进行格式化后再显示</code></pre></div><h2 id="2-编码"><a href="#2-编码" class="headerlink" title="2). 编码"></a>2). 编码</h2><div class="code-wrapper"><pre><code>1). 定义过滤器    Vue.filter(filterName, function(value[,arg1,arg2,...])&#123;      // 进行一定的数据处理      return newValue    &#125;)2). 使用过滤器    &lt;div&gt;&#123;&#123;myData | filterName&#125;&#125;&lt;/div&gt;    &lt;div&gt;&#123;&#123;myData | filterName(arg)&#125;&#125;&lt;/div&gt;</code></pre></div><h1 id="7-vue内置指令"><a href="#7-vue内置指令" class="headerlink" title="7. vue内置指令"></a>7. vue内置指令</h1><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">v-text&#x2F;v-html: 指定标签体* v-text : 当作纯文本* v-html : 将value作为html标签来解析v-if v-else v-show: 显示&#x2F;隐藏元素* v-if : 如果vlaue为true, 当前标签会输出在页面中* v-else : 与v-if一起使用, 如果value为false, 将当前标签输出到页面中* v-show: 就会在标签中添加display样式, 如果vlaue为true, display&#x3D;block, 否则是nonev-for : 遍历* 遍历数组 : v-for&#x3D;&quot;(person, index) in persons&quot;   * 遍历对象 : v-for&#x3D;&quot;value in person&quot;   $keyv-on : 绑定事件监听* v-on:事件名, 可以缩写为: @事件名* 监视具体的按键: @keyup.keyCode   @keyup.enter* 停止事件的冒泡和阻止事件默认行为: @click.stop   @click.prevent* 隐含对象: $eventv-bind : 强制绑定解析表达式  * html标签属性是不支持表达式的, 就可以使用v-bind* 可以缩写为:  :id&#x3D;&#39;name&#39;* :class  * :class&#x3D;&quot;a&quot;* :class&#x3D;&quot;&#123;classA : isA, classB : isB&#125;&quot;* :class&#x3D;&quot;[classA, classB]&quot;* :style:style&#x3D;&quot;&#123;color : color&#125;&quot;v-model* 双向数据绑定* 自动收集用户输入数据ref : 标识某个标签* ref&#x3D;&#39;xxx&#39;* 读取得到标签对象: this.$refs.xxx</code></pre></div><h1 id="8-自定义指令"><a href="#8-自定义指令" class="headerlink" title="8. 自定义指令"></a>8. 自定义指令</h1><h2 id="1-注册全局指令"><a href="#1-注册全局指令" class="headerlink" title="1). 注册全局指令"></a>1). 注册全局指令</h2><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></div><h2 id="2-注册局部指令"><a href="#2-注册局部指令" class="headerlink" title="2). 注册局部指令"></a>2). 注册局部指令</h2><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript">directives <span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string">'my-directive'</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="3-使用指令"><a href="#3-使用指令" class="headerlink" title="3). 使用指令"></a>3). 使用指令</h2><div class="code-wrapper"><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-my-directive</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>xxx<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 统一异常处理</title>
    <link href="/2020/06/07/spring%20exception/"/>
    <url>/2020/06/07/spring%20exception/</url>
    
    <content type="html"><![CDATA[<h2 id="springBoot-统一异常处理"><a href="#springBoot-统一异常处理" class="headerlink" title="springBoot 统一异常处理"></a>springBoot 统一异常处理</h2><h3 id="异常处理反例"><a href="#异常处理反例" class="headerlink" title="异常处理反例"></a>异常处理反例</h3><ul><li><h4 id="捕获异常后只输出到控制台"><a href="#捕获异常后只输出到控制台" class="headerlink" title="捕获异常后只输出到控制台"></a>捕获异常后只输出到控制台</h4></li></ul><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript">前端$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">"/user/add"</span><span class="token punctuation">,</span>    dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>后端<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p> 这是见过最多的异常处理方式了, 如果这是一个添加商品的方法, 前台通过 ajax 发送请求到后端, 期望返回 json 信息表示添加结果. 但如果这段代码出现了异常:</p><ul><li>那么用户看到的场景就是点击了添加按钮, 但没有任何反应(其实是返回了 500 错误页面, 但这里前端没有监听 error 事件, 只监听了 success 事件. 但即使加上了<code>error: function(data) &#123;alert(&quot;添加失败&quot;);&#125;</code>) 又如何呢? 到底因为啥失败了呢, 用户也不得而知.</li><li>后台 <code>e.printStackTrace()</code> 打印在控制台的日志也会在漫漫的日志中被埋没, 很可能会看不到输出的异常. 但这并不是最糟的情况, 更糟糕的事情是连 <code>e.printStackTrace()</code> 都没有, <code>catch</code> 块中是空的, 这样后端的控制台中更是什么都看不到了, 这段代码会像一个隐形的炸弹一样一直埋伏在系统中.</li></ul><h4 id="混乱的返回方式"><a href="#混乱的返回方式" class="headerlink" title="混乱的返回方式"></a>混乱的返回方式</h4><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">"/goods/add"</span><span class="token punctuation">,</span>    dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"添加失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>后端@<span class="token function">RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/goods/add"</span><span class="token punctuation">)</span>@ResponseBody<span class="token keyword">public</span> Map <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">Goods goods</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// do something</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    reutrn map<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ul><li><p>这种方式捕获异常后, 返回了错误信息, 且前台做了一定的处理, 看起来很完善? 但用 <code>HashMap</code> 中的 <code>flag</code> 和 <code>message</code> 这种字符串来当键很容易处理, 例如你这里叫 <code>message</code>, 别人起名叫 <code>msg</code>, 甚至有时手抖打错了, 怎么办? 前台再改成 <code>msg</code> 或其他的字符?, 前端后端这样一直来回改?</p><p>更有甚者在情况 A 的情况下, 返回 json, 在情况 B 的情况下, 重定向到某个页面, 这就更乱了. 对于这种不统一的结构处理起来非常麻烦.</p></li></ul><h3 id="异常处理规范"><a href="#异常处理规范" class="headerlink" title="异常处理规范"></a>异常处理规范</h3><ul><li><h4 id="不要捕获任何异常"><a href="#不要捕获任何异常" class="headerlink" title="不要捕获任何异常"></a>不要捕获任何异常</h4><p>对的, 不要在<strong>业务代码中</strong>进行捕获异常, 即 dao、service、controller 层的所以异常都全部抛出到上层. 这样不会导致业务代码中的一堆 <code>try-catch</code> 会混乱业务代码.</p></li><li><h4 id="统一返回结果集"><a href="#统一返回结果集" class="headerlink" title="统一返回结果集"></a>统一返回结果集</h4><p>不要使用 Map 来返回结果, Map 不易控制且容易犯错, 应该定义一个 Java 实体类. 来表示统一结果来返回, 如定义实体类:</p></li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xkcoding<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>xkcoding<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>constant<span class="token punctuation">.</span></span><span class="token class-name">Status</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>xkcoding<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">BaseException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiResponse</span> <span class="token punctuation">&#123;</span><span class="token comment">/** * 状态码 */</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span><span class="token comment">/** * 返回内容 */</span><span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span><span class="token comment">/** * 返回数据 */</span><span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span><span class="token comment">/** * 无参构造函数 */</span><span class="token keyword">private</span> <span class="token class-name">ApiResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 全参构造函数 * * @param code    状态码 * @param message 返回内容 * @param data    返回数据 */</span><span class="token keyword">private</span> <span class="token class-name">ApiResponse</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 构造一个自定义的API返回 * * @param code    状态码 * @param message 返回内容 * @param data    返回数据 * @return ApiResponse */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ApiResponse</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiResponse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 构造一个成功且带数据的API返回 * * @param data 返回数据 * @return ApiResponse */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ApiResponse</span> <span class="token function">ofSuccess</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">ofStatus</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 构造一个成功且自定义消息的API返回 * * @param message 返回内容 * @return ApiResponse */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ApiResponse</span> <span class="token function">ofMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>OK<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 构造一个有状态的API返回 * * @param status 状态 &#123;@link Status&#125; * @return ApiResponse */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ApiResponse</span> <span class="token function">ofStatus</span><span class="token punctuation">(</span><span class="token class-name">Status</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">ofStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 构造一个有状态且带数据的API返回 * * @param status 状态 &#123;@link Status&#125; * @param data   返回数据 * @return ApiResponse */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ApiResponse</span> <span class="token function">ofStatus</span><span class="token punctuation">(</span><span class="token class-name">Status</span> status<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">of</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> status<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 构造一个异常且带数据的API返回 * * @param t    异常 * @param data 返回数据 * @param &lt;T>  &#123;@link BaseException&#125; 的子类 * @return ApiResponse */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">BaseException</span><span class="token punctuation">></span></span> <span class="token class-name">ApiResponse</span> <span class="token function">ofException</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">of</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 构造一个异常且带数据的API返回 * * @param t   异常 * @param &lt;T> &#123;@link BaseException&#125; 的子类 * @return ApiResponse */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">BaseException</span><span class="token punctuation">></span></span> <span class="token class-name">ApiResponse</span> <span class="token function">ofException</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">ofException</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoExceptionHandler</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEFAULT_ERROR_VIEW <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">;</span><span class="token comment">/** * 统一 json 异常处理 * * @param exception JsonException * @return 统一返回 json 格式 */</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">JsonException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">ApiResponse</span> <span class="token function">jsonErrorHandler</span><span class="token punctuation">(</span><span class="token class-name">JsonException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"【JsonException】:&#123;&#125;"</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">ApiResponse</span><span class="token punctuation">.</span><span class="token function">ofException</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 统一 页面 异常处理 * * @param exception PageException * @return 统一跳转到异常页面 */</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">PageException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">pageErrorHandler</span><span class="token punctuation">(</span><span class="token class-name">PageException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"【DemoPageException】:&#123;&#125;"</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ModelAndView</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>view<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>view<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span>DEFAULT_ERROR_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> view<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>意思由代码进入Controller层之后由@ControllerAdvice进行AOP包围处理,可自定义接受异常后跳转页面或者返回API调用信息。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>exception</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker File</title>
    <link href="/2020/06/03/Dockerfile%E7%9A%84%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"/>
    <url>/2020/06/03/Dockerfile%E7%9A%84%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>​    生产实践中一定优先使用 Dockerfile 的方式构建镜像。 因为使用 Dockerfile 构建镜像可以带来很多好处：</p><ul><li><p>易于版本化管理，Dockerfile 本身是一个文本文件，方便存放在代码仓库做版本管理，可以很方便地找到各个版本之间的变更历史；</p></li><li><p>过程可追溯，Dockerfile 的每一行指令代表一个镜像层，根据 Dockerfile 的内容即可很明确地查看镜像的完整构建过程；</p></li><li><p>屏蔽构建环境异构，使用 Dockerfile 构建镜像无须考虑构建环境，基于相同 Dockerfile 无论在哪里运行，构建结果都一致；</p></li><li><p>虽然有这么多好处，但是如果你 Dockerfile 使用不当也会引发很多问题。比如镜像构建时间过长，甚至镜像构建失败；镜像层数过多，导致镜像文件过大。所以，这一课时我就教你如何在生产环境中编写最优的 Dockerfile；</p></li></ul><h3 id="2-Dockerfile编写遵循的原则"><a href="#2-Dockerfile编写遵循的原则" class="headerlink" title="2. Dockerfile编写遵循的原则"></a>2. Dockerfile编写遵循的原则</h3><p>​    遵循以下 Dockerfile 书写原则，不仅可以使得我们的 Dockerfile 简洁明了，让协作者清楚地了解镜像的完整构建流程，还可以帮助我们减少镜像的体积，加快镜像构建的速度和分发速度。</p><p><strong>（1）单一职责</strong><br>​    由于容器的本质是进程，一个容器代表一个进程，因此不同功能的应用应该尽量拆分为不同的容器，每个容器只负责单一业务进程。</p><p><strong>（2）提供注释信息</strong><br>​    Dockerfile 也是一种代码，我们应该保持良好的代码编写习惯，晦涩难懂的代码尽量添加注释，让协作者可以一目了然地知道每一行代码的作用，并且方便扩展和使用。</p><p><strong>（3）保持容器最小化</strong><br>​    应该避免安装无用的软件包，比如在一个 nginx 镜像中，我并不需要安装 vim 、gcc 等开发编译工具。这样不仅可以加快容器构建速度，而且可以避免镜像体积过大。</p><p><strong>（4）合理选择基础镜像</strong><br>​    容器的核心是应用，因此只要基础镜像能够满足应用的运行环境即可。例如一个Java类型的应用运行时只需要JRE，并不需要JDK，因此我们的基础镜像只需要安装JRE环境即可。</p><p><strong>（5）使用 .dockerignore 文件</strong><br>​    在使用git时，我们可以使用.gitignore文件忽略一些不需要做版本管理的文件。同理，使用.dockerignore文件允许我们在构建时，忽略一些不需要参与构建的文件，从而提升构建效率。.dockerignore的定义类似于.gitignore。</p><p>.dockerignore的本质是文本文件，Docker 构建时可以使用换行符来解析文件定义，每一行可以忽略一些文件或者文件夹。具体使用方式如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">规则   含义# 开头的表示注释，# 后面所有内容将会被忽略&#x2F;tmp匹配当前目录下任何以 tmp 开头的文件或者文件夹*.md匹配以 .md 为后缀的任意文件tem?匹配以 tem 开头并且以任意字符结尾的文件，？代表任意一个字符!README.md  ! 表示排除忽略。</code></pre></div><p><strong>（6）尽量使用构建缓存</strong><br>​    Docker 构建过程中，每一条 Dockerfile 指令都会提交为一个镜像层，下一条指令都是基于上一条指令构建的。如果构建时发现要构建的镜像层的父镜像层已经存在，并且下一条命令使用了相同的指令，即可命中构建缓存。</p><p>Docker 构建时判断是否需要使用缓存的规则如下：</p><ul><li><p>从当前构建层开始，比较所有的子镜像，检查所有的构建指令是否与当前完全一致，如果不一致，则不使用缓存；</p></li><li><p>一般情况下，只需要比较构建指令即可判断是否需要使用缓存，但是有些指令除外（例如ADD和COPY）；</p></li><li><p>对于ADD和COPY指令不仅要校验命令是否一致，还要为即将拷贝到容器的文件计算校验和（根据文件内容计算出的一个数值，如果两个文件计算的数值一致，表示两个文件内容一致 ），命令和校验和完全一致，才认为命中缓存。</p></li><li><p>因此，基于 Docker 构建时的缓存特性，我们可以把不轻易改变的指令放到 Dockerfile 前面（例如安装软件包），而可能经常发生改变的指令放在 Dockerfile 末尾（例如编译应用程序）。</p></li><li><p>例如，我们想要定义一些环境变量并且安装一些软件包，可以按照如下顺序编写 Dockerfile：</p></li></ul><div class="code-wrapper"><pre class="language-none"><code class="language-none">FROM centos:7# 设置环境变量指令放前面ENV PATH &#x2F;usr&#x2F;local&#x2F;bin:$PATH# 安装软件指令放前面RUN yum install -y make# 把业务软件的配置,版本等经常变动的步骤放最后</code></pre></div><p>按照上面原则编写的 Dockerfile 在构建镜像时，前面步骤命中缓存的概率会增加，可以大大缩短镜像构建时间。</p><p><strong>（7）正确设置时区</strong><br>​    我们从 Docker Hub 拉取的官方操作系统镜像大多数都是 UTC 时间（世界标准时间）。如果你想要在容器中使用中国区标准时间（东八区），请根据使用的操作系统修改相应的时区信息，下面我介绍几种常用操作系统的修改方式：</p><p><strong>Ubuntu 和Debian 系统</strong></p><p>Ubuntu 和Debian 系统可以向 Dockerfile 中添加以下指令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">RUN ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtimeRUN echo &quot;Asia&#x2F;Shanghai&quot; &gt;&gt; &#x2F;etc&#x2F;timezone</code></pre></div><p><strong>CentOS系统</strong></p><p>CentOS 系统则向 Dockerfile 中添加以下指令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">RUN ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</code></pre></div><p><strong>（8）使用国内软件源加快镜像构建速度</strong><br>​    由于我们常用的官方操作系统镜像基本都是国外的，软件服务器大部分也在国外，所以我们构建镜像的时候想要安装一些软件包可能会非常慢。</p><p><strong>（9）最小化镜像层数</strong><br>在构建镜像时尽可能地减少 Dockerfile 指令行数。例如我们要在 CentOS 系统中安装make和net-tools两个软件包，应该在 Dockerfile 中使用以下指令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">RUN yum install -y make net-tools</code></pre></div><p>而不应该写成这样：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">RUN yum install -y makeRUN yum install -y make</code></pre></div><p>了解完 Dockerfile 的书写原则后，我们再来具体了解下这些原则落实到具体的 Dockerfile 指令应该如何书写。</p><h3 id="3-Dockerfile-指令书写建议"><a href="#3-Dockerfile-指令书写建议" class="headerlink" title="3. Dockerfile 指令书写建议"></a>3. Dockerfile 指令书写建议</h3><p>下面是我们常用的一些指令:</p><p><strong>（1）RUN</strong><br>RUN指令在构建时<strong>将会生成一个新的镜像层</strong>并且执行RUN指令后面的内容。</p><p>使用RUN指令时应该尽量遵循以下原则：</p><ul><li><p>当RUN指令后面跟的内容比较复杂时，建议使用反斜杠（\） 结尾并且换行；</p></li><li><p>RUN指令后面的内容尽量按照字母顺序排序，提高可读性。</p></li></ul><p>例如，在官方的 CentOS 镜像下安装一些软件，一个建议的 Dockerfile 指令如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">FROM centos:7RUN yum install -y automake \                   curl \                   python \                   vim</code></pre></div><p><strong>（2）CMD 和 ENTRYPOINT</strong></p><p>​    <strong>CMD和ENTRYPOINT指令都是容器运行的命令入口</strong>。</p><p>这两个指令的相同之处，CMD和ENTRYPOINT的基本使用格式分为两种。</p><ul><li><p>第一种为CMD/ENTRYPOINT[“command” , “param”]。这种格式是使用 <strong>Linux 的exec</strong>实现的， 一般称为exec模式，这种书写格式为CMD/ENTRYPOINT后面跟 json 数组，也是Docker 推荐的使用格式。</p></li><li><p>另外一种格式为CMD/ENTRYPOINTcommand param ，这种格式是<strong>基于 shell 实现</strong>的， 通常称为shell模式。当使用shell模式时，Docker 会以 /bin/sh -c command 的方式执行命令。</p></li></ul><p>区别：</p><ul><li>Dockerfile 中如果使用了ENTRYPOINT指令，启动 Docker 容器时需要使用 –entrypoint 参数才能覆盖 Dockerfile 中的ENTRYPOINT指令 </li><li>使用CMD设置的命令则可以被docker run后面的参数直接覆盖。</li><li>ENTRYPOINT指令可以结合CMD指令使用，也可以单独使用，而CMD指令只能单独使用。</li></ul><p>例如：dockerfiler如下定义</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">FROM python:3CMD [&quot;python3&quot;, &quot;hello.py&quot;]</code></pre></div><p>执行启动命令为：docker run python3 xxx.py -itd xxxx，表示下拉python:3镜像，并执行python3 xxx.py命令，如果用docker run -itd xxxx，表示下拉python:3镜像，并执行Dockerfile中定义的python3 hello.py命令。</p><h4 id="疑问🤔️："><a href="#疑问🤔️：" class="headerlink" title="疑问🤔️："></a><strong>疑问🤔️：</strong></h4><p>什么时候应该使用ENTRYPOINT,什么时候使用CMD呢？</p><p>如果你希望你的镜像足够灵活，推荐使用CMD指令。如果你的镜像只执行单一的具体程序，并且不希望用户在执行docker run时覆盖默认程序，建议使用ENTRYPOINT。</p><p>最后再强调一下，无论使用CMD还是ENTRYPOINT，都<strong>尽量使用exec模式</strong>。</p><p>如果<strong>在Dockerfile中有多条CMD指令，那么永远只会执行最后一条CMD指令，最好将执行的命令通过&amp;&amp;进行连接。</strong></p><p><strong>（3）ADD 和 COPY</strong><br>​    ADD和COPY指令功能类似，都是从外部往容器内添加文件。</p><ul><li>COPY指令只支持<strong>基本的文件和文件夹</strong>拷贝功能</li><li>ADD则支持更多<strong>文件来源类型</strong>，比如自动提取 tar 包，并且可以支持源文件为 URL 格式。</li></ul><p>那么在日常应用中，我们应该使用哪个命令向容器里添加文件呢？既然ADD指令支持的功能更多，当然应该使用ADD指令了。然而事实恰恰相反，其实更推荐使用COPY指令，因为COPY指令更加透明，仅支持本地文件向容器拷贝，而且使用COPY指令可以更好地利用构建缓存，有效减小镜像体积。</p><p>如果使用ADD向容器中添加 URL 文件时，请尽量考虑使用其他方式替代。例如你想要在容器中安装 memtester（一种内存压测工具），你应该避免使用以下格式：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">ADD http:&#x2F;&#x2F;pyropus.ca&#x2F;software&#x2F;memtester&#x2F;old-versions&#x2F;memtester-4.3.0.tar.gz &#x2F;tmp&#x2F;RUN tar -xvf &#x2F;tmp&#x2F;memtester-4.3.0.tar.gz -C &#x2F;tmpRUN make -C &#x2F;tmp&#x2F;memtester-4.3.0 &amp;&amp; make -C &#x2F;tmp&#x2F;memtester-4.3.0 install</code></pre></div><p>下面是推荐写法：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">RUN wget -O &#x2F;tmp&#x2F;memtester-4.3.0.tar.gz http:&#x2F;&#x2F;pyropus.ca&#x2F;software&#x2F;memtester&#x2F;old-versions&#x2F;memtester-4.3.0.tar.gz \&amp;&amp; tar -xvf &#x2F;tmp&#x2F;memtester-4.3.0.tar.gz -C &#x2F;tmp \&amp;&amp; make -C &#x2F;tmp&#x2F;memtester-4.3.0 &amp;&amp; make -C &#x2F;tmp&#x2F;memtester-4.3.0 install</code></pre></div><p><strong>（4）WORKDIR</strong><br>​    WORKDIR： 指定容器的工作路径，应该尽量避免使用 RUN cd /work/path &amp;&amp; do some work 这样的指令。</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 安全性能</title>
    <link href="/2020/06/03/Docker%E5%AE%89%E5%85%A8%E6%80%A7%E8%83%BD%E4%BA%86%E8%A7%A3/"/>
    <url>/2020/06/03/Docker%E5%AE%89%E5%85%A8%E6%80%A7%E8%83%BD%E4%BA%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>​    Docker 是基于 Linux 内核的 <strong>Namespace</strong> 技术实现资源隔离的，<strong>所有的容器都共享主机的内核</strong>。其实这与以虚拟机为代表的云计算时代还是有很多区别的，比如虚拟机有着更好的隔离性和安全性，而容器的隔离性和安全性则相对较弱。</p><p>​    在讨论容器的安全性之前，我们先了解下容器与虚拟机的区别，这样可以帮助我们更好地了解容器的安全隐患以及如何加固容器安全。</p><h3 id="2-docker与虚拟机的区别"><a href="#2-docker与虚拟机的区别" class="headerlink" title="2. docker与虚拟机的区别"></a>2. docker与虚拟机的区别</h3><p>​    虚拟机是通过<strong>管理系统(Hypervisor)<strong>模拟出 CPU、内存、网络等硬件，然后在这些模拟的硬件上创建客户内核和操作系统。这样做的好处</strong>就是虚拟机有自己的内核和操作系统，并且硬件都是通过虚拟机管理系统模拟出来的，用户程序无法直接使用到主机的操作系统和硬件资源，</strong>因此虚拟机也对隔离性和安全性有着更好的保证。</p><p>​    而 Docker 容器则是通过 Linux 内核(<strong>kernel</strong>)的 <strong>Namespace 技术实现了文件系统、进程、设备以及网络的隔离</strong>，然后再通过 <strong>Cgroups 对 CPU、 内存等资源进行限制</strong>，最终实现了容器之间相互不受影响，由于容器的隔离性仅仅依靠内核来提供，因此容器的隔离性也远弱于虚拟机。</p><p><img src="/img/images/7.docker%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB.png"></p><p>​    容器与虚拟机相比，<strong>容器的性能损耗非常小，并且镜像也非常小</strong>，而且在业务快速开发和迭代的今天，容器秒级的启动等特性也非常匹配业务快速迭代的业务场景。</p><p>​    既然我们要利用容器的优点，那就需要尽量弥补<strong>容器弱隔离的安全性缺点</strong>呢？要了解如何解决容器的安全问题，我们首先需要了解下容器目前存在的安全问题。</p><h3 id="3-docker的安全性问题"><a href="#3-docker的安全性问题" class="headerlink" title="3. docker的安全性问题"></a><strong>3. docker的安全性问题</strong></h3><h5 id="1）docker自身安全"><a href="#1）docker自身安全" class="headerlink" title="1）docker自身安全"></a>1）docker自身安全</h5><p>​    Docker 作为一款容器引擎，本身也会存在一些安全漏洞。安全漏洞可以通过CVE（Common Vulnerabilities and Exposures）又称常见漏洞与披露，是一个与信息安全有关的数据库，收集各种信息安全弱点及漏洞并给予编号以便于公众查阅。</p><p><strong>2）镜像安全</strong><br>​    由于 Docker 容器是基于镜像创建并启动，因此镜像的安全直接影响到容器的安全。具体影响镜像安全的总结如下。</p><ul><li><p>镜像软件存在安全漏洞：由于容器需要安装基础的软件包，如果软件包存在漏洞，则可能会被不法分子利用并且侵入容器，影响其他容器或主机安全。</p></li><li><p>仓库漏洞：无论是 Docker 官方的镜像仓库还是我们私有的镜像仓库，都有可能被攻击，然后篡改镜像，当我们使用镜像时，就可能成为攻击者的目标对象。</p></li><li><p>用户程序漏洞：用户自己构建的软件包可能存在漏洞或者被植入恶意脚本，这样会导致运行时提权影响其他容器或主机安全。</p></li></ul><p><strong>3）Linux 内核隔离性不够</strong></p><p>​    尽管目前 <strong>Namespace</strong> 已经提供了非常多的资源隔离类型，但是仍有部分关键内容没有被完全隔离，其中包括一些系统的关键性目录（如 /sys、/proc 等），这些关键性的目录可能会泄露主机上一些关键性的信息，让攻击者利用这些信息对整个主机甚至云计算中心发起攻击。</p><p>​    而且仅仅依靠 Namespace 的隔离是远远不够的，因为一旦内核的 Namespace 被突破，使用者就有可能直接提权获取到主机的超级权限，从而影响主机安全。</p><p><strong>4) 所有容器共享主机内核</strong></p><p>​    由于<strong>同一宿主机上所有容器共享主机内核</strong>，所以攻击者可以利用一些特殊手段导致内核崩溃，进而导致主机宕机影响主机上其他服务。</p><h3 id="4-Docker安全问题解决"><a href="#4-Docker安全问题解决" class="headerlink" title="4. Docker安全问题解决"></a>4. Docker安全问题解决</h3><p><strong>1) Docker 自身安全性改进</strong><br>​    事实上，Docker 从 2013 年诞生到现在，在安全性上面已经做了非常多的努力。目前 Docker 在默认配置和默认行为下是足够安全的。</p><p>​    Docker 自身是基于 Linux 的多种 Namespace 实现的，其中有一个<strong>很重要的 Namespace 叫作 User Namespace</strong>，User Namespace 主要是用来做容器内用户和主机的用户隔离的。在过去容器里的 root 用户就是主机上的 root 用户，如果容器受到攻击，或者容器本身含有恶意程序，在容器内就可以直接获取到主机 root 权限。Docker 从 1.10 版本开始，使用 <strong>User Namespace 做用户隔离，实现了容器中的 root 用户映射到主机上的非 root 用户，从而大大减轻了容器被突破的风险。</strong></p><p>因此，我们尽可能地使用 Docker 最新版本就可以得到更好的安全保障。</p><p><strong>2) 保障镜像安全</strong></p><p>​    为保障镜像安全，我们可以在<strong>私有镜像仓库安装镜像安全扫描组件</strong>，对上传的镜像进行检查，通过与 CVE 数据库对比，一旦发现有漏洞的镜像及时通知用户或阻止非安全镜像继续构建和分发。同时为了确保我们使用的镜像足够安全，在拉取镜像时，要确保只从受信任的镜像仓库拉取，并且与镜像仓库通信一定要使用 HTTPS 协议。</p><p><strong>3) 加强内核安全和管理</strong></p><p>​    由于仅仅依赖内核的隔离可能会引发安全问题，因此我们对于内核的安全应该更加重视。可以从以下几个方面进行加强。</p><ul><li><p>宿主机及时升级内核漏洞</p></li><li><p>宿主机内核应该尽量安装最新补丁，因为更新的内核补丁往往有着更好的安全性和稳定性。</p></li><li><p>使用 Capabilities 划分权限</p></li></ul><p>Capabilities 是 Linux 内核的概念，Linux 将系统权限分为了多个 Capabilities，它们都可以单独地开启或关闭，Capabilities 实现了系统更细粒度的访问控制。在执行docker run命令启动容器时，如非特殊可控情况，–privileged 参数不允许设置为 true，其他特殊权限可以使用 –cap-add 参数，根据使用场景适当添加相应的权限。</p><p><strong>4) 使用安全加固组件</strong></p><p>​    Linux 的 <strong>SELinux、AppArmor、GRSecurity组件都是 Docker 官方推荐的安全加固组件</strong>。</p><ul><li><p>SELinux (Secure Enhanced Linux): 是 Linux 的一个内核安全模块，提供了安全访问的策略机制，通过设置 SELinux 策略可以实现某些进程允许访问某些文件。</p></li><li><p>AppArmor: 类似于 SELinux，也是一个 Linux 的内核安全模块，普通的访问控制仅能控制到用户的访问权限，而 AppArmor 可以控制到用户程序的访问权限。</p></li><li><p>GRSecurity: 是一个对内核的安全扩展，可通过智能访问控制，提供内存破坏防御，文件系统增强等多种防御形式。</p></li></ul><p>这三个组件可以限制一个容器对主机的内核或其他资源的访问控制。目前，容器报告的一些安全漏洞中，很多都是通过对内核进行加强访问和隔离来实现的。</p><p><strong>5) 资源限制</strong></p><p>​    在生产环境中，建议每个容器都添加相应的资源限制。下面给出一些执行docker run命令启动容器时可以传递的资源限制参数：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">--cpus                          限制 CPU 配额-m, --memory                    限制内存配额--pids-limit                    限制容器的 PID 个数</code></pre></div><p>例如我想要启动一个 1 核 2G 的容器，并且限制在容器内最多只能创建 1000 个 PID，启动命令如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ docker run -it --cpus&#x3D;1 -m&#x3D;2048m --pids-limit&#x3D;1000 busybox &#x2F;bin&#x2F;bash</code></pre></div><p>推荐在生产环境中限制 CPU、内存、PID 等资源，这样即便应用程序有漏洞，也不会导致主机的资源完全耗尽，最大限度降低安全风险。</p><p><strong>6) 使用安全容器</strong></p><p>​    容器有着轻便快速启动的优点，虚拟机有着安全隔离的优点，有没有一种技术可以兼顾两者的优点，做到既轻量又安全呢？</p><p>​    答案是有，那就是<strong>安全容器。安全容器是相较于普通容器的，安全容器与普通容器的主要区别在于，安全容器中的每个容器都运行在一个单独的微型虚拟机中，拥有独立的操作系统和内核，并且有虚拟化层的安全隔离。</strong></p><p>安全容器目前推荐的技术方案是 : <strong>Kata Containers</strong></p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 安全</title>
    <link href="/2020/06/03/Docker%E5%AE%89%E5%85%A8%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/"/>
    <url>/2020/06/03/Docker%E5%AE%89%E5%85%A8%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>​    Docker容器安全目前推荐的技术方案是 : <strong>Kata Containers</strong>，那先来认识一下什么是kata containers。</p><p>​    Kata Containers是一个开源项目和社区，致力于<strong>构建轻量级虚拟机（VM）的标准实现——这些虚拟机的感知和执行类似容器</strong>，但提供VM的工作负载隔离和安全优势，内核级别的隔离宿主机的内核！Kata Containers 项目最初是基于 <strong>QEMU</strong> 的，但它的设计从一开始就以支持多种管理程序解决方案为出发点。</p><h3 id="2-kata-containers"><a href="#2-kata-containers" class="headerlink" title="2. kata-containers"></a>2. kata-containers</h3><p>　　kata containers是由OpenStack基金会管理，但独立于OpenStack项目之外的容器项目。它是一个<strong>可以使用容器镜像以超轻量级虚机的形式创建容器的运行时工具</strong>。 kata containers整合了Intel的 Clear Containers 和 Hyper.sh 的 runV，能够支持不同平台的硬件 （x86-64，arm等），并符合**OCI(Open Container Initiative)**规范，同时还可以兼容k8s的 <strong>CRI（Container Runtime Interface）</strong>接口规范。目前项目包含几个配套组件，即Runtime，Agent， Proxy，Shim，Kernel等</p><p>　　真正启动Docker容器的命令工具是RunC，它是OCI运行时规范 (runtime-spec)的默认实现。Kata containers其实跟RunC类似，也是一个符合OCI运行时规范的一种 实现（即<strong>Clear Container和runV 都符OCI规范</strong>），不同之处是，它给每个容器（在Docker容器的 角度）或每个Pod（k8s的角度）增加了一个独立的linux内核（不共享宿主机的内核），使容器有更好 的隔离性，安全性。</p><p><strong>2.1）docker的runtime模式架构图：</strong></p><p><img src="/img/images/8.docker%E7%9A%84runtime%E6%9E%B6%E6%9E%84%E5%9B%BE.png"></p><p>​    可以看到runC处于docker组件图的最底端，runC下面就是容器。目前docker已经不是一个专一的容器 管理组件，而真正的容器管理组件是containerd，而containerd本身也不会直接跟操作系统交互，去创建、删除容器，而是借助runC来对容器生命周期进行管理，因此runC作为必须遵循OCI规范。</p><p><strong>2.2）kata containers定义位置：</strong></p><p>kata containers在容器的什么位置，应该就显而易见了。它符合OCI运行时规 范，因此，可以作为runC的替代组件，如红色虚线框内所示：</p><p><img src="/img/images/8.docker%E7%9A%84runtime%E6%9E%B6%E6%9E%84%E5%9B%BE2.png"></p><p><strong>2.3）kata container原理</strong></p><p>​    kata container实质上是在虚拟机内部使用container（基于runc的实现）。 kata-container使用虚拟化软件(qemu-lite优化过的qemu)， 通过已经将kata-agent 安装的kernel &amp; intrd image，启动过一个轻量级的虚拟机， 使用nvdimm将initrd image映射到guest vm中。然后由kata-agent为container创建对应的namespace和资源。 Guest VM作为实质上的sandbox可以完全与host kernel进行隔离。</p><p><img src="/img/images/8.kata-container%E5%8E%9F%E7%90%86png.png"></p><p><strong>组件拆分介绍</strong></p><ul><li><strong>kata-runtime</strong>：实现OCI接口，可以通过CRI-O 与kubelet对接作为k8s runtime server， containerd对接docker engine，创建运行container/pod的VM</li><li><strong>kata-proxy</strong>: 每一个container都会由一个kata-proxy进程，kata-proxy负责与kata-agent通讯，当guest vm启动后，kata-agent会随之启动并使用qemu virtio serial console 进行通讯</li><li><strong>kata-agent</strong>： 运行在guest vm中的进程， 主要依赖于<strong>libcontainer</strong>项目，重用了大部分的runc代码，为container创建namespace(NS, UTS, IPC and PID)</li><li><strong>kata-shim</strong>: 作为guest vm标准输入输出的接口，exec命令就是同kata-shim实现的。（其实相当于是container-shim的一个适配）</li></ul><p><strong>2.4）classic Docker与Docker with Kata的架构</strong></p><p>![](/img/images/8.Docker with Kata架构设计.png)</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 容器操作</title>
    <link href="/2020/06/03/Docker%E5%AE%B9%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/06/03/Docker%E5%AE%B9%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>​        镜像包含了容器运行所需要的文件系统结构和内容，是静态的只读文件，而容器则是在镜像的只读层上创建了可写层，并且容器中的进程属于运行状态，容器是真正的应用载体。接下来讲讲Docker 核心：容器，重点讲解一下容器的基本操作。</p><h3 id="1-容器（Container）"><a href="#1-容器（Container）" class="headerlink" title="1. 容器（Container）"></a>1. 容器（Container）</h3><p>容器是基于镜像创建的可运行实例，并且单独存在，一个镜像可以创建出多个容器。</p><p><img src="/img/images/4docker-%E5%AE%B9%E5%99%A8%E5%B1%82.png"></p><h5 id="1-1-容器的生命周期"><a href="#1-1-容器的生命周期" class="headerlink" title="1.1 容器的生命周期"></a>1.1 容器的生命周期</h5><p>容器的生命周期是容器可能处于的状态，容器的生命周期分为 5 种。</p><ul><li><p>created：初建状态</p></li><li><p>running：运行状态</p></li><li><p>stopped：停止状态</p></li><li><p>paused： 暂停状态</p></li><li><p>deleted：删除状态</p></li></ul><p>各生命周期之前的转换关系如图所示：</p><p><img src="/img/images/4docker-%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81.png"></p><p>docker create命令: 生成的容器状态为初建状态，初建状态通过</p><p>docker start命令：可以将初建状态转化为运行状态</p><p>docker stop命令：运行状态的容器转化为停止状态</p><p>docker start命令：可以将处于停止状态的容器转化为运行状态</p><p>docker pause命令：运行状态的容器转化为暂停状态</p><p>docker unpause命令：将处于暂停状态的容器转化为运行状态 。</p><p><strong>重点：处于初建状态、运行状态、停止状态、暂停状态的容器都可以直接删除。</strong></p><h3 id="2-容器命令"><a href="#2-容器命令" class="headerlink" title="2. 容器命令"></a>2. 容器命令</h3><p>容器的操作可以分为五个步骤：创建并启动容器、终止容器、进入容器、删除容器、导入和导出容器。</p><h5 id="2-1-创建并启动容器"><a href="#2-1-创建并启动容器" class="headerlink" title="2.1 创建并启动容器"></a>2.1 创建并启动容器</h5><p>容器启动有两种方式：</p><ol><li><p>docker create命令用于创建容器，创建后的容器处于停止状态，然后可以使用docker start命令来启动它。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># --name 指定容器的名称  # 最后面的busybox为镜像docker create -it --name&#x3D;new_busybox busybox# 启动刚create创建的容器docker start new_busybox</code></pre></div></li><li><p>使用docker run命令直接基于镜像新建一个容器并启动，相当于先执行docker create命令从镜像创建容器，然后再执行docker start命令启动容器。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker run -it --name&#x3D;new_busybox busybox</code></pre></div></li></ol><p>当使用<code>docker run</code>创建并启动容器时，Docker 后台执行的流程为：</p><ul><li>Docker 会检查本地是否存在 busybox 镜像，如果镜像不存在则从 Docker Hub 拉取 busybox 镜像</li><li>使用 busybox 镜像创建并启动一个容器, 容器名为new_busybox</li><li>分配文件系统，并且在镜像只读层外创建一个读写层</li><li>从 Docker IP 池中分配一个 IP 给容器（在下面会讲解原理）</li><li>执行用户的启动命令运行镜像</li></ul><h5 id="2-2-终止容器"><a href="#2-2-终止容器" class="headerlink" title="2.2 终止容器"></a>2.2 终止容器</h5><p><code>docker stop</code>命令：停止运行中的容器。命令格式为 docker stop [-t|–time[=10]]。</p><p>该命令首先会向运行中的容器发送 SIGTERM 信号，如果容器内 1 号进程接受并能够处理 SIGTERM，则等待 1 号进程处理完毕后退出，如果等待一段时间后，容器仍然没有退出，则会发送 SIGKILL 强制终止容器。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker stop new_busybox</code></pre></div><p>如果你想查看停止状态的容器信息，你可以使用 docker ps -a 命令。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker ps -a</code></pre></div><p>处于终止状态的容器也可以通过<code>docker start</code>命令和<code>docker restart</code>命令来重新启动。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker start new_busyboxdocker restart new_busybox</code></pre></div><h5 id="2-3-进入容器"><a href="#2-3-进入容器" class="headerlink" title="2.3 进入容器"></a>2.3 进入容器</h5><p>处于运行状态的容器可以通过<code>docker attach</code>、<code>docker exec</code>、<code>nsenter</code>等多种方式进入容器。</p><ul><li><strong>使用</strong><code>docker attach</code>命令<strong>进入容器</strong></li></ul><p>使用 docker attach ，进入我们上一步创建好的容器，如下所示。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker attach new_busybox</code></pre></div><p><strong>注意：</strong>当我们同时使用<code>docker attach</code>命令同时在多个终端运行时，所有的终端窗口将同步显示相同内容，当某个命令行窗口的命令阻塞时，其他命令行窗口同样也无法操作。<br>由于<code>docker attach</code>命令不够灵活，因此我们一般不会使用<code>docker attach</code>进入容器</p><ul><li><strong>使用 docker exec 命令进入容器</strong></li></ul><p>通过<code>docker exec -it CONTAINER /bin/bash</code>的方式进入到一个已经运行中的容器</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker exec -it 容器id &#x2F;bin&#x2F;bash</code></pre></div><h5 id="2-4-删除容器"><a href="#2-4-删除容器" class="headerlink" title="2.4 删除容器"></a>2.4 删除容器</h5><p>删除容器命令的使用方式如下：<code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 删除已经暂停的容器docker rm 容器名或者容器id# 删除还在运行中的容器docker rm -f 容器名或者容器id</code></pre></div><h5 id="2-5-导出容器"><a href="#2-5-导出容器" class="headerlink" title="2.5 导出容器"></a>2.5 导出容器</h5><ul><li><strong>导出容器</strong></li></ul><p>使用<code>docker export CONTAINER</code>命令导出一个容器到文件，不管此时该容器是否处于运行中的状态。</p><p>执行导出命令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker export new_busybox &gt; new_busybox.tar</code></pre></div><p>执行以上命令后会在当前文件夹下生成 new_busybox.tar 文件，我们可以将该文件拷贝到其他机器上，通过导入命令实现容器的迁移。</p><ul><li><strong>导入容器</strong></li></ul><p>通过<code>docker export</code>命令导出的文件，可以使用<code>docker import</code>命令导入，执行完<code>docker import</code>后会变为本地镜像，最后再使用<code>docker run</code>命令启动该镜像，这样我们就实现了容器的迁移。</p><p>导入容器的命令格式为 docker import [OPTIONS] file|URL [REPOSITORY[:TAG]]。接下来将上一步导出的镜像文件导入到其他机器的 Docker 中并启动它。</p><p>使用<code>docker import</code>命令导入上一步导出的容器</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker import new_busybox.tar new_busybox:test</code></pre></div><p>此时，new_busybox.tar 被导入成为新的镜像，镜像名称为 new_busybox:test 。下面，我们使用<code>docker run</code>命令启动并进入容器，查看上一步创建的临时文件</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker run -it busybox:test sh</code></pre></div><p><strong>重点：</strong>通过<code>docker export</code>和<code>docker import</code>命令配合实现了容器的迁移</p><h3 id="3-网络动态IP分配"><a href="#3-网络动态IP分配" class="headerlink" title="3. 网络动态IP分配"></a>3. 网络动态IP分配</h3><p>刚讲到docker run命令的执行时需要从Docker IP 池中分配一个 IP 给容器，接下来重点讲解下该内容。</p><h5 id="一、Docker的四种网络模式"><a href="#一、Docker的四种网络模式" class="headerlink" title="一、Docker的四种网络模式"></a>一、Docker的四种网络模式</h5><p>Docker在创建容器时有四种网络模式，bridge为默认不需要用–net去指定，其他三种模式需要在创建容器时使用–net去指定。</p><ol><li>bridge模式，使用–net=bridge指定，默认设置。</li><li>none模式，使用–net=none指定。</li><li>host模式，使用–net=host指定。</li><li>container模式，使用–net=container:容器名称或ID指定。（如：–net=container:30b668ccb630）</li></ol><p><strong>bridge模式：</strong>docker网络隔离基于网络命名空间<Network Namespace>，在物理机上创建docker容器时会为每一个docker容器分配网络命名空间，并且把容器IP桥接到物理机的虚拟网桥上。</p><p><strong>none模式：</strong>此模式下创建容器是不会为容器配置任何网络参数的，如：容器网卡、IP、通信路由等，全部需要自己去配置。</p><p><strong>host模式：</strong>此模式创建的容器没有自己独立的网络命名空间，是和物理机共享一个Network Namespace，并且共享物理机的所有端口与IP，并且这个模式认为是不安全的。</p><p><strong>container模式：</strong>此模式和host模式很类似，只是此模式创建容器共享的是其他容器的IP和端口而不是物理机，此模式容器自身是不会配置网络和端口，创建此模式容器进去后，你会发现里边的IP是你所指定的那个容器IP并且端口也是共享的，而且其它还是互相隔离的，如进程等。</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 资源隔离</title>
    <link href="/2020/06/03/Docker%E5%BA%95%E5%B1%82%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BBnamespace/"/>
    <url>/2020/06/03/Docker%E5%BA%95%E5%B1%82%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BBnamespace/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>​    在上一章Docker安全性能中已有讲解Namespace的功能作用。</p><p>​    概念回顾：Docker 是基于 Linux 内核的 <strong>Namespace</strong> 技术实现资源隔离的，<strong>所有的容器都共享主机的内核</strong>。其实这与以虚拟机为代表的云计算时代还是有很多区别的，比如虚拟机有着更好的隔离性和安全性，而容器的隔离性和安全性则相对较弱。</p><p>​    虽然Namespace的技术的隔离和安全性相对较弱，那么究竟什么是 Namespace，各种 Namespace 都有什么作用，为什么 Docker 需要 Namespace呢？</p><h3 id="2-什么是Namespace"><a href="#2-什么是Namespace" class="headerlink" title="2.什么是Namespace"></a>2.什么是Namespace</h3><p>​    <strong>维基百科定义</strong>：Namespace 是 Linux 内核的一项功能，该功能对内核资源进行分区，以使一组进程看到一组资源，而另一组进程看到另一组资源。Namespace 的工作方式通过为一组资源和进程设置相同的 Namespace 而起作用，但是这些 Namespace 引用了不同的资源。资源可能存在于多个 Namespace 中。这些资源可以是进程 ID、主机名、用户 ID、文件名、与网络访问相关的名称和进程间通信。</p><p>​    <strong>简单来说，</strong>Namespace 是 Linux 内核的一个特性，该<strong>特性可以实现在同一主机系统中，对进程 ID、主机名、用户 ID、文件名、网络和进程间通信等资源的隔离</strong>。Docker 利用 Linux 内核的 Namespace 特性，<strong>实现了每个容器的资源相互隔离，从而保证容器内部只能访问到自己 Namespace 的资源</strong>。</p><p><img src="/img/images/9.Namespaces%E7%B1%BB%E5%9E%8B.png"></p><h3 id="3-Namespace的作用"><a href="#3-Namespace的作用" class="headerlink" title="3.Namespace的作用"></a>3.Namespace的作用</h3><p>下面分别讲解六种Namespace的运用：<br><strong>1）Mount Namespace</strong><br>​    <strong>Mount Namespace 是 Linux 内核实现的第一个 Namespace，</strong>从内核的 2.4.19 版本开始加入。它可以用来隔离不同的进程或进程组看到的挂载点。通俗地说，就是可以实现在不同的进程中看到不同的挂载目录。使用 Mount Namespace 可以实现容器内只能看到自己的挂载信息，在容器内的挂载操作不会影响主机的挂载目录。</p><p>​    <strong>unshare</strong> 是 util-linux 工具包中的一个工具，CentOS 7 系统默认已经集成了该工具，使用 unshare 命令可以实现创建并访问不同类型的 Namespace。</p><p>首先我们使用以下命令创建一个 bash 进程并且新建一个 Mount Namespace：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ sudo unshare --mount --fork &#x2F;bin&#x2F;bash</code></pre></div><p>执行完上述命令后，这时我们已经在主机上创建了一个新的 Mount Namespace，并且当前命令行窗口加入了新创建的 Mount Namespace。下面我通过一个例子来验证下，<strong>在独立的 Mount Namespace 内创建挂载目录是不影响主机的挂载目录的。</strong></p><p>首先在 /tmp 目录下创建一个目录。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 centos]# mkdir &#x2F;tmp&#x2F;tmpfs</code></pre></div><p>创建好目录后使用 mount 命令挂载一个 tmpfs 类型的目录。命令如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 centos]# mount -t tmpfs -o size&#x3D;20m tmpfs &#x2F;tmp&#x2F;tmpfs</code></pre></div><p>然后使用 df 命令查看一下已经挂载的目录信息：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 centos]# df -hFilesystem      Size  Used Avail Use% Mounted on&#x2F;dev&#x2F;vda1       500G  1.4G  499G   1% &#x2F;devtmpfs         16G     0   16G   0% &#x2F;devtmpfs            16G     0   16G   0% &#x2F;dev&#x2F;shmtmpfs            16G     0   16G   0% &#x2F;sys&#x2F;fs&#x2F;cgrouptmpfs            16G   57M   16G   1% &#x2F;runtmpfs           3.2G     0  3.2G   0% &#x2F;run&#x2F;user&#x2F;1000tmpfs            20M     0   20M   0% &#x2F;tmp&#x2F;tmpfs</code></pre></div><p>可以看到 /tmp/tmpfs 目录已经被正确挂载。为了验证主机上并没有挂载此目录，我们新打开一个命令行窗口，同样执行 df 命令查看主机的挂载信息：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[centos@centos7 ~]$ df -hFilesystem      Size  Used Avail Use% Mounted ondevtmpfs         16G     0   16G   0% &#x2F;devtmpfs            16G     0   16G   0% &#x2F;dev&#x2F;shmtmpfs            16G   57M   16G   1% &#x2F;runtmpfs            16G     0   16G   0% &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;dev&#x2F;vda1       500G  1.4G  499G   1% &#x2F;tmpfs           3.2G     0  3.2G   0% &#x2F;run&#x2F;user&#x2F;1000</code></pre></div><p>通过上面输出可以看到主机上并没有挂载 /tmp/tmpfs，可见我们独立的 Mount Namespace 中执行 mount 操作并不会影响主机。</p><p>为了进一步验证我们的想法，我们继续在当前命令行窗口查看一下当前进程的 Namespace 信息，命令如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 centos]# ls -l &#x2F;proc&#x2F;self&#x2F;ns&#x2F;total 0lrwxrwxrwx. 1 root root 0 Sep  4 08:20 ipc -&gt; ipc:[4026531839]lrwxrwxrwx. 1 root root 0 Sep  4 08:20 mnt -&gt; mnt:[4026532239]lrwxrwxrwx. 1 root root 0 Sep  4 08:20 net -&gt; net:[4026531956]lrwxrwxrwx. 1 root root 0 Sep  4 08:20 pid -&gt; pid:[4026531836]lrwxrwxrwx. 1 root root 0 Sep  4 08:20 user -&gt; user:[4026531837]lrwxrwxrwx. 1 root root 0 Sep  4 08:20 uts -&gt; uts:[4026531838]</code></pre></div><p>然后新打开一个命令行窗口，使用相同的命令查看一下主机上的 Namespace 信息：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[centos@centos7 ~]$ ls -l &#x2F;proc&#x2F;self&#x2F;ns&#x2F;total 0lrwxrwxrwx. 1 centos centos 0 Sep  4 08:20 ipc -&gt; ipc:[4026531839]lrwxrwxrwx. 1 centos centos 0 Sep  4 08:20 mnt -&gt; mnt:[4026531840]lrwxrwxrwx. 1 centos centos 0 Sep  4 08:20 net -&gt; net:[4026531956]lrwxrwxrwx. 1 centos centos 0 Sep  4 08:20 pid -&gt; pid:[4026531836]lrwxrwxrwx. 1 centos centos 0 Sep  4 08:20 user -&gt; user:[4026531837]lrwxrwxrwx. 1 centos centos 0 Sep  4 08:20 uts -&gt; uts:[4026531838]</code></pre></div><p>通过对比两次命令的输出结果，我们可以看到，除了 Mount Namespace 的 ID 值不一样外，其他Namespace 的 ID 值均一致。</p><p>通过以上结果我们可以得出结论，使用 unshare 命令可以新建 Mount Namespace，并且在新建的 Mount Namespace 内 mount 是和外部完全隔离的。</p><p><strong>2）PID Namespace</strong><br>​    <strong>PID Namespace 的作用是用来隔离进程</strong>。在不同的 PID Namespace 中，进程可以拥有相同的 PID 号，利用 PID Namespace 可以实现每个容器的主进程为 1 号进程，而容器内的进程在主机上却拥有不同的PID。例如一个进程在主机上 PID 为 122，使用 PID Namespace 可以实现该进程在容器内看到的 PID 为 1。</p><p>下面演示PID Namespace的作用。创建一个 bash 进程，并且新建一个 PID Namespace：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ sudo unshare --pid --fork --mount-proc &#x2F;bin&#x2F;bash</code></pre></div><p>执行完上述命令后，我们在主机上创建了一个新的 PID Namespace，并且当前命令行窗口加入了新创建的 PID Namespace。在当前的命令行窗口使用 ps aux 命令查看一下进程信息：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 centos]# ps auxUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot         1  0.0  0.0 115544  2004 pts&#x2F;0    S    10:57   0:00 bashroot        10  0.0  0.0 155444  1764 pts&#x2F;0    R+   10:59   0:00 ps aux</code></pre></div><p>通过上述命令输出结果可以看到当前 Namespace 下 bash 为 1 号进程，而且我们也看不到主机上的其他进程信息。</p><p><strong>3）UTS Namespace</strong><br>​    <strong>UTS Namespace 主要是用来隔离主机名的</strong>，它允许每个 UTS Namespace 拥有一个独立的主机名。例如我们的主机名称为 docker，使用 UTS Namespace 可以实现在容器内的主机名称为 utsdocker 或者其他任意自定义主机名。</p><p>同样我们通过一个实例来验证下 UTS Namespace 的作用，首先我们使用 unshare 命令来创建一个 UTS Namespace：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ sudo unshare --uts --fork &#x2F;bin&#x2F;bash</code></pre></div><p>创建好 UTS Namespace 后，当前命令行窗口已经处于一个独立的 UTS Namespace 中，下面我们使用 hostname 命令（hostname 可以用来查看主机名称）设置一下主机名：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">root@centos7 centos]# hostname -b utsdocker</code></pre></div><p>然后再查看一下主机名：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 centos]# hostnameutsdocker</code></pre></div><p>通过上面命令的输出，我们可以看到当前UTS Namespace 内的主机名已经被修改为 utsdocker。然后我们新打开一个命令行窗口，使用相同的命令查看一下主机的 hostname：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[centos@centos7 ~]$ hostnamecentos7</code></pre></div><p>可以看到主机的名称仍然为 centos7，并没有被修改。由此，可以验证 UTS Namespace 可以用来隔离主机名。</p><p><strong>4）IPC Namespace</strong><br>​    <strong>IPC Namespace 主要是用来隔离进程间通信的</strong>。<strong>PID Namespace 和 IPC Namespace 一起使用可以实现同一 IPC Namespace 内的进程彼此可以通信</strong>，不同 IPC Namespace 的进程却不能通信。</p><p>使用 unshare 命令来创建一个 IPC Namespace：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ sudo unshare --ipc --fork &#x2F;bin&#x2F;bash</code></pre></div><p>下面我们需要借助两个命令来实现对 IPC Namespace 的验证。</p><ul><li><p>ipcs -q 命令：用来查看系统间通信队列列表。</p></li><li><p>ipcmk -Q 命令：用来创建系统间通信队列。</p></li></ul><p>我们首先使用 ipcs -q 命令查看一下当前 IPC Namespace 下的系统通信队列列表：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[centos@centos7 ~]$ ipcs -q------ Message Queues --------key        msqid      owner      perms      used-bytes   messages</code></pre></div><p>由上可以看到当前无任何系统通信队列，然后我们使用 ipcmk -Q 命令创建一个系统通信队列：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 centos]# ipcmk -QMessage queue id: 0</code></pre></div><p>再次使用 ipcs -q 命令查看当前 IPC Namespace 下的系统通信队列列表：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 centos]# ipcs -q------ Message Queues --------key        msqid      owner      perms      used-bytes   messages0x73682a32 0          root       644        0            0</code></pre></div><p>可以看到我们已经成功创建了一个系统通信队列。然后我们新打开一个命令行窗口，使用ipcs -q 命令查看一下主机的系统通信队列：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[centos@centos7 ~]$ ipcs -q------ Message Queues --------key        msqid      owner      perms      used-bytes   messages</code></pre></div><p>通过上面的实验，可以发现，在单独的 IPC Namespace 内创建的系统通信队列在主机上无法看到。即 IPC Namespace 实现了系统通信队列的隔离。</p><p><strong>5）User Namespace</strong><br>​    <strong>User Namespace 主要是用来隔离用户和用户组的</strong>。一个比较典型的应用场景就是在主机上以非 root 用户运行的进程可以在一个单独的 User Namespace 中映射成 root 用户。使用 User Namespace 可以实现进程在容器内拥有 root 权限，而在主机上却只是普通用户。</p><p>User Namesapce 的创建是可以不使用 root 权限的。下面我们以普通用户的身份创建一个 User Namespace，命令如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[centos@centos7 ~]$ unshare --user -r &#x2F;bin&#x2F;bash</code></pre></div><p>CentOS7 默认允许创建的 User Namespace 为 0，如果执行上述命令失败（ unshare 命令返回的错误为 unshare: unshare failed: Invalid argument ），需要使用以下命令修改系统允许创建的 User Namespace 数量，命令为：echo 65535 &gt; /proc/sys/user/max_user_namespaces，然后再次尝试创建 User Namespace。</p><p>然后执行 id 命令查看一下当前的用户信息：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 ~]# iduid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root),65534(nfsnobody) context&#x3D;unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</code></pre></div><p>通过上面的输出可以看到我们在新的 User Namespace 内已经是 root 用户了。下面我们使用只有主机 root 用户才可以执行的 reboot 命令来验证一下，在当前命令行窗口执行 reboot 命令：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 ~]# rebootFailed to open &#x2F;dev&#x2F;initctl: Permission deniedFailed to talk to init daemon.</code></pre></div><p>可以看到，我们在新创建的 User Namespace 内虽然是 root 用户，但是并没有权限执行 reboot 命令。这说明在隔离的 User Namespace 中，并不能获取到主机的 root 权限，也就是说 User Namespace 实现了用户和用户组的隔离。</p><p><strong>6）Net Namespace</strong><br>​    <strong>Net Namespace 是用来隔离网络设备、IP 地址和端口等信息的</strong>。Net Namespace 可以让每个进程拥有自己独立    的 IP 地址，端口和网卡信息。例如主机 IP 地址为 172.16.4.1 ，容器内可以设置独立的 IP 地址为 192.168.1.1。</p><p>同样用实例验证，我们首先使用 ip a 命令查看一下主机上的网络信息：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1&#x2F;128 scope host       valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link&#x2F;ether 02:11:b0:14:01:0c brd ff:ff:ff:ff:ff:ff    inet 172.20.1.11&#x2F;24 brd 172.20.1.255 scope global dynamic eth0       valid_lft 86063337sec preferred_lft 86063337sec    inet6 fe80::11:b0ff:fe14:10c&#x2F;64 scope link       valid_lft forever preferred_lft forever3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default    link&#x2F;ether 02:42:82:8d:a0:df brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1&#x2F;16 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:82ff:fe8d:a0df&#x2F;64 scope link       valid_lft forever preferred_lft forever</code></pre></div><p>然后我们使用以下命令创建一个 Net Namespace：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ sudo unshare --net --fork &#x2F;bin&#x2F;bash</code></pre></div><p>同样的我们使用 ip a 命令查看一下网络信息：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@centos7 centos]# ip a1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</code></pre></div><p>可以看到，宿主机上有 lo、eth0、docker0 等网络设备，而我们新建的 Net Namespace 内则与主机上的网络设备不同。</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>​    Linux 内核从 2002 年 2.4.19 版本开始加入了 Mount Namespace，而直到内核 3.8 版本加入了 User Namespace 才为容器提供了足够的支持功能。</p><p>​    当 Docker 新建一个容器时， 它会创建这六种 Namespace，然后将容器中的进程加入这些 Namespace 之中，使得 Docker 容器中的进程只能看到当前 Namespace 中的系统资源。</p><p>​    正是由于 Docker 使用了 Linux 的这些 Namespace 技术，才实现了 Docker 容器的隔离，可以说没有 Namespace，就没有 Docker 容器。</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 技术原理</title>
    <link href="/2020/06/03/Docker%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/"/>
    <url>/2020/06/03/Docker%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="先聊聊Docker-的基础内容：Docker-能做什么，怎么安装-Docker，以及容器技术的原理。"><a href="#先聊聊Docker-的基础内容：Docker-能做什么，怎么安装-Docker，以及容器技术的原理。" class="headerlink" title="先聊聊Docker 的基础内容：Docker 能做什么，怎么安装 Docker，以及容器技术的原理。"></a><strong>先聊聊Docker 的基础内容：Docker 能做什么，怎么安装 Docker，以及容器技术的原理。</strong></h4><h3 id="1-Docker-能做什么？"><a href="#1-Docker-能做什么？" class="headerlink" title="1. Docker 能做什么？"></a>1. Docker 能做什么？</h3><p>​    众所周知，Docker 是一个用于开发，发布和运行应用程序的开放平台。通俗地讲，Docker 类似于集装箱。在一艘大船上，各种货物要想被整齐摆放并且相互不受到影响，我们就需要把各种货物进行集装箱标准化。有了集装箱，我们就不需要专门运输水果或者化学用品的船了。我们可以把各种货品通过集装箱打包，然后统一放到一艘船上运输。Docker 要做的就是把各种软件打包成一个集装箱（镜像），然后分发，且在运行的时候可以相互隔离。</p><p>到此，相信你已经迫不及待想要体验下了，下面就让我们来安装一个 Docker。</p><p><img src="//img/images/docker1.png"></p><h4 id="2-CentOS-下安装-Docker"><a href="#2-CentOS-下安装-Docker" class="headerlink" title="2. CentOS 下安装 Docker"></a><strong>2. CentOS 下安装 Docker</strong></h4><p>​    Docker 是跨平台的解决方案，它支持在当前主流的各大平台安装，包括 Ubuntu、RHEL、CentOS、Debian 等 Linux 发行版，同时也可以在 OSX 、Microsoft Windows 等非 Linux 平台下安装使用。</p><p>​    因为 Linux 是 Docker 的原生支持平台，所以推荐你在 Linux 上使用 Docker。由于生产环境中我们使用 CentOS 较多，下面主要针对在 CentOS 平台下安装和使用 Docker 展开介绍。</p><h5 id="2-1-操作系统要求"><a href="#2-1-操作系统要求" class="headerlink" title="2.1 操作系统要求"></a>2.1 操作系统要求</h5><p>要安装 Docker，我们需要 CentOS 7 及以上的发行版本。</p><h5 id="2-2-卸载已有-Docker"><a href="#2-2-卸载已有-Docker" class="headerlink" title="2.2 卸载已有 Docker"></a>2.2 卸载已有 Docker</h5><p>如果你已经安装过旧版的 Docker，可以先执行以下命令卸载旧版 Docker。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ sudo yum remove docker \docker-client \                docker-client-latest \                docker-common \                docker-latest \                docker-latest-logrotate \                docker-logrotate \                docker-engine</code></pre></div><h5 id="2-3-安装-Docker"><a href="#2-3-安装-Docker" class="headerlink" title="2.3 安装 Docker"></a>2.3 安装 Docker</h5><p>首次安装 Docker 之前，需要添加 Docker 安装源。添加之后，我们就可以从已经配置好的源，安装和更新 Docker。添加 Docker 安装源的命令如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ yum -y install yum-utils$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</code></pre></div><p>正常情况下，直接安装最新版本的 Docker 即可，因为最新版本的 Docker 有着更好的稳定性和安全性。你可以使用以下命令安装最新版本的 Docker。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ sudo yum install docker-ce docker-ce-cli containerd.io</code></pre></div><p>安装完成后，使用以下命令启动 Docker。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ sudo systemctl start docker</code></pre></div><h5 id="2-4-启动一个-hello-world-的容器"><a href="#2-4-启动一个-hello-world-的容器" class="headerlink" title="2.4 启动一个 hello world 的容器"></a>2.4 启动一个 hello world 的容器</h5><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ sudo docker run hello-worldUnable to find image &#39;hello-world:latest&#39; locallylatest: Pulling from library&#x2F;hello-world0e03bdcc26d7: Pull completeDigest: sha256:7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5Status: Downloaded newer image for hello-world:latestHello from Docker!</code></pre></div><p>运行上述命令，Docker 首先会检查本地是否有<code>hello-world</code>这个镜像，如果发现本地没有这个镜像，Docker 就会去 <strong>Docker Hub</strong> 官方仓库下载此镜像，然后运行它。最后我们看到该镜像输出 “Hello from Docker!” 并退出。</p><blockquote><p>安装完成后默认 docker 命令只能以 root 用户执行，如果想允许普通用户执行 docker 命令，需要执行以下命令 sudo groupadd docker &amp;&amp; sudo gpasswd -a ${USER} docker &amp;&amp; sudo systemctl restart docker ，执行完命令后，退出当前命令行窗口并打开新的窗口即可。</p></blockquote><p>安装完 Docker，先不着急使用，先来了解下容器的技术原理，这样才能知其所以然。</p><h3 id="3-容器技术原理"><a href="#3-容器技术原理" class="headerlink" title="3. 容器技术原理"></a>3. 容器技术原理</h3><p>必须先提一提chroot，因为 chroot 是最早的容器雏形。chroot 意味着切换根目录，有了 chroot 就意味着我们可以把任何目录更改为当前进程的根目录，这与容器非常相似，下面我们通过一个实例了解下 chroot。</p><h4 id="3-1-chroot-即-change-root-directory-（更改-root-目录）"><a href="#3-1-chroot-即-change-root-directory-（更改-root-目录）" class="headerlink" title="3.1 chroot 即 change root directory （更改 root 目录）"></a>3.1 chroot 即 change root directory （更改 root 目录）</h4><p>​    什么是 chroot 呢？下面是 chroot 维基百科定义：</p><blockquote><p>chroot 是在 Unix 和 Linux 系统的一个操作，针对正在运作的软件行程和它的子进程，改变它外显的根目录。一个运行在这个环境下，经由 chroot 设置根目录的程序，它不能够对这个指定根目录之外的文件进行访问动作，不能读取，也不能更改它的内容。</p></blockquote><p>​    通俗地说 ，chroot 就是可以改变某进程的根目录，使这个程序不能访问目录之外的其他目录，这个跟我们在一个容器中是很相似的。</p><p>​    在经过 chroot 之后，系统读取到的目录和文件将不在是旧系统根下的而是新根下(即被指定的新的位置)的目录结构和文件，因此它带来的好处大致有以下3个：</p><ol><li><p>增加了系统的安全性，限制了用户的权力；</p><p>在经过 chroot 之后，在新根下将访问不到旧系统的根目录结构和文件，这样就增强了系统的安全性。这个一般是在登录 (login) 前使用 chroot，以此达到用户不能访问一些特定的文件。</p></li><li><p>建立一个与原系统隔离的系统目录结构，方便用户的开发；</p><p>使用 chroot 后，系统读取的是新根下的目录和文件，这是一个与原系统根下文件不相关的目录结构。在这个新的环境中，可以用来测试软件的静态编译以及一些与系统不相关的独立开发。</p></li><li><p>切换系统的根目录位置，引导 Linux 系统启动以及急救系统等。</p><p>chroot 的作用就是切换系统的根位置，而这个作用最为明显的是在系统初始引导磁盘的处理过程中使用，从初始 RAM 磁盘 (initrd) 切换系统的根位置并执行真正的 init。另外，当系统出现一些问题时，我们也可以使用 chroot 来切换到一个临时的系统。</p></li></ol><p>下面我们<strong>通过一个实例来演示下 chroot。</strong></p><p>首先我们在当前/home目录下创建一个 rootfs 目录：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ mkdir rootfs</code></pre></div><p>这里为了方便演示，我使用现成的 busybox 镜像来创建一个系统，镜像的概念和组成后面我会详细讲解，如果你没有 Docker 基础可以把下面的操作命令理解成在 rootfs 下创建了一些目录和放置了一些二进制文件。</p><p>复制</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ cd rootfs $ docker export $(docker create busybox) -o busybox.tar$ tar -xf busybox.tar</code></pre></div><p>执行完上面的命令后，在 rootfs 目录下，我们会得到一些目录和文件。下面我们使用 ls 命令查看一下 rootfs 目录下的内容。</p><p>复制</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ lsbin  busybox.tar  dev  etc  home  proc  root  sys  tmp  usr  var</code></pre></div><p>可以看到我们在 rootfs 目录下初始化了一些目录，下面让我们通过一条命令来见证 chroot 的神奇之处。使用以下命令，可以启动一个 sh 进程，并且把 /home/centos/rootfs 作为 sh 进程的根目录。</p><p>复制</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ chroot &#x2F;home&#x2F;rootfs &#x2F;bin&#x2F;sh</code></pre></div><p>此时，我们的命令行窗口已经处于上述命令启动的 sh 进程中。在当前 sh 命令行窗口下，我们使用 ls 命令查看一下当前进程，看是否真的与主机上的其他目录隔离开了</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">&#x2F; # ls &#x2F;bin  busybox.tar  dev  etc  home  proc  root  sys  tmp  usr  var</code></pre></div><p>这里可以看到当前进程的根目录已经变成了主机上的 /home/rootfs 目录。这样就实现了当前进程与主机的隔离。到此为止，一个目录隔离的容器就完成了。操作图解如下图所示：</p><p><img src="/img/images/chroot1.png"></p><p>但是，此时还不能称之为一个容器，为什么呢？你可以在上一步（使用 chroot 启动命令行窗口）执行以下命令，查看如下路由信息：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">&#x2F;etc # ip routedefault via 172.20.1.1 dev eth0172.17.0.0&#x2F;16 dev docker0 scope link  src 172.17.0.1172.20.1.0&#x2F;24 dev eth0 scope link  src 172.20.1.3</code></pre></div><p>执行 ip route 命令后，你可以看到网络信息并没有隔离，实际上进程等信息此时也并未隔离。要想实现一个完整的容器，我们还需要 Linux 的其他三项技术： Namespace、Cgroups 和联合文件系统。</p><p>Docker 是利用 Linux 的 Namespace 、Cgroups 和联合文件系统三大机制来保证实现的， 所以它的原理是使用 Namespace 做主机名、网络、PID 等资源的隔离，使用 Cgroups 对进程或者进程组做资源（例如：CPU、内存等）的限制，联合文件系统用于镜像构建和容器运行环境。</p><p>下面简单解释下它们的作用</p><h4 id="3-2-Namespace"><a href="#3-2-Namespace" class="headerlink" title="3.2 Namespace"></a><strong>3.2 Namespace</strong></h4><p>​    Namespace 是 Linux 内核的一项功能，该功能对内核资源进行隔离，使得容器中的进程都可以在单独的命名空间中运行，并且只可以访问当前容器命名空间的资源。Namespace 可以隔离进程 ID、主机名、用户 ID、文件名、网络访问和进程间通信等相关资源。</p><p>Docker 主要用到以下五种命名空间。</p><ul><li>pid namespace：用于隔离进程 ID。</li><li>net namespace：隔离网络接口，在虚拟的 net namespace 内用户可以拥有自己独立的 IP、路由、端口等。</li><li>mnt namespace：文件系统挂载点隔离。</li><li>ipc namespace：信号量,消息队列和共享内存的隔离。</li><li>uts namespace：主机名和域名的隔离。</li></ul><h4 id="3-3-Cgroups-即：Linux-Control-Group"><a href="#3-3-Cgroups-即：Linux-Control-Group" class="headerlink" title="3.3 Cgroups 即：Linux Control Group"></a>3.3 Cgroups 即：Linux Control Group</h4><p>​    Cgroups 是一种 Linux 内核功能，可以限制和隔离进程的资源使用情况（CPU、内存、磁盘 I/O、网络等）。在容器的实现中，Cgroups 通常用来限制容器的 CPU 和内存等资源的使用。</p><p>参考地址：<a href="https://coolshell.cn/articles/17049.html">https://coolshell.cn/articles/17049.html</a></p><p>首先，Linux把CGroup这个事实现成了一个file system，你可以mount。在我的Ubuntu 14.04下，你输入以下命令你就可以看到cgroup已为你mount好了。如下图所示：</p><p><img src="/img/images/cgroups1.png"></p><p>在**/sys/fs**下有一个cgroup的目录，这个目录下还有很多子目录，比如： cpu，cpuset，memory，blkio……这些，这些都是cgroup的子系统。分别用于干不同的事的。</p><h4 id="CPU限制"><a href="#CPU限制" class="headerlink" title="CPU限制"></a>CPU限制</h4><p><strong>1)  先创建一个test.py文件</strong></p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><p><strong>2）执行test.py文件，并查询内存使用情况</strong></p><p><img src="/img/images/cgroups2.png"></p><p><strong>3) 限制cpu使用效率</strong></p><p><img src="/img/images/cgroups-cpu-quota-us.png"></p><p>在/sys/fs/cgroup/cpu下创建了一个coco，而且你会发现，一旦你创建了一个子目录，这个子目录里又有很多文件了。其中<strong>cpu.cfs_quota_us</strong>表示该control group限制占用的时间（微秒），默认为-1，表示不限制。如果设为50000，表示占用50000/10000=50%的CPU。</p><p>这里，我们设置占用20%的CPU，即把cpu.cfs_quota_us设置为20000。执行命令就是：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">echo 20000 &gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;coco&#x2F;cpu.cfs_quota_us</code></pre></div><p>然后执行死循环test.py文件，瞬间cpu就会跑到100%。如下图所示：</p><p><img src="/img/images/cgroups-cpu-full-top.png"></p><p>我们看到，这个进程的PID是4897，我们把这个进程加到这个cgroup中：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">echo 4897 &gt;&gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;coco&#x2F;tasks</code></pre></div><p>然后，就会在top中看到CPU的利用立马下降成20%了。（前面我们设置的20000就是20%的意思）</p><p><strong>4) 查看内存使用情况</strong></p><p><img src="/img/images/cgroups-cpu-top.png"></p><h4 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h4><h5 id="1）创建test1-py文件"><a href="#1）创建test1-py文件" class="headerlink" title="1）创建test1.py文件"></a>1）创建test1.py文件</h5><div class="code-wrapper"><pre class="language-none"><code class="language-none">def main():    i &#x3D; []    while True:        i.append(1)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre></div><p>想要的效果为：i变量一直新增元素，导致i的内存空间会一直增大。</p><p><strong>2） 执行test1.py文件，并通过top观察执行消耗内存情况</strong></p><p>执行test1.py文件，获取到进程PID</p><div class="code-wrapper"><pre class="language-Python" data-language="Python"><code class="language-Python">python test1.py &amp;</code></pre></div><p>然后可以通过top查看到对应进程的内存使用情况。</p><p><strong>3）限制内存使用情况</strong></p><p><img src="/img/images/cgroups-memory.png"></p><p>在/sys/fs/cgroup/memory下创建了一个coco，而且你会发现，一旦你创建了一个子目录，这个子目录里又有很多文件了。其中<strong>memory.limit_in_bytes</strong> 或 <strong>memory.memsw.limit_in_bytes</strong> 限制进程内存占用的大小，避免在进程异常时耗尽系统资源</p><p>这里，我们设置占用300k的内存使用量，即把memory.limit_in_bytes设置为300k。执行命令就是：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">echo 300k &gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;coco&#x2F;memory.limit_in_bytes </code></pre></div><p>然后再把需要限制内存大小的进程加到这个cgroup中：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">echo 23541 &gt;&gt; &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;coco&#x2F;tasks</code></pre></div><p>最后你会看到，一会上面PID为 23541的进程将会被kill掉。</p><p><strong>4）查看进程</strong></p><p>从上图中可以看出，当执行kill -9 23541时，提示无法找到PID为23541的进程。那就说明当PID为23541的进程消耗的内存超过了300k时，将主动被kill掉了。</p><h4 id="3-4-联合文件系统"><a href="#3-4-联合文件系统" class="headerlink" title="3.4 联合文件系统"></a>3.4 联合文件系统</h4><p>​    联合文件系统，又叫 UnionFS，是一种通过创建文件层进程操作的文件系统，因此，联合文件系统非常轻快。Docker 使用联合文件系统为容器提供构建层，使得容器可以实现写时复制以及镜像的分层构建和存储。常用的联合文件系统有 AUFS、Overlay 和 Devicemapper 等。</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 镜像配置</title>
    <link href="/2020/06/03/Docker%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
    <url>/2020/06/03/Docker%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>​    Docker 核心：镜像，首先重点讲解一下镜像的基本操作，然后介绍一下镜像的实现原理。</p><h3 id="1-镜像"><a href="#1-镜像" class="headerlink" title="1. 镜像"></a>1. 镜像</h3><p>​    镜像是一个只读的 Docker 容器模板，包含启动容器所需要的所有文件系统结构和内容。简单来讲，<strong>镜像是一个特殊的文件系统</strong>，它提供了容器运行时所需的程序、软件库、资源、配置等静态数据。即镜像不包含任何动态数据，镜像内容在构建后不会被改变。</p><p>如何操作镜像：</p><p><img src="/img/images/3docker-%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C.png"></p><p>从图中可知，镜像的操作可分为：</p><p>​    拉取镜像，使用docker pull命令拉取远程仓库的镜像到本地 ；</p><p>​    重命名镜像，使用docker tag命令“重命名”镜像 ；</p><p>​    查看镜像，使用docker image ls或docker images命令查看本地已经存在的镜像 ；</p><p>​    删除镜像，使用docker rmi命令删除无用镜像 ；</p><p>​    构建镜像，构建镜像有两种方式。第一种方式是使用docker build命令基于 Dockerfile 构建镜像，也是我比较推荐的镜像构建方式；第二种方式是使用docker commit命令基于已经运行的容器提交为镜像。</p><h4 id="1-1-拉取镜像"><a href="#1-1-拉取镜像" class="headerlink" title="1.1 拉取镜像"></a><strong>1.1 拉取镜像</strong></h4><p>Docker 镜像的拉取使用<strong>docker pull命令</strong>， 命令格式一般为 **docker pull [Registry]/[Repository]/[Image]:[Tag]**。</p><ul><li><p>Registry 为注册服务器，Docker 默认会从 docker.io 拉取镜像，如果你有自己的镜像仓库，可以把 Registry 替换为自己的注册服务器。</p></li><li><p>Repository 为镜像仓库，通常把一组相关联的镜像归为一个镜像仓库，library为 Docker 默认的镜像仓库。</p></li><li><p>Image 为镜像名称。</p></li><li><p>Tag 为镜像的标签，如果你不指定拉取镜像的标签，默认为latest。</p></li></ul><p>例如，我们需要获取一个 busybox 镜像，可以执行以下命令：</p><p>busybox 是一个集成了数百个 Linux 命令（例如 curl、grep、mount、telnet 等）的精简工具箱，只有几兆大小，被誉为 Linux 系统的瑞士军刀。我经常会使用 busybox 做调试来查找生产环境中遇到的问题。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ docker pull busyboxUsing default tag: latestlatest: Pulling from library&#x2F;busybox61c5ed1cbdf8: Pull completeDigest: sha256:4f47c01fa91355af2865ac10fef5bf6ec9c7f42ad2321377c21e844427972977Status: Downloaded newer image for busybox:latestdocker.io&#x2F;library&#x2F;busybox:latest</code></pre></div><p>​    实际上执行docker pull busybox命令，都是先从本地搜索，如果本地搜索不到busybox镜像则从 Docker Hub 下载镜像。</p><h4 id="1-2-操作镜像"><a href="#1-2-操作镜像" class="headerlink" title="1.2 操作镜像"></a>1.2 操作镜像</h4><h5 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h5><p>Docker 镜像查看使用<strong>docker images或者docker image ls</strong>命令。</p><p>下面我们使用docker images命令列出本地所有的镜像。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEnginx               latest              4bb46517cac3        9 days ago          133MBnginx               1.15                53f3fd8007f7        15 months ago       109MBbusybox             latest              018c9d7b792b        3 weeks ago         1.22MB</code></pre></div><p>如果我们想要查询指定的镜像，可以使用docker image ls命令来查询。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ docker image ls busyboxREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEbusybox             latest              018c9d7b792b        3 weeks ago         1.22MB</code></pre></div><p>当然你也可以使用docker images命令列出所有镜像，然后使用grep命令进行过滤。使用方法如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ docker images |grep busyboxbusybox             latest              018c9d7b792b        3 weeks ago         1.22MB</code></pre></div><p><strong>“重命名”镜像</strong></p><p>如果你想要自定义镜像名称或者推送镜像到其他镜像仓库，你可以使用docker tag命令将镜像重命名。docker tag的命令格式为 docker tag [SOURCE_IMAGE][:TAG] [TARGET_IMAGE][:TAG]。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ docker tag busybox:latest mybusybox:latest</code></pre></div><p>执行完docker tag命令后，可以使用查询镜像命令查看一下镜像列表：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEbusybox             latest              018c9d7b792b        3 weeks ago         1.22MBmybusybox           latest              018c9d7b792b        3 weeks ago         1.22MB</code></pre></div><p>可以看到，镜像列表中多了一个mybusybox的镜像。busybox和mybusybox这两个镜像的 IMAGE ID 是完全一样的。为什么呢？实际上它们指向了同一个镜像文件，只是别名不同而已。</p><h5 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h5><p>你可以使用<strong>docker rmi或者docker image rm</strong>命令删除镜像。</p><p>例：删除mybusybox镜像</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ docker rmi mybusybox此时，再次使用docker images命令查看一下我们机器上的镜像列表。$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEbusybox             latest              018c9d7b792b        3 weeks ago         1.22MB通过上面的输出，我们可以看到，mybusybox镜像已经被删除。</code></pre></div><h5 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a><strong>构建镜像</strong></h5><p>构建镜像主要有两种方式：</p><ul><li><strong>docker commit</strong>命令从运行中的容器提交为镜像；</li><li><strong>docker build</strong>命令从 Dockerfile 构建镜像。</li></ul><p><strong>Docker commit命令</strong></p><p>首先介绍下如何从运行中的容器提交为镜像。我依旧使用 busybox 镜像举例，使用以下命令创建一个名为 busybox 的容器并进入 busybox 容器。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none"># 创建容器$ docker run -itd busybox# 进入容器$ docker exec -it 容器id &#x2F;binn&#x2F;bash</code></pre></div><p>执行完上面的命令后，当前窗口会启动一个 busybox 容器并且进入容器中。在容器中，执行以下命令创建一个文件并写入内容：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">touch hello.txt &amp;&amp; echo &quot;I love Docker. &quot; &gt; hello.txt</code></pre></div><p>此时在容器的根目录下，已经创建了一个 hello.txt 文件，并写入了 “I love Docker. “。下面，我们新打开另一个命令行窗口，运行以下命令提交镜像：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ docker commit busybox busybox:hellosha256:cbc6406aaef080d1dd3087d4ea1e6c6c9915ee0ee0f5dd9e0a90b03e2215e81c</code></pre></div><p>然后使用上面讲到的docker image ls命令查看镜像：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">$ docker image ls busyboxREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEbusybox             hello               cbc6406aaef0        2 minutes ago       1.22MBbusybox             latest              018c9d7b792b        4 weeks ago         1.22MB</code></pre></div><p>此时我们可以看到主机上新生成了 busybox:hello 这个镜像。</p><p><strong>Docker build命令</strong></p><p>最常用的镜像构建方式：Dockerfile。Dockerfile 是一个包含了用户所有构建命令的文本。<strong>通过docker build命令可以从 Dockerfile 生成镜像。</strong></p><p>使用 Dockerfile 构建镜像具有以下特性：</p><ul><li><p>Dockerfile 的每一行命令都会生成一个独立的镜像层，并且拥有唯一的 ID；</p></li><li><p>Dockerfile 的命令是完全透明的，通过查看 Dockerfile 的内容，就可以知道镜像是如何一步步构建的；</p></li><li><p>Dockerfile 是纯文本的，方便跟随代码一起存放在代码仓库并做版本管理。</p></li></ul><p>先学习下 Dockerfile 常用的指令。</p><p>Dockerfile 指令    指令简介</p><ul><li>FROM    Dockerfile 除了注释第一行必须是 FROM ，FROM 后面跟镜像名称，代表我们要基于哪个基础镜像构建我们的容器。（ <strong>默认会先从本地去查找镜像</strong>）</li><li>RUN    RUN 后面跟一个具体的命令，类似于 Linux 命令行执行命令。</li><li>ADD    拷贝本机文件或者远程文件到镜像内</li><li>COPY    拷贝本机文件到镜像内</li><li>USER    指定容器启动的用户</li><li>ENTRYPOINT    容器的启动命令</li><li>CMD    CMD 为 ENTRYPOINT 指令提供默认参数，也可以单独使用 CMD 指定容器启动参数</li><li>ENV    指定容器运行时的环境变量，格式为 key=value</li><li>ARG    定义外部变量，构建镜像时可以使用 build-arg = 的格式传递参数用于构建</li><li>EXPOSE    指定容器监听的端口，格式为 [port]/tcp 或者 [port]/udp</li><li>WORKDIR    为 Dockerfile 中跟在其后的所有 RUN、CMD、ENTRYPOINT、COPY 和 ADD 命令设置工作目录。</li></ul><p>先分析下如下Dockerfile文件中的含义：</p><div class="code-wrapper"><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centos:7COPY nginx.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repoRUN yum install -y nginxEXPOSE 80ENV HOST&#x3D;mynginxCMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</code></pre></div><ul><li><p>第一行表示我要基于 centos:7 这个镜像来构建自定义镜像。这里需要注意，每个 Dockerfile 的第一行除了注释都必须以 FROM 开头。</p></li><li><p>第二行表示拷贝本地文件 nginx.repo 文件到容器内的 /etc/yum.repos.d 目录下。这里拷贝 nginx.repo 文件是为了添加 nginx 的安装源。</p></li><li><p>第三行表示在容器内运行yum install -y nginx命令，安装 nginx 服务到容器内，执行完第三行命令，容器内的 nginx 已经安装完成。</p></li><li><p>第四行声明容器内业务（nginx）使用 80 端口对外提供服务。</p></li><li><p>第五行定义容器启动时的环境变量 HOST=mynginx，容器启动后可以获取到环境变量 HOST 的值为 mynginx。</p></li><li><p>第六行定义容器的启动命令，命令格式为 json 数组。这里设置了容器的启动命令为 nginx ，并且添加了 nginx 的启动参数 -g ‘daemon off;’ ，使得 nginx 以前台的方式启动。</p></li></ul><p>上面这个 Dockerfile 的例子基本涵盖了常用的镜像构建指令。</p><h3 id="2-镜像的实现原理"><a href="#2-镜像的实现原理" class="headerlink" title="2. 镜像的实现原理"></a>2. 镜像的实现原理</h3><h4 id="2-1-Bootfs和Rootfs"><a href="#2-1-Bootfs和Rootfs" class="headerlink" title="2.1 Bootfs和Rootfs"></a>2.1 Bootfs和Rootfs</h4><p>先下拉ubuntu镜像和python:3镜像：</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">root@iZ2ze1lioikou185atzucgZ<span class="token punctuation">:</span><span class="token operator">~</span><span class="token comment"># docker pull ubuntu</span>Using default tag<span class="token punctuation">:</span> latestlatest<span class="token punctuation">:</span> Pulling <span class="token keyword">from</span> library<span class="token operator">/</span>ubuntu<span class="token number">54ee1f796a1e</span><span class="token punctuation">:</span> Pull complete f7bfea53ad12<span class="token punctuation">:</span> Pull complete <span class="token number">46d371e02073</span><span class="token punctuation">:</span> Pull complete b66c17bbf772<span class="token punctuation">:</span> Pull complete Digest<span class="token punctuation">:</span> sha256<span class="token punctuation">:</span><span class="token number">31dfb10d52ce76c5ca0aa19d10b3e6424b830729e32a89a7c6eee2cda2be67a5</span>Status<span class="token punctuation">:</span> Downloaded newer image <span class="token keyword">for</span> ubuntu<span class="token punctuation">:</span>latestdocker<span class="token punctuation">.</span>io<span class="token operator">/</span>library<span class="token operator">/</span>ubuntu<span class="token punctuation">:</span>latestroot@iZ2ze1lioikou185atzucgZ<span class="token punctuation">:</span><span class="token operator">~</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEpython              <span class="token number">3</span>                   <span class="token number">28a4c88cdbbf</span>        <span class="token number">15</span> hours ago        882MBubuntu              latest              <span class="token number">4e2eef94cd6b</span>        <span class="token number">3</span> weeks ago         <span class="token number">73.</span>9MB</code></pre></div><p>大家可能注意到上面命令输出的最后一列， 它显示 ubuntu 这个镜像才 73.9MB ！但是大家应该都知道，安装一个 ubuntu 系统怎么也不可能就几十兆，那么 Docker 是怎么做到的呢？</p><p>这是因为典型的 Linux 运行需要两个 FS: <strong>bootfs 和 rootfs</strong>，Linux 刚启动时会加载 bootfs 文件系统，之后 bootfs 会被卸载掉。对于不同的 Linux 发行版, bootfs 基本是一致的, 但 rootfs 会有差别，其包含我们熟悉的 /dev, /proc, /bin 等目录。对于 ubuntu 镜像来说，其底层直接使用 Host 的 <strong>kernel内核</strong>，自己只需要提供 rootfs 就行了。如下图所示：</p><p><img src="/img/images/3docker-bootfs-rootfs.png"></p><p>为了确定 ubuntu 镜像使用的是 Host 的Kernel内核，我们可以使用<strong>uname -a命令查看内核版本</strong>：</p><p><img src="/img/images/3docker-kernel.png"></p><p>说明如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">第一个组数字：4, 主版本号第二个组数字：15, 次版本号，当前为稳定版本第三个组数字：0, 修订版本号第四个组数字：111，当前内核版本（4.15.0）的第111次微调patchgeneric：当前内核版本为通用版本，另有表示不同含义的server（针对服务器）、i386（针对老式英特尔处理器）pae（Physical Address Extension）：物理地址扩展，为了弥补32位地址在PC服务器应用上的不足而推出，表示此32位系统可以支持超过4G的内存x86_64：采用的是64位的CPUSMP：对称多处理机，表示内核支持多核、多处理器Tue Jul 15 17:46:11 UTC 2014：内核的编译时间（build date）为 2014&#x2F;07&#x2F;15 17:46:11  </code></pre></div><p><strong>重点：</strong>如果我们在同一个 host 上下载不同 Linux 发行版镜像，如python:3和Ubuntu，可以从上图中发现其都是使用的公用 host 的 bootfs。抽象一下，如下图所示：</p><p><img src="/img/images/3docker-bootfs.png"></p><p>理解到bootfs和rootfs后，就可以解释什么是镜像分层了。</p><h4 id="2-1-镜像分层"><a href="#2-1-镜像分层" class="headerlink" title="2.1 镜像分层"></a>2.1 镜像分层</h4><p>​    每个镜像都是通过 DockerFile 文本文件定义的，Dockerfile 中的每条指令最终都会成为镜像中的 Layer。Layer 是按顺序构成的，<strong>最底层的 Layer 是基础镜像（base image），最上层是最终镜像（final image）</strong>。当一个镜像被更新或重新构建时，只有更新的层需要修改，其他没有更新的层可以直接复用本地缓存。这就是 Docker 镜像如此快速和轻量级的部分原因，每一层的大小加起来等于最终镜像的大小。</p><p>​    理解上面的设计之后，我们现在来解释最上面关于 Layer 这个概念。假设我们的 Dockerfile 定义如下：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">FROM debianRUN apt-get update &amp;&amp; apt-get -y -f install emacsRUN apt-get update &amp;&amp; apt-get -y -f install apache2</code></pre></div><p>上面一共有三条指令，如果编译这个 Dockerfile，其会生成三个镜像：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">[root@iteblog.com ~]$ docker build -t iteblog-docker .&#x2F;Sending build context to Docker daemon  2.048kBStep 1&#x2F;3: FROM debian---&gt; a8797652cfd9Step 2&#x2F;3: RUN apt-get update &amp;&amp; apt-get -y -f install emacs---&gt; Using cache---&gt; 4b2cc711d0f1Step 3&#x2F;3: RUN apt-get update &amp;&amp; apt-get -y -f installapache2---&gt; Using cache---&gt; 48ec647c89a1Successfully built 48ec647c89a1Successfully tagged iteblog-docker:latest</code></pre></div><p>如果用图片表示的话，这个过程如下：</p><p><img src="/img/images/3docker-%E9%95%9C%E5%83%8F%E5%88%86%E5%B1%82.png"></p><h3 id="3-容器层"><a href="#3-容器层" class="headerlink" title="3. 容器层"></a>3. 容器层</h3><p>​    如果多个镜像共用一个基础镜像，内存中也只需加载一份基础镜像，就可以为所有容器服务了。那么问题来了，如果我们需要修改基础镜像里面的东西咋办呢？Docker 很好的处理了这个问题，<strong>当容器启动时，一个新的可写层被加载到镜像的顶部，这一层通常被称作容器层（container layer），容器层之下的都叫镜像层（image layer）</strong>，所有的修改（比如删除文件、添加文件）都是在容器层进行的，如下图所示：</p><p><img src="/img/images/3docker-container1.png"></p><p>​    可以从图中看出Container layer容器可读层和Image layers镜像层。用户对容器中的添加、修改等数据都存放在container layer层，当容器被删除时，也只是container layer层被删除。底层的image layers镜像层是不动的。因此<strong>不同容器都有自己独有的容器层，所有的修改只会存在自己的容器层，也就是说不同容器之间的修改都互不影响，这也就使得不同容器可以共享一个镜像层</strong>，具体图解如下：</p><p><img src="/img/images/3docker-container2.png"></p><p><strong>重点：不同容器之间的修改是互不影响的，但是如果不同容器之间需要做数据传递，可以使用network进行网络通信。</strong></p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 架构</title>
    <link href="/2020/06/03/docker%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <url>/2020/06/03/docker%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>docker架构设计参考文章进行整理：地址为<a href="https://www.huweihuang.com/article/docker/docker-architecture/">https://www.huweihuang.com/article/docker/docker-architecture/</a></p><p>这一篇文章源于2015年出版的《docker源码分析》，书中以docker1.2.0版本进行分析。但是在docker1.11以后，docker的架构就在不断的优化和拆分。下面整理出了docker框架的变迁史，可以稍作参考。</p><h3 id="2-架构设计"><a href="#2-架构设计" class="headerlink" title="2. 架构设计"></a>2. 架构设计</h3><p><img src="/img/images/6.Docker%E6%9E%B6%E6%9E%84.png"></p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot的异步方法async调用与线程池配置</title>
    <link href="/2020/06/03/spring%20async/"/>
    <url>/2020/06/03/spring%20async/</url>
    
    <content type="html"><![CDATA[<h2 id="Springboot的异步方法调用与线程池配置"><a href="#Springboot的异步方法调用与线程池配置" class="headerlink" title="Springboot的异步方法调用与线程池配置"></a>Springboot的异步方法调用与线程池配置</h2><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ol><li>springboot 自带了scheduling 包里已经设置了异步方法,我们只需要在方法或者类上加入@Async 注解即可</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xkcoding<span class="token punctuation">.</span>async<span class="token punctuation">.</span>task</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token comment">/** * 将一个类声明为异步类，那么这个类对外暴露的方法全部成为异步方法。 * 与异步方法的区别是这里的注解是加到类上，异步方法的注解是加到方法上。仅此而已 * @DESC  * @author guchuang * */</span><span class="token annotation punctuation">@Async</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">AsyncClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-------------------------init AsyncClass--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"asyncclass foo, index:"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"asyncclass foo, index:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"asyncclass bar, index:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="2"><li>yml配置</li></ol><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">spring:  task:    execution:      pool:        # 最大线程数        max-size: 16        # 核心线程数        core-size: 16        # 存活时间        keep-alive: 10s        # 队列大小        queue-capacity: 100        # 是否允许核心线程超时        allow-core-thread-timeout: true      # 线程名称前缀      thread-name-prefix: async-task-</code></pre></div><ol start="3"><li>然后直接调用即可产生异步效果</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>       asyncClass<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       asyncClass<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       asyncClass<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><h3 id="ThreadFactory自定义配置"><a href="#ThreadFactory自定义配置" class="headerlink" title="ThreadFactory自定义配置"></a>ThreadFactory自定义配置</h3><ol><li>首先需创建一个类继承ThreadFactory,书写构造器</li><li>覆写他newThread 方法</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> poolNumber   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadGroup</span>          group<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span>        threadNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span>               namePrefix<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyThreadFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SecurityManager</span> s <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        group <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        namePrefix <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"-pool-"</span> <span class="token operator">+</span>            poolNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">"-thread-"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 覆写了newThread方法     * @param r     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> r<span class="token punctuation">,</span>            namePrefix <span class="token operator">+</span> threadNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            t<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="线程池异步配置"><a href="#线程池异步配置" class="headerlink" title="线程池异步配置"></a>线程池异步配置</h3><ol><li>添加注解@EnableAsync和@Configuration</li><li>实现AsyncConfigurer接口,如果不覆写AsyncConfigurer的话，这个方法暴露bean会被当做@Async的默认线程池。</li><li>ExecutorService配置</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool               <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadFactory</span><span class="token punctuation">(</span><span class="token string">"common1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><ul><li>定义默认调用线程执行器和异常处理机制</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 这个实例声明的TaskExecutor会成为@Async方法运行的默认线程执行器     *      * @Bean 使这个实例完全被spring接管     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">TaskExecutor</span> <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentTaskExecutor</span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadFactory</span><span class="token punctuation">(</span><span class="token string">"async"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 定义@Async方法默认的异常处理机制（只对void型异步返回方法有效，Future返回值类型的异常会抛给调用者）     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AsyncUncaughtExceptionHandler</span> <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> method<span class="token punctuation">,</span> objects<span class="token punctuation">)</span> <span class="token operator">-></span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Method:"</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">", exception:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><ul><li>自定义线程执行器配置</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 如果不覆写AsyncConfigurer的话，这个方法暴露bean会被当做@Async的默认线程池。     * 注意必须是这个方法名（也就是bean name， 或者显示指定bean name @Qualifier("taskExecutor")），返回类型可以是Executor或者TaskExecutor     * 如果没有配置的Executor，则默认使用SimpleAsyncTaskExecutor     * 备注： 这种方式声明的bean，方法名就是bean name     *      * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">taskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentTaskExecutor</span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadFactory</span><span class="token punctuation">(</span><span class="token string">"async0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 定义其它的TaskExecutor，声明@Async方法的时候可以指定TaskExecutor，达到切换底层的目的     *      * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TaskExecutor</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 线程数,线程名</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentTaskExecutor</span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadFactory</span><span class="token punctuation">(</span><span class="token string">"async1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 没有设置拒绝策略     *      * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"async2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">TaskExecutor</span> <span class="token function">myAsyncExecutor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentTaskExecutor</span><span class="token punctuation">(</span>threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h3 id="异常配置"><a href="#异常配置" class="headerlink" title="异常配置"></a>异常配置</h3><ul><li>线程满载后处理类</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xkcoding<span class="token punctuation">.</span>async<span class="token punctuation">.</span>task</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>xkcoding<span class="token punctuation">.</span>async<span class="token punctuation">.</span></span><span class="token class-name">MyLog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Log4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">RejectedExecutionHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">;</span><span class="token comment">/** * 线程池满之后的处理策略类 * @DESC  * @author guchuang * */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RejectedPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">RejectedPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 向线程池中添加线程被拒绝时会调用这个方法。一般拒绝是因为线程池满了     *     * @param r 被拒绝的任务     * @param e 拒绝这个任务的线程池     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"one thread is rejected, i will deal it"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>获取返回值</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"\n-----------------start-----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result1 <span class="token operator">=</span> asyncMethod<span class="token punctuation">.</span><span class="token function">futureTask1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result2 <span class="token operator">=</span> asyncMethod<span class="token punctuation">.</span><span class="token function">futureTask2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取返回值</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"result1:"</span> <span class="token operator">+</span> result1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"result2:"</span> <span class="token operator">+</span> result2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><ol start="2"><li>无返回值方法可直接抛出异常,有返回值方法方法需要通过get方法获取异常</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> asyncMethod<span class="token punctuation">.</span><span class="token function">futureE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//这里调用get才会获得异常</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//e.printStackTrace();</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"this is excepted Exception:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 直接抛出异常</span>      asyncMethod<span class="token punctuation">.</span><span class="token function">fooE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"end call e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//log.sleep(1000);</span>  <span class="token punctuation">&#125;</span></code></pre></div><ol start="3"><li>当超过线程词最大容量的时候，会抛出TaskRejectedException</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRejectWithDeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"\n-----------------start testRejectWithDeal-----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start add task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               asyncMethod<span class="token punctuation">.</span><span class="token function">asyncSleep3</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">RejectedExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"excepted exception:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"finished add task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>async</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 容器</title>
    <link href="/2020/06/03/Docker%E5%AE%B9%E5%99%A8%E3%80%81%E9%95%9C%E5%83%8F%E3%80%81%E4%BB%93%E5%BA%93/"/>
    <url>/2020/06/03/Docker%E5%AE%B9%E5%99%A8%E3%80%81%E9%95%9C%E5%83%8F%E3%80%81%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>Docker 的操作围绕镜像、容器、仓库三大核心概念。在学架构设计之前，我们需要先了解 Docker 的三个核心概念。</p><h3 id="1-Docker-核心概念"><a href="#1-Docker-核心概念" class="headerlink" title="1. Docker 核心概念"></a>1. Docker 核心概念</h3><h4 id="1-1-镜像"><a href="#1-1-镜像" class="headerlink" title="1.1 镜像"></a>1.1 镜像</h4><p>镜像是什么呢？通俗地讲，它是一个只读的文件和文件夹组合。它包含了容器运行时所需要的所有基础文件和配置信息，是容器启动的基础。所以你想启动一个容器，那首先必须要有一个镜像。<strong>镜像是 Docker 容器启动的先决条件。</strong></p><p>如果你想要使用一个镜像，你可以用这两种方式：</p><ol><li>自己创建镜像。通常情况下，一个镜像是基于一个基础镜像构建的，你可以在基础镜像上添加一些用户自定义的内容。例如你可以基于<code>centos</code>镜像制作你自己的业务镜像，首先安装<code>nginx</code>服务，然后部署你的应用程序，最后做一些自定义配置，这样一个业务镜像就做好了。</li><li>从功能镜像仓库拉取别人制作好的镜像。一些常用的软件或者系统都会有官方已经制作好的镜像，例如<code>nginx</code>、<code>ubuntu</code>、<code>centos</code>、<code>mysql</code>等，你可以到 <a href="https://hub.docker.com/">Docker Hub</a> 搜索并下载它们。</li></ol><h4 id="1-2-容器"><a href="#1-2-容器" class="headerlink" title="1.2 容器"></a>1.2 容器</h4><p>容器是什么呢？容器是 Docker 的另一个核心概念。通俗地讲，容器是镜像的运行实体。镜像是静态的只读文件，而容器带有运行时需要的可写文件层，并且容器中的进程属于运行状态。即<strong>容器运行着真正的应用进程。容器有初建、运行、停止、暂停和删除五种状态。</strong></p><p>虽然容器的本质是主机上运行的一个进程，但是容器有自己独立的命名空间隔离和资源限制。也就是说，在容器内部，无法看到主机上的进程、环境变量、网络等信息，这是容器与直接运行在主机上进程的本质区别。</p><h4 id="1-3-仓库"><a href="#1-3-仓库" class="headerlink" title="1.3 仓库"></a>1.3 仓库</h4><p>Docker 的镜像仓库类似于代码仓库，用来存储和分发 Docker 镜像。镜像仓库分为公共镜像仓库和私有镜像仓库。</p><p>目前，<a href="https://hub.docker.com/">Docker Hub</a> 是 Docker 官方的公开镜像仓库，它不仅有很多应用或者操作系统的官方镜像，还有很多组织或者个人开发的镜像供我们免费存放、下载、研究和使用。除了公开镜像仓库，你也可以构建自己的私有镜像仓库，在第 5 课时，我会带你搭建一个私有的镜像仓库。</p><h4 id="1-4-镜像、容器、仓库，三者之间的联系"><a href="#1-4-镜像、容器、仓库，三者之间的联系" class="headerlink" title="1.4 镜像、容器、仓库，三者之间的联系"></a>1.4 镜像、容器、仓库，三者之间的联系</h4><p><img src="/img/images/2docker%E5%AE%B9%E5%99%A8%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="Drawing 1.png"></p><p>可以看到，镜像是容器的基石，容器是由镜像创建的。一个镜像可以创建多个容器，容器是镜像运行的实体。仓库就非常好理解了，就是用来存放和分发镜像的。</p><p>了解了 Docker 的三大核心概念，接下来认识下 Docker 的核心架构和一些重要的组件。</p><h1 id="2-Docker-架构"><a href="#2-Docker-架构" class="headerlink" title="2. Docker 架构"></a>2. Docker 架构</h1><p>在了解 Docker 架构前，我先说下相关的背景知识——容器的发展史。</p><p>容器技术随着 Docker 的出现变得炙手可热，所有公司都在积极拥抱容器技术。此时市场上除了有 Docker 容器，还有很多其他的容器技术，比如 CoreOS 的 rkt、lxc 等。容器技术百花齐放是好事，但也出现了很多问题。比如容器技术的标准到底是什么？容器标准应该由谁来制定？</p><p>也许你可能会说， Docker 已经成为了事实标准，把 Docker 作为容器技术的标准不就好了？事实并没有想象的那么简单。因为那时候不仅有容器标准之争，编排技术之争也十分激烈。当时的编排技术有三大主力，<strong>分别是 Docker Swarm、Kubernetes 和 Mesos</strong> 。Swarm 毋庸置疑，肯定愿意把 Docker 作为唯一的容器运行时，但是 Kubernetes 和 Mesos 就不同意了，因为它们不希望调度的形式过度单一。</p><p>在这样的背景下，最终爆发了容器大战，<code>OCI</code>也正是在这样的背景下应运而生。</p><p><strong><code>OCI</code>全称为开放容器标准（Open Container Initiative）</strong>，它是一个轻量级，开放的治理结构。<code>OCI</code>组织在 Linux 基金会的大力支持下，于 2015 年 6 月份正式注册成立。基金会旨在为用户围绕工业化容器的格式和镜像运行时，制定一个开放的容器标准。目前主要有两个标准文档：<strong>容器运行时标准 （runtime spec）和容器镜像标准（image spec）</strong>。</p><p>正是由于容器的战争，才导致 Docker 不得不在战争中改变一些技术架构。最终形成了下图所示的技术架构。</p><p><img src="/img/images/2docker-%E6%9E%B6%E6%9E%84%E5%9B%BE.png"></p><p>​                                         Docker 架构图</p><p>​    我们可以看到，Docker 整体架构采用 <strong>C/S（客户端 / 服务器）模式</strong>，主要由客户端和服务端两大部分组成。客户端负责发送操作指令，服务端负责接收和处理指令。客户端和服务端通信有多种方式，即可以在同一台机器上通过<code>UNIX</code>套接字通信，也可以通过网络连接远程通信。</p><p>下面我逐一介绍客户端和服务端。</p><h4 id="2-1-Docker-客户端"><a href="#2-1-Docker-客户端" class="headerlink" title="2.1 Docker 客户端"></a>2.1 Docker 客户端</h4><p>​    Docker 客户端其实是一种泛称。其中 <strong>docker 命令是 Docker 用户与 Docker 服务端交互的主要方式</strong>。除了使用 docker 命令的方式，还可以使用<strong>直接请求 REST API 的方式与 Docker 服务端交互</strong>，甚至还可以使用各种语言的 SDK 与 Docker 服务端交互。目前社区维护着 Go、Java、Python、PHP 等数十种语言的 SDK，足以满足你的日常需求。如<strong>Python中的docker-py库</strong>。</p><h4 id="2-2-Docker-服务端"><a href="#2-2-Docker-服务端" class="headerlink" title="2.2 Docker 服务端"></a>2.2 Docker 服务端</h4><p>​    Docker 服务端是 Docker 所有后台服务的统称。其中 <strong>dockerd 是一个非常重要的后台管理进程</strong>，默认的配置文件为/etc/docker/daemon.json。它负责响应和处理来自 Docker 客户端的请求，然后<strong>将客户端的请求转化为 Docker 的具体操作</strong>。例如镜像、容器、网络和挂载卷等具体对象的操作和管理。</p><p>​    Docker 从诞生到现在，服务端经历了多次架构重构。起初，服务端的组件是全部集成在 docker 二进制里。但是从 1.11 版本开始， dockerd 已经成了独立的二进制，此时的容器也不是直接由 dockerd 来启动了，而是集成了 containerd、runC 等多个组件。</p><p>​    虽然 Docker 的架构在不停重构，但是各个模块的基本功能和定位并没有变化。它和一般的 C/S 架构系统一样，Docker 服务端模块负责和 Docker 客户端交互，并管理 Docker 的容器、镜像、网络等资源。</p><h4 id="2-3-Docker-重要组件"><a href="#2-3-Docker-重要组件" class="headerlink" title="2.3 Docker 重要组件"></a>2.3 Docker 重要组件</h4><p>看下 Docker 都有哪些工具和组件。在 Docker 安装路径下**/usr/bin** 中执行 ls 命令可以看到以下与 docker 有关的二进制文件。（containerd、containerd-shim、ctr、docker、docker-init、docker-proxy、dockerd、runc）</p><p><img src="/img/images/2docker-%E7%BB%84%E4%BB%B6.png"></p><p>先简单介绍一下 Docker 的两个至关重要的组件：<code>runc</code>和<code>containerd</code>。</p><ul><li><code>runc</code>是 Docker 官方按照 OCI 容器运行时标准的一个实现。通俗地讲，runc是一个用来运行容器的轻量级工具，是真正用来运行容器的。</li><li><code>containerd</code>是 Docker 服务端的一个核心组件，它是从<code>dockerd</code>中剥离出来的 ，它的诞生完全遵循 OCI 标准，是容器标准化后的产物。<code>containerd</code>通过 containerd-shim 启动并管理 runc，<strong>可以说<code>containerd</code>真正管理了容器的生命周期。</strong></li></ul><h5 id="首先谈谈dockerd-containerd-docker-shim-runc，每个组件是用来干嘛的"><a href="#首先谈谈dockerd-containerd-docker-shim-runc，每个组件是用来干嘛的" class="headerlink" title="首先谈谈dockerd,containerd,docker-shim,runc，每个组件是用来干嘛的"></a><strong>首先谈谈dockerd,containerd,docker-shim,runc，每个组件是用来干嘛的</strong></h5><p><strong>2.3.1）dockerd</strong><br>​    dockerd本身实属是对容器相关操作的api的最上层封装，直接面向操作用户。</p><p><strong>2.3.2）containerd</strong><br>​    dockerd实际真实调用的还是containerd的api接口（rpc方式实现），containerd是dockerd和runc之间的一个中间交流组件。</p><p><strong>2.3.3）containerd-shim</strong><br>​    containerd-shim是一个真实<strong>运行的容器的真实垫片载体</strong>，每启动一个容器都会起一个新的containerd-shim的一个进程，他直接通过指定的三个参数：容器id，boundle目录（containerd的对应某个容器生成的目录，一般位于：/var/run/docker/libcontainerd/containerID），运行是二进制（默认为runc）来调用runc的api创建一个容器（比如创建容器：最后拼装的命令如下：runc create）</p><p><strong>2.3.4）runc</strong><br>​    runc是一个命令行工具端，他根据<code>OCI</code>（开放容器组织）的标准来创建和运行容器。</p><h3 id="3-Docker-各组件之间的关系"><a href="#3-Docker-各组件之间的关系" class="headerlink" title="3. Docker 各组件之间的关系"></a>3. Docker 各组件之间的关系</h3><p>首先通过以下命令来启动一个 busybox 容器：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker run -d busybox sleep 3600</code></pre></div><p>为了验证Docker 各组件之间的调用关系，下面使用 pstree 命令查看一下进程父子关系：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">systemd(1)─┬─Xvfb(17214)─┬─&#123;llvmpipe-0&#125;(18510)           │             ├─&#123;llvmpipe-1&#125;(18511)           │             ├─&#123;llvmpipe-2&#125;(18512)           │             └─&#123;llvmpipe-3&#125;(18513)           ├─accounts-daemon(1327)─┬─&#123;gdbus&#125;(1495)           │                       └─&#123;gmain&#125;(1492)           ├─acpid(1203)           ├─agetty(23750)           ├─atd(1223,daemon)           ├─containerd(22211)─┬─containerd-shim(8473)─┬─sleep(8491)           │                   │                       ├─&#123;containerd-shim&#125;(8474)           │                   │                       ├─&#123;containerd-shim&#125;(8475)           │                   │                       ├─&#123;containerd-shim&#125;(8476)           │                   │                       ├─&#123;containerd-shim&#125;(8477)           │                   │                       ├─&#123;containerd-shim&#125;(8478)           │                   │                       ├─&#123;containerd-shim&#125;(8479)           │                   │                       ├─&#123;containerd-shim&#125;(8480)           │                   │                       └─&#123;containerd-shim&#125;(8482)           │                   ├─&#123;containerd&#125;(22216)           │                   ├─&#123;containerd&#125;(22217)           │                   ├─&#123;containerd&#125;(22218)           │                   ├─&#123;containerd&#125;(22219)           │                   ├─&#123;containerd&#125;(22220)           │                   ├─&#123;containerd&#125;(22227)           │                   ├─&#123;containerd&#125;(22228)           │                   ├─&#123;containerd&#125;(22229)           │                   ├─&#123;containerd&#125;(22231)           │                   ├─&#123;containerd&#125;(22232)           │                   ├─&#123;containerd&#125;(22233)           │                   ├─&#123;containerd&#125;(22234)           │                   ├─&#123;containerd&#125;(22369)           │                   ├─&#123;containerd&#125;(22375)           │                   ├─&#123;containerd&#125;(23023)           │                   ├─&#123;containerd&#125;(24119)           │                   ├─&#123;containerd&#125;(31016)           │                   ├─&#123;containerd&#125;(32704)           │                   ├─&#123;containerd&#125;(7339)           │                   ├─&#123;containerd&#125;(23491)           │                   ├─&#123;containerd&#125;(23596)           │                   ├─&#123;containerd&#125;(23889)           │                   ├─&#123;containerd&#125;(23894)           │                   ├─&#123;containerd&#125;(24535)           │                   ├─&#123;containerd&#125;(31378)           │                   ├─&#123;containerd&#125;(32403)           │                   ├─&#123;containerd&#125;(32404)           │                   ├─&#123;containerd&#125;(15398)           │                   ├─&#123;containerd&#125;(15399)           │                   ├─&#123;containerd&#125;(15805)           │                   └─&#123;containerd&#125;(16319)           ├─cron(20629)           ├─dbus-daemon(1227,messagebus)           ├─dhclient(1023)           ├─dockerd(6901)─┬─&#123;dockerd&#125;(6903)           │               ├─&#123;dockerd&#125;(6904)           │               ├─&#123;dockerd&#125;(6905)           │               ├─&#123;dockerd&#125;(6906)           │               ├─&#123;dockerd&#125;(6907)           │               ├─&#123;dockerd&#125;(6908)           │               ├─&#123;dockerd&#125;(6909)           │               ├─&#123;dockerd&#125;(6910)           │               ├─&#123;dockerd&#125;(6912)           │               ├─&#123;dockerd&#125;(6913)           │               ├─&#123;dockerd&#125;(6914)           │               └─&#123;dockerd&#125;(6915)           ├─irqbalance(1468)           ├─iscsid(1140)           ├─iscsid(1141)           ├─lvmetad(479)           ├─lxcfs(1215)─┬─&#123;lxcfs&#125;(1337)           │             ├─&#123;lxcfs&#125;(1340)           │             ├─&#123;lxcfs&#125;(9044)           │             ├─&#123;lxcfs&#125;(23720)           │             └─&#123;lxcfs&#125;(9313)           ├─mdadm(1453)           ├─mysqld(31859,mysql)─┬─&#123;mysqld&#125;(31871)           │                     ├─&#123;mysqld&#125;(31872)           │                     ├─&#123;mysqld&#125;(31873)           │                     ├─&#123;mysqld&#125;(31874)           │                     ├─&#123;mysqld&#125;(31875)           │                     ├─&#123;mysqld&#125;(31876)           │                     ├─&#123;mysqld&#125;(31877)           │                     ├─&#123;mysqld&#125;(31878)           │                     ├─&#123;mysqld&#125;(31879)           │                     ├─&#123;mysqld&#125;(31880)           │                     ├─&#123;mysqld&#125;(31881)           │                     ├─&#123;mysqld&#125;(31882)           │                     ├─&#123;mysqld&#125;(31884)           │                     ├─&#123;mysqld&#125;(31885)           │                     ├─&#123;mysqld&#125;(31886)           │                     ├─&#123;mysqld&#125;(31887)           │                     ├─&#123;mysqld&#125;(31888)           │                     ├─&#123;mysqld&#125;(31889)           │                     ├─&#123;mysqld&#125;(31890)           │                     ├─&#123;mysqld&#125;(31891)           │                     ├─&#123;mysqld&#125;(31892)           │                     ├─&#123;mysqld&#125;(31893)           │                     ├─&#123;mysqld&#125;(31894)           │                     ├─&#123;mysqld&#125;(31895)           │                     ├─&#123;mysqld&#125;(31896)           │                     ├─&#123;mysqld&#125;(31897)           │                     ├─&#123;mysqld&#125;(30641)           │                     ├─&#123;mysqld&#125;(15274)           │                     ├─&#123;mysqld&#125;(10442)           │                     ├─&#123;mysqld&#125;(26016)           │                     ├─&#123;mysqld&#125;(10137)           │                     ├─&#123;mysqld&#125;(1973)           │                     ├─&#123;mysqld&#125;(23981)           │                     └─&#123;mysqld&#125;(18314)           ├─nginx(10152)─┬─nginx(10153,www-data)           │              ├─nginx(10154,www-data)           │              ├─nginx(10155,www-data)           │              └─nginx(10156,www-data)           ├─polkitd(1512)─┬─&#123;gdbus&#125;(1516)           │               └─&#123;gmain&#125;(1514)           ├─python(1190)           ├─rsyslogd(1212,syslog)─┬─&#123;in:imklog&#125;(1440)           │                       ├─&#123;in:imuxsock&#125;(1439)           │                       └─&#123;rs:main Q:Reg&#125;(1441)           ├─sshd(1499)───sshd(4622)─┬─bash(4678)─┬─pstree(8779)           │                         │            └─systemctl(7769)───pager(7774)           │                         ├─bash(8773)───sleep(8778)           │                         └─sftp-server(4693)           ├─supervisord(29467)           ├─supervisord(29644)           ├─systemd(1700)───(sd-pam)(1704)           ├─systemd-journal(424)           ├─systemd-logind(1193)           ├─systemd-timesyn(544,systemd-timesync)───&#123;sd-resolve&#125;(559)           ├─systemd-udevd(501)           ├─top(19260)           ├─top(19447)           ├─uwsgi(10063)───uwsgi(10077)           └─wrapper(1490)─┬─java(1559)─┬─&#123;java&#125;(1567)                           │            ├─&#123;java&#125;(1570)                           │            ├─&#123;java&#125;(1572)                           │            ├─&#123;java&#125;(1574)                           │            ├─&#123;java&#125;(1576)                           │            ├─&#123;java&#125;(1584)                           │            ├─&#123;java&#125;(1586)                           │            ├─&#123;java&#125;(1589)                           │            ├─&#123;java&#125;(1603)                           │            ├─&#123;java&#125;(1605)                           │            ├─&#123;java&#125;(1607)                           │            ├─&#123;java&#125;(1610)                           │            ├─&#123;java&#125;(1612)                           │            ├─&#123;java&#125;(1614)                           │            ├─&#123;java&#125;(1628)                           │            ├─&#123;java&#125;(1651)                           │            └─&#123;java&#125;(1655)                           └─&#123;wrapper&#125;(1493)</code></pre></div><p>可以分别发现有两个进行，分别是：<code>dockerd</code>与<code>containerd</code>。而<code>dockerd</code>通过 gRPC 与<code>containerd</code>通信。当执行 <strong>docker run 命令</strong>（通过 busybox 镜像创建并启动容器）时，containerd 会创建 containerd-shim 充当 “垫片” 进程（进程PID为8473），然后启动容器的真正进程 sleep 3600 。这个过程和架构图是完全一致的。</p><p>再次创建一个容器，再来观察containerd进程的情况，下面先执行容器的创建：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker run -d busybox sleep 3600</code></pre></div><p>下面使用 pstree 命令查看一下进程父子关系：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">systemd(1)─┬─Xvfb(17214)─┬─&#123;llvmpipe-0&#125;(18510)           │             ├─&#123;llvmpipe-1&#125;(18511)           │             ├─&#123;llvmpipe-2&#125;(18512)           │             └─&#123;llvmpipe-3&#125;(18513)           ├─accounts-daemon(1327)─┬─&#123;gdbus&#125;(1495)           │                       └─&#123;gmain&#125;(1492)           ├─acpid(1203)           ├─agetty(23750)           ├─atd(1223,daemon)           ├─containerd(22211)─┬─containerd-shim(8473)─┬─sleep(8491)           │                   │                       ├─&#123;containerd-shim&#125;(8474)           │                   │                       ├─&#123;containerd-shim&#125;(8475)           │                   │                       ├─&#123;containerd-shim&#125;(8476)           │                   │                       ├─&#123;containerd-shim&#125;(8477)           │                   │                       ├─&#123;containerd-shim&#125;(8478)           │                   │                       ├─&#123;containerd-shim&#125;(8479)           │                   │                       ├─&#123;containerd-shim&#125;(8480)           │                   │                       ├─&#123;containerd-shim&#125;(8482)           │                   │                       └─&#123;containerd-shim&#125;(8820)           │                   ├─containerd-shim(9297)─┬─sleep(9316)           │                   │                       ├─&#123;containerd-shim&#125;(9298)           │                   │                       ├─&#123;containerd-shim&#125;(9299)           │                   │                       ├─&#123;containerd-shim&#125;(9300)           │                   │                       ├─&#123;containerd-shim&#125;(9301)           │                   │                       ├─&#123;containerd-shim&#125;(9302)           │                   │                       ├─&#123;containerd-shim&#125;(9303)           │                   │                       ├─&#123;containerd-shim&#125;(9304)           │                   │                       ├─&#123;containerd-shim&#125;(9306)           │                   │                       └─&#123;containerd-shim&#125;(9343)           │                   ├─&#123;containerd&#125;(22216)           │                   ├─&#123;containerd&#125;(22217)           │                   ├─&#123;containerd&#125;(22218)           │                   ├─&#123;containerd&#125;(22219)           │                   ├─&#123;containerd&#125;(22220)           │                   ├─&#123;containerd&#125;(22227)           │                   ├─&#123;containerd&#125;(22228)           │                   ├─&#123;containerd&#125;(22229)           │                   ├─&#123;containerd&#125;(22231)           │                   ├─&#123;containerd&#125;(22232)           │                   ├─&#123;containerd&#125;(22233)           │                   ├─&#123;containerd&#125;(22234)           │                   ├─&#123;containerd&#125;(22369)           │                   ├─&#123;containerd&#125;(22375)           │                   ├─&#123;containerd&#125;(23023)           │                   ├─&#123;containerd&#125;(24119)           │                   ├─&#123;containerd&#125;(31016)           │                   ├─&#123;containerd&#125;(32704)           │                   ├─&#123;containerd&#125;(7339)           │                   ├─&#123;containerd&#125;(23491)           │                   ├─&#123;containerd&#125;(23596)           │                   ├─&#123;containerd&#125;(23889)           │                   ├─&#123;containerd&#125;(23894)           │                   ├─&#123;containerd&#125;(24535)           │                   ├─&#123;containerd&#125;(31378)           │                   ├─&#123;containerd&#125;(32403)           │                   ├─&#123;containerd&#125;(32404)           │                   ├─&#123;containerd&#125;(15398)           │                   ├─&#123;containerd&#125;(15399)           │                   ├─&#123;containerd&#125;(15805)           │                   └─&#123;containerd&#125;(16319)           ├─cron(20629)           ├─dbus-daemon(1227,messagebus)           ├─dhclient(1023)           ├─dockerd(6901)─┬─&#123;dockerd&#125;(6903)           │               ├─&#123;dockerd&#125;(6904)           │               ├─&#123;dockerd&#125;(6905)           │               ├─&#123;dockerd&#125;(6906)           │               ├─&#123;dockerd&#125;(6907)           │               ├─&#123;dockerd&#125;(6908)           │               ├─&#123;dockerd&#125;(6909)           │               ├─&#123;dockerd&#125;(6910)           │               ├─&#123;dockerd&#125;(6912)           │               ├─&#123;dockerd&#125;(6913)           │               ├─&#123;dockerd&#125;(6914)           │               └─&#123;dockerd&#125;(6915)           ├─irqbalance(1468)           ├─iscsid(1140)           ├─iscsid(1141)           ├─lvmetad(479)           ├─lxcfs(1215)─┬─&#123;lxcfs&#125;(1337)           │             ├─&#123;lxcfs&#125;(1340)           │             ├─&#123;lxcfs&#125;(9044)           │             ├─&#123;lxcfs&#125;(23720)           │             └─&#123;lxcfs&#125;(9313)           ├─mdadm(1453)           ├─mysqld(31859,mysql)─┬─&#123;mysqld&#125;(31871)           │                     ├─&#123;mysqld&#125;(31872)           │                     ├─&#123;mysqld&#125;(31873)           │                     ├─&#123;mysqld&#125;(31874)           │                     ├─&#123;mysqld&#125;(31875)           │                     ├─&#123;mysqld&#125;(31876)           │                     ├─&#123;mysqld&#125;(31877)           │                     ├─&#123;mysqld&#125;(31878)           │                     ├─&#123;mysqld&#125;(31879)           │                     ├─&#123;mysqld&#125;(31880)           │                     ├─&#123;mysqld&#125;(31881)           │                     ├─&#123;mysqld&#125;(31882)           │                     ├─&#123;mysqld&#125;(31884)           │                     ├─&#123;mysqld&#125;(31885)           │                     ├─&#123;mysqld&#125;(31886)           │                     ├─&#123;mysqld&#125;(31887)           │                     ├─&#123;mysqld&#125;(31888)           │                     ├─&#123;mysqld&#125;(31889)           │                     ├─&#123;mysqld&#125;(31890)           │                     ├─&#123;mysqld&#125;(31891)           │                     ├─&#123;mysqld&#125;(31892)           │                     ├─&#123;mysqld&#125;(31893)           │                     ├─&#123;mysqld&#125;(31894)           │                     ├─&#123;mysqld&#125;(31895)           │                     ├─&#123;mysqld&#125;(31896)           │                     ├─&#123;mysqld&#125;(31897)           │                     ├─&#123;mysqld&#125;(30641)           │                     ├─&#123;mysqld&#125;(15274)           │                     ├─&#123;mysqld&#125;(10442)           │                     ├─&#123;mysqld&#125;(26016)           │                     ├─&#123;mysqld&#125;(10137)           │                     ├─&#123;mysqld&#125;(1973)           │                     ├─&#123;mysqld&#125;(23981)           │                     └─&#123;mysqld&#125;(18314)           ├─nginx(10152)─┬─nginx(10153,www-data)           │              ├─nginx(10154,www-data)           │              ├─nginx(10155,www-data) </code></pre></div><p>不难发现，当执行 <strong>docker run 命令</strong>时，containerd 会创建 containerd-shim 充当 “垫片” 进程（进程PID为9297），然后启动容器的真正进程 sleep 3600 。</p><p>在当前的宿主机器上，可能就存在由上述的不同进程构成的进程树，如下图所示：</p><p><img src="/img/images/2docker-%E8%BF%9B%E7%A8%8B%E6%95%B0%E6%9C%BA%E6%9E%841.png"></p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis与springboot整合</title>
    <link href="/2020/06/02/redis-spring/"/>
    <url>/2020/06/02/redis-spring/</url>
    
    <content type="html"><![CDATA[<h2 id="redis与springboot整合"><a href="#redis与springboot整合" class="headerlink" title="redis与springboot整合"></a>redis与springboot整合</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 对象池，使用redis时必须引入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h3 id="yml-配置"><a href="#yml-配置" class="headerlink" title="yml 配置"></a>yml 配置</h3><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">spring:  redis:    host: xxx    # 连接超时时间（记得添加单位，Duration）    timeout: 10000ms    # Redis默认情况下有16个分片，这里配置具体使用的分片    # database: 0    lettuce:      pool:        # 连接池最大连接数（使用负值表示没有限制） 默认 8        max-active: 8        # 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1        max-wait: -1ms        # 连接池中的最大空闲连接 默认 8        max-idle: 8        # 连接池中的最小空闲连接 默认 0        min-idle: 0  cache:    # 一般来说是不用配置的，Spring Cache 会根据依赖的包自行装配    type: redislogging:  level:    com.xkcoding: debug</code></pre></div><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">RedisAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 默认情况下的模板只能支持RedisTemplate&lt;String, String>，也就是只能存入字符串，因此支持序列化     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span class="token punctuation">></span></span> <span class="token function">redisCacheTemplate</span><span class="token punctuation">(</span><span class="token class-name">LettuceConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Strig ,Object     * @param redisConnectionFactory     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisCacheTemplate2</span><span class="token punctuation">(</span><span class="token class-name">LettuceConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 配置使用注解的时候缓存配置，默认是序列化反序列化的形式，加上此配置则为 json 形式     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 配置序列化</span>        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisCacheConfiguration</span> redisCacheConfiguration <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>redisCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>使用Spring 自动注入</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认模板</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span><span class="token comment">// 自定义模板</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span class="token punctuation">></span></span> redisCacheTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span></code></pre></div><h2 id="Api使用"><a href="#Api使用" class="headerlink" title="Api使用"></a>Api使用</h2><h3 id="通用操作工具"><a href="#通用操作工具" class="headerlink" title="通用操作工具"></a>通用操作工具</h3><ol><li>常用的分布式锁加强版</li></ol><div class="code-wrapper"><pre class="language-Java" data-language="Java"><code class="language-Java">    &#x2F;**     * 最终加强分布式锁     * @param key key值     * @return 是否获取到     *&#x2F;public boolean lock(String key) &#123;        String lock &#x3D; LOCK_PREFIX + key;        &#x2F;&#x2F; 利用lambda表达式        return (Boolean) redisTemplate.execute(new RedisCallback&lt;Object&gt;() &#123;            @Override            public Object doInRedis(RedisConnection redisConnection) throws DataAccessException &#123;                long expireAt &#x3D; System.currentTimeMillis() + LOCK_EXPIRE + 1;                Boolean acquire &#x3D; redisConnection.setNX(lock.getBytes(), String.valueOf(expireAt).getBytes());                if (acquire) &#123;                    return true;                &#125; else &#123;                    byte[] value &#x3D; redisConnection.get(lock.getBytes());                    if (Objects.nonNull(value) &amp;&amp; value.length &gt; 0) &#123;                        long expireTime &#x3D; Long.parseLong(new String(value));                        if (expireTime &lt; System.currentTimeMillis()) &#123;                            &#x2F;&#x2F; 如果锁已经过期                            byte[] oldValue &#x3D; redisConnection.getSet(lock.getBytes(), String.valueOf(System.currentTimeMillis() + LOCK_EXPIRE + 1).getBytes());                            &#x2F;&#x2F; 防止死锁                            return Long.parseLong(new String(oldValue)) &lt; System.currentTimeMillis();                        &#125;                    &#125;                &#125;                return false;            &#125;        &#125;);    &#125;</code></pre></div><ol start="2"><li> 删除锁</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 删除锁 * * @param key */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="3"><li>指定缓存失效时间</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 指定缓存失效时间 * @param key 键 * @param time 时间(秒) * @return */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="4"><li>根据key 获取过期时间</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据key 获取过期时间 * @param key 键 不能为null * @return 时间(秒) 返回0代表为永久有效 */</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="5"><li>判断key是否存在</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 判断key是否存在 * @param key 键 * @return true 存在 false不存在 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="6"><li>删除缓存</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 删除缓存 * @param key 可以传一个值 或多个 */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>key<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="String类型相关操作"><a href="#String类型相关操作" class="headerlink" title="String类型相关操作"></a>String类型相关操作</h3><ol><li>获取缓存</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取缓存 * @param key 键 * @return 值 */</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> key<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span><span class="token keyword">null</span><span class="token operator">:</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="2"><li>获取缓存</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 获取缓存 * @param key 键 * @return 值 */</span>public Object <span class="token keyword">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> key<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span><span class="token keyword">null</span><span class="token punctuation">:</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="3"><li>添加缓存</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 添加缓存 * @param key 键 * @param value 值 * @return true成功 false失败 */</span>public boolean <span class="token keyword">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="4"><li>添加缓存并设置过期时间</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 添加缓存并设置过期时间 * @param key 键 * @param value 值 * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期 * @return true成功 false 失败 */</span>public boolean <span class="token keyword">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">,</span>long time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="5"><li>递增操作</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 递增 * @param key 键 * @return */</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>delta<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="6"><li>递减操作</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 递减 * @param key 键 * @return */</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>delta<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="哈希类型相关操作"><a href="#哈希类型相关操作" class="headerlink" title="哈希类型相关操作"></a>哈希类型相关操作</h3><ol><li>设置一组Map的键值对</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * HashGet * @param key 键 不能为null * @param item 项 不能为null * @return 值 */</span>public Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>String item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="2"><li>获取指定Map的所有键值对</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 获取hashKey对应的所有键值 * @param key 键 * @return 对应的多个键值 */</span>public Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">hmget</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="3"><li>添加一个Map类型值</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * HashSet * @param key 键 * @param map 对应多个键值 * @return true 成功 false 失败 */</span>public boolean <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="4"><li>添加一个Map类型值并设置过期时间</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * HashSet 并设置时间 * @param key 键 * @param map 对应多个键值 * @param time 时间(秒) * @return true成功 false失败 */</span>public boolean <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">,</span> long time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="5"><li>向一张hash表中放入数据,如果不存在将创建</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 向一张hash表中放入数据,如果不存在将创建 * @param key 键 * @param item 项 * @param value 值 * @return true 成功 false失败 */</span>public boolean <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>String item<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="6"><li>向一张hash表中放入数据,如果不存在将创建并设置过期时间</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 向一张hash表中放入数据,如果不存在将创建 * @param key 键 * @param item 项 * @param value 值 * @param time 时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间 * @return true 成功 false失败 */</span>public boolean <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>String item<span class="token punctuation">,</span>Object value<span class="token punctuation">,</span>long time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="7"><li>删除hash表中的值</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 删除hash表中的值 * @param key 键 不能为null * @param item 项 可以使多个 不能为null */</span>public <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="8"><li>判断hash表中是否有该项的值</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 判断hash表中是否有该项的值 * @param key 键 不能为null * @param item 项 不能为null * @return true 存在 false不存在 */</span>public boolean <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="9"><li>递增，如果不存在,就会创建一个 并把新增后的值返回</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * hash递增 如果不存在,就会创建一个 并把新增后的值返回 * @param key 键 * @param item 项 * @param by 要增加几(大于0) * @return */</span>public double <span class="token function">hincr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span>double by<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="10"><li>递减</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * hash递减 * @param key 键 * @param item 项 * @param by 要减少记(小于0) * @return */</span>public double <span class="token function">hdecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span>double by<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span><span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="SET类型相关操作"><a href="#SET类型相关操作" class="headerlink" title="SET类型相关操作"></a>SET类型相关操作</h3><ol><li>根据key获取Set中的所有值</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 根据key获取Set中的所有值 * @param key 键 * @return */</span>public Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="2"><li>根据value从一个set中查询,是否存在</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 根据value从一个set中查询,是否存在 * @param key 键 * @param value 值 * @return true 存在 false不存在 */</span>public boolean <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="3"><li>添加一个SET缓存</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 将数据放入set缓存 * @param key 键 * @param values 值 可以是多个 * @return 成功个数 */</span>public long <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="4"><li> 添加一个SET缓存并设置过期时间</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 将set数据放入缓存 * @param key 键 * @param time 时间(秒) * @param values 值 可以是多个 * @return 成功个数 */</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token keyword">long</span> time<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="5"><li> 获取SET缓存的长度</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取set缓存的长度 * @param key 键 * @return */</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="6"><li> 移除指定key的缓存</li></ol><div class="code-wrapper"><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 移除值为value的 * @param key 键 * @param values 值 可以是多个 * @return 移除的个数 */</span><span class="token keyword">public</span> long <span class="token function">setRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object <span class="token operator">..</span><span class="token punctuation">.</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="LIST类型相关操作"><a href="#LIST类型相关操作" class="headerlink" title="LIST类型相关操作"></a>LIST类型相关操作</h3><ol><li> 获取list缓存的内容</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 获取list缓存的内容 * @param key 键 * @param start 开始 * @param end 结束  0 到 -1代表所有值 * @return */</span>public List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>long start<span class="token punctuation">,</span> long end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="2"><li>  获取list缓存的长度</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取list缓存的长度 * @param key 键 * @return */</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="3"><li>通过索引 获取list中的值</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通过索引 获取list中的值 * @param key 键 * @param index 索引  index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推 * @return */</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">lGetIndex</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token keyword">long</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="4"><li>  将list放入缓存</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 将list放入缓存 * @param key 键 * @param value 值 * @return */</span>public boolean <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="5"><li>将list放入缓存并设置过期时间</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 将list放入缓存 * @param key 键 * @param value 值 * @param time 时间(秒) * @return */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="6"><li> 将list放入缓存</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 将list放入缓存 * @param key 键 * @param value 值 * @return */</span>public boolean <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="7"><li> 将list放入缓存并设置过期时间</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 将list放入缓存 * @param key 键 * @param value 值 * @param time 时间(秒) * @return */</span>public boolean <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">,</span> long time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="8"><li> 根据索引修改list中的某条数据</li></ol><div class="code-wrapper"><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * 根据索引修改list中的某条数据 * @param key 键 * @param index 索引 * @param value 值 * @return */</span>public boolean <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> long index<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="9"><li> 移除N个值为value</li></ol><div class="code-wrapper"><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/** * 移除N个值为value * @param key 键 * @param count 移除多少个 * @param value 值 * @return 移除的个数 */</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">lRemove</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">long</span></span> count<span class="token punctuation">,</span><span class="token class-name">Object</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> <span class="token keyword">remove</span> <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">remove</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>middle-component</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智慧教学辅助系统-作品简介</title>
    <link href="/2020/06/01/genesis-1/"/>
    <url>/2020/06/01/genesis-1/</url>
    
    <content type="html"><![CDATA[<h3 id="作品简介"><a href="#作品简介" class="headerlink" title="作品简介"></a>作品简介</h3><p>现阶段，智慧教育课堂教学仍是学校教育的主阵地，传统课堂教学过程中，教师讲授课程知识以知识点为基本元素，更多偏向将过于细琐和庞杂的知识点填鸭式的、照本宣科的讲授给大学生。</p><p>我们开发的智慧教学辅助系统，利用知识图谱的构建与调整功能帮助教师了解学生在教学过程中对某一知识点的掌握情况，及时调整教学内容和教学方法，合理分配，重新组合知识点教学，利用知识点识别学生状态检测功能优化学生与老师的学习与授课体验。整体的教务管理系统能提供一个高效且安全的学生数据采集处理平台，为学校及时了解学生近况和相关措施的有效实施作为有力保障。更能引导和推动教育内容和模式的变革。</p><p>不仅如此，本系统能合理的测评学生上课效果与教师授课评价，本系统更能帮助落实教育改革，利用人工智能改善教学方式，引导和推动教育内容和模式的变革。</p><p>现阶段，智慧教育课堂教学仍是学校教育的主阵地，传统课堂教学过程中，教师讲授课程知识以知识点为基本元素，更多偏向将过于细琐和庞杂的知识点填鸭式的、照本宣科的讲授给大学生，然而，搜索引擎的功能迅速发展，已能非常快捷方便地为大学生提供知识点的解读，教师教学时，应强调课程相关知识点的发现逻辑、关联机理和思维导引。学科知识图谱的构建，能有效的寻找关联逻辑，从而引导学生更加快速进入学习状态，引导思维发散，提高学习效率，达到预期教学质量和效果。学生的学习效果是反映教学质量的最直接表现，如何合理的进行教学效果测评，则成了更加重要的一环。利用人工智能识别分析反馈学生学习状态，更是推进人了工智能与教育的真融合。</p>]]></content>
    
    
    <categories>
      
      <category>genesis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>智慧教学辅助系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智慧教学辅助系统-作品思路</title>
    <link href="/2020/06/01/genesis-2/"/>
    <url>/2020/06/01/genesis-2/</url>
    
    <content type="html"><![CDATA[<h4 id="1-目标与思路"><a href="#1-目标与思路" class="headerlink" title="\1. 目标与思路"></a>\1. 目标与思路</h4><p>   人工智能，知识图谱等前沿信息技术在教育中的应用，推动信息化教育进入高校，学科知识图谱将不断为智慧的教学提供知识功能，人工智能为智慧教育的发展提供了强有力的技术支持，推动人工智能与教育都应刻不容缓。</p><h4 id="2-传统教育"><a href="#2-传统教育" class="headerlink" title="\2. 传统教育"></a>\2. 传统教育</h4><p>   现阶段，智慧教育课堂教学仍是学校教育的主阵地，传统课堂教学过程中，教师讲授课程知识以知识点为基本元素，更多偏向将过于细琐和庞杂的知识点填鸭式的、照本宣科的讲授给大学生，</p><p><img src="/blog/img/genesis/%E7%8E%B0%E9%98%B6%E6%AE%B5.jpg"></p><p>然而，搜索引擎的功能迅速发展，已能非常快捷方便地为大学生提供知识点的解读，教师教学时，应强调课程相关知识点的发现逻辑、关联机理和思维导引。学科知识图谱的构建，能有效的寻找关联逻辑，从而引导学生更加快速进入学习状态，引导思维发散，提高学习效率，达到预期教学质量和效果。学生的学习效果是反映教学质量的最直接表现，如何合理的进行教学效果测评，则成了更加重要的一环。利用人工智能识别分析反馈学生学习状态，更是推进人了工智能与教育的真融合。</p><p> <img src="/blog/img/genesis/%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.jpg"></p><h4 id="3-系统构想"><a href="#3-系统构想" class="headerlink" title="\3. 系统构想"></a>\3. 系统构想</h4><p>   为此，我们开发了本系统，帮助教师了解学生在教学过程中对某一知识点的掌握情况，及时调整教学内容和教学方法，合理分配，重新组合知识点教学，构建和调整课程知识图谱，优化学生与老师的学习与授课体验。其次能提供一个高效且安全的学生数据采集处理平台，为学校及时了解学生近况和相关措施的有效实施作为有力保障。更能帮助落实教育改革，利用人工智能改善教学方式，引导和推动教育内容和模式的变革。</p><h4 id="4-系统实现"><a href="#4-系统实现" class="headerlink" title="\4. 系统实现"></a>\4. 系统实现</h4><p>   为实现这一目的，系统包含以下几个核心功能：分别是知识点设置、知识点识别、与定时学习效果可视化反馈和知识图谱构建与调整。</p><p><img src="/blog/img/genesis/%E7%8E%B0%E9%98%B6%E6%AE%B5.jpg"> </p><p>具体功能实现流程如下：首先，教师课前通过系统预先设置某课时的知识点，上课过程中有一台球机始终对准教师所用PPT屏幕，用于获取整堂课PPT播放情况视频；一台对准学生，用于获取学生的课堂全景信息。接着，课后系统将对拍摄视频处理后进行知识点关键字的识别，与教师预设的知识点进行比对，获取知识点对应的时间段。然后，对知识点出现的时间段进行学生状态检测，统计对应知识点学生的掌握情况并可视化展示。最后，在课程结束后，由系统根据知识点识别的时间线以及此时学生的听课状态构建调整知识图谱呈现。</p><p> <img src="/blog/img/genesis/%E5%8A%9F%E8%83%BD%E6%B5%81%E7%A8%8B.jpg"></p><p>\5. 技术架构</p><p>   为实现以上功能，本系统采用SSM架构。可分为数据层，服务层，应用层，和视图层。利用springboot+mybtis框架搭建基础应用后，引入自定义状态监测接口和Ocr文字识别，Face++人脸检测，ffmpeg图像处理，第三方服务接口完善系统架构，引入shiro权限管理框架帮助系统完善安全性与可靠性。</p><p> <img src="/blog/img/genesis/%E6%9E%84%E6%80%9D%E5%9B%BE.jpg"></p><p>\6. 系统成果</p><p>   最后我们实现包括教学系统以外，还完善了包括学生信息管理，角色管理，人员权限分配等一系列基本教务功能。操作日志和数据监控等安全性功能也一并所完善。在此过程中，我们解决了帮助教师知识点把控难易程度，更加理性的知识点组合，课程结束后的学习效果和授课评价数据可视化。构建和调整知识图谱，以帮助教师寻找知识点关联逻辑，从而引导学生更加快速进入学习状态，引导思维发散，提高学习效率，达到预期教学质量和效果。完成教学目标。</p><p>  <img src="/blog/img/genesis/%E5%8A%9F%E8%83%BD%E5%AE%8C%E6%88%90.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>genesis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>智慧教学辅助系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>reply</title>
    <link href="/2020/06/01/reply/"/>
    <url>/2020/06/01/reply/</url>
    
    <content type="html"><![CDATA[<h3 id="1-如何将教务系统信息导入系统？怎么保证这些信息的安全？"><a href="#1-如何将教务系统信息导入系统？怎么保证这些信息的安全？" class="headerlink" title="1.如何将教务系统信息导入系统？怎么保证这些信息的安全？"></a>1.如何将教务系统信息导入系统？怎么保证这些信息的安全？</h3><p>我们采用Excel模板解析导入, 并使用apache的poi解析工具, 解析上传的数据并存入数据库</p><ul><li>数据库存储密码等信息采用sha256加密，保证信息安全。</li><li>项目部署的服务器位于校大数据中心，使用内网访问，安全性高。外部人员需要使用内部人员提供的vpn账号才能使用。</li><li>云数据库符合企业级安全标准，高效防御 SQL 注入、暴力破解等数据库攻击行为，极大减少用户因数据库攻击带来的业务中断和损失。</li><li>每日自动备份数据，确保数据存储安全。</li></ul><h3 id="2-使用人脸识别技术实现人脸点名，进行人脸检测，那么你们使用的人脸检测技术是什么？"><a href="#2-使用人脸识别技术实现人脸点名，进行人脸检测，那么你们使用的人脸检测技术是什么？" class="headerlink" title="2. 使用人脸识别技术实现人脸点名，进行人脸检测，那么你们使用的人脸检测技术是什么？"></a>2. 使用人脸识别技术实现人脸点名，进行人脸检测，那么你们使用的人脸检测技术是什么？</h3><ul><li>我们使用的是Face++的开放平台</li><li>它是一个免费的开放平台,开发者可利用试用的appkey调用所有服务,例如人脸识别服务</li><li>传入参数是base64编码后的图片，返回是一串json，接收后解析为java的实体，获取人脸信息</li></ul><h3 id="3-Face-流程，怎么调用的？"><a href="#3-Face-流程，怎么调用的？" class="headerlink" title="3. Face++流程，怎么调用的？"></a>3. Face++流程，怎么调用的？</h3><ul><li>face++对用户透明，通过官网提供的HttpUtils类，利用post方法，直接调用。返回json数据，经解析为java对象。</li></ul><h3 id="4-视频-数据来源？过程"><a href="#4-视频-数据来源？过程" class="headerlink" title="4. 视频/数据来源？过程"></a>4. 视频/数据来源？过程</h3><ul><li>从摄像头拍摄后的视频流（tcp流）处理后去掉配置信息，留下视频数据，拼接后成为多少秒的视频，然后保存到服务器的文件夹里。然后前端通过url接收到视频，是一个有延时的实时。更好的处理是视频传到前端进行处理，然后在网页上显示。保存到话就是前端的视频流保存到本地。</li><li>预期的实时显示，是把程序写到摄像头里。或者做一个中间的硬件设备，由他专门处理，就是<strong>边缘计算</strong>。</li></ul><h3 id="5-如何评定学生的听课质量？数据可视化是用什么实现的？"><a href="#5-如何评定学生的听课质量？数据可视化是用什么实现的？" class="headerlink" title="5. 如何评定学生的听课质量？数据可视化是用什么实现的？"></a>5. 如何评定学生的听课质量？数据可视化是用什么实现的？</h3><ul><li>课程开始后，每隔五分钟拍摄学生当前时刻的照片，利用Face++中人体抠图的功能将图片中的所有学生分割开来，依次调用状态检测模型，返回学生们当前时刻的状态，并将数据存入数据库中。</li><li>数据可视化为前端从后端得到数据库中的数据，利用百度的Echars数据图表可视化工具多方面展示,比如学生上课状态,教师知识点范围等。</li></ul><h3 id="6-是怎么使用权限管理模块实现增删角色并赋权的？"><a href="#6-是怎么使用权限管理模块实现增删角色并赋权的？" class="headerlink" title="6.是怎么使用权限管理模块实现增删角色并赋权的？"></a>6.是怎么使用权限管理模块实现增删角色并赋权的？</h3><ul><li>用户在登录系统时，会将用户的账号和密码传递给shiro框架自带的subject类的实例对象并将该对象以参数的形式传递给shiro。</li><li>shiro将其与数据库中的用户表中信息进行比对验证该用户身份，验证成功后从数据库中获得该用户的权限信息。为了减少系统开销，对齐进行权限缓存。通过shiro与thymeleaf整合的依赖对前端菜单进行动态渲染展示该用户对应权限的功能。</li></ul><h3 id="7-模型是如何调用的"><a href="#7-模型是如何调用的" class="headerlink" title="7. 模型是如何调用的"></a>7. 模型是如何调用的</h3><ol><li>python模型保存成Py文件</li><li>在Tensorflow官网下载对应的java jar包(libtensorflow-1.12.0.jar)和在运行目录下添加tensorflow_ini.dll文件</li><li>python在定义输入张量(输入数据，即图片)时，指定参数</li><li>在java中传入参数</li><li>将模型返回的数据结果</li><li>得到输出张量把输出张量转化为java的float数组得到的数组里，一共有四个值（分别代表四种状态的概率）取其中概率最大的一个，当作学生的状态</li></ol><h3 id="8-摄像头无法远程控制的原因"><a href="#8-摄像头无法远程控制的原因" class="headerlink" title="8.摄像头无法远程控制的原因"></a>8.摄像头无法远程控制的原因</h3><ul><li>我们部署的项目在服务部在学校的云计算中心的(8G， 4核， 100G)的虚拟机</li><li>摄像头部在107实验室，同在校园网内，所以程序可以控制摄像头</li><li>但是现在外网不能访问到校园网的虚拟机，需要网络中心进行公网的地址映射。指导老师跟网络中心联系时候才知道要走审批流程，到目前为止还没审批下来。</li><li>这也是无法现场展示的原因</li></ul><h3 id="9-摄像头控制程序如何实现？"><a href="#9-摄像头控制程序如何实现？" class="headerlink" title="9.摄像头控制程序如何实现？"></a>9.摄像头控制程序如何实现？</h3><ol><li>通过ip地址和端口号连接摄像头</li><li>根据命令行输入的字符串，调用对应的程序接口</li><li>断开连接，释放资源</li></ol><h3 id="10-为何无法显示摄像头实况？"><a href="#10-为何无法显示摄像头实况？" class="headerlink" title="10.为何无法显示摄像头实况？"></a>10.为何无法显示摄像头实况？</h3><ul><li>摄像头厂商提供的接口都是windows平台的接口，项目是通过java调用exe文件，但是服务器是Linux的，无法运行exe文件。</li><li>后期可以利用opencv 获取摄像推流的方式展示实时数据</li></ul><h3 id="11-ocr识别原理"><a href="#11-ocr识别原理" class="headerlink" title="11.ocr识别原理"></a>11.ocr识别原理</h3><ol><li><p>版面分析：把一整张图像拆分为行；便于后面行处理。在图像没有明显倾斜扭曲时，可以先使用**笔画等宽算法(swt算法)**把非笔迹的像素过滤掉，再使用投影直方图进行分行。</p></li><li><p>使用<strong>连通域分析或者直方图投影</strong>进行行拆分为字符</p></li><li><p>识别字符： 识别字符就在于生成样本+选择识别算法，由于时间因素，我们采用了百度已经训练好是文字识别算法</p></li><li><p>识别后的人工矫正</p></li></ol><h3 id="12-状态检测模型训练"><a href="#12-状态检测模型训练" class="headerlink" title="12. 状态检测模型训练"></a>12. 状态检测模型训练</h3><ul><li>制作数据集。实验视频是使用1920（水平）×1080（垂直）的球机采集的。拍摄对象共60名，让学生在座位上分别做出认真听课、打瞌睡、玩手机、发呆的动作，每个动作持续4-6秒，在动作间切换3次，获取18s-24s的视频。将所有视频每秒抽取20帧，将得到的图片在进行人工标注状态，得到符合条件的2500张图片。</li><li>选取模型训练方法。考虑到VGG16的拓展性强，容易迁移到其他数据图片上，同时由于<strong>其使用小卷积核和更深的网络进行的正则化</strong>，使用与训练得到的数据进行参数的初始化，VGG16网络较其他网络有更高的准确性和更快的速度，因此，选用VGG16对学生状态检测模型进行训练，是一个明智的选择。</li><li>将数据集放入VGG16网络进行训练，最终训练出学生状态检测模型，经测试，正确率能够达到89.34%。训练出的模型只需将某个学生的状态图输入，即可获取该学生此时刻对应的上课状态。</li><li>但是，由于我们现在是单人单图的训练，并且在人体抠图的过程中还是存在着遮挡的现象等问题，所以在实际应用中正确率往往达不到这么高，但我们也会积极的进行改进。</li></ul><h3 id="13-知识图谱构建"><a href="#13-知识图谱构建" class="headerlink" title="13. 知识图谱构建"></a>13. 知识图谱构建</h3><ol><li>首先需信息抽来有教师预设的知识点自动化信息地从半结构化和无结构数据中抽取实体、关系以及实体属性等结构化信息。 </li><li>然后这些繁杂的信息中在获取实体、关系与属性等知识要素后，经过知识融合，消除实体<strong>指称项</strong>与<strong>实体对象之间</strong>的歧义，得到一系列基本的事实表达。然而事实本身并不等于知识。要想最终获得结构化，网络化的知识体系，还需要进一步的人工优化去重。</li><li>然后将各个父子节点及同级节点之间的联系导入xml数据，Echars关系图利用xml的数据关系生成可视化展示，最终达到演示视频所展示的可视化效果</li><li>我们之后还会有需教师的个人理解和相关资料后的进一步改善,也会根据重新生成的知识图谱,进一步的引导教师挖掘知识点之间的联系.</li></ol><h3 id="14-可视化展示那些方面"><a href="#14-可视化展示那些方面" class="headerlink" title="14. 可视化展示那些方面"></a>14. 可视化展示那些方面</h3><ul><li>学生最近一次课程学生状态统计</li><li>不同班级对不同知识点组合所产生学生学习状态的影响</li><li>最近一周的知识点分布</li><li>最近一周知识点难易程度分配</li></ul><h3 id="15-是否已经投入使用"><a href="#15-是否已经投入使用" class="headerlink" title="15. 是否已经投入使用"></a>15. 是否已经投入使用</h3><ul><li>我们在项目完成后经学生同意后，对参与的志愿者进行了一系列的实验</li><li>在学校的监管下有部分班级已经开始用</li><li>并产生了一系列的结果数据集用于展示 </li><li>但由于现阶段我们服务器负载较小只能小范围进行测试使用</li><li>待后期系统更加完善后会进行响应的服务器扩容,来进行更大范围的测试</li></ul><h3 id="16-运行过程中出现的问题"><a href="#16-运行过程中出现的问题" class="headerlink" title="16.运行过程中出现的问题"></a>16.运行过程中出现的问题</h3><ul><li><strong>Ocr识别中对于视频知识点出现误差</strong>,我们使用ocr对同一段时间进行比对两次, 如果相差10秒以内,则进行第三次比对.对第三次识别的结果取平均值</li></ul><h3 id="17-对于学生隐私的问题-是否考虑过学生的感受"><a href="#17-对于学生隐私的问题-是否考虑过学生的感受" class="headerlink" title="17. 对于学生隐私的问题,是否考虑过学生的感受"></a>17. 对于学生隐私的问题,是否考虑过学生的感受</h3><ul><li>我们再使用本系统是已争取学生同意</li><li>我们使用权限控制模块,已保证教师只能查看数据的识别结果集,而不能针对单个学生的结果展示,对于学生的学习状态由短信单独通知.</li><li>我们拍摄所产生的数据在运算完成后进行实时的删除</li><li>系统部署于学校内网中,识别产生数据结果集保存在腾讯云数据库中</li><li>云数据库符合企业级安全标准，高效防御 SQL 注入、暴力破解等数据库攻击行为，极大减少用户因数据库攻击带来的业务中断和损失。</li><li>每日自动备份数据，确保数据存储安全。</li></ul><h3 id="18-项目优势"><a href="#18-项目优势" class="headerlink" title="18. 项目优势"></a>18. 项目优势</h3><ul><li>本系统能够帮助教师了解学生在教学过程中对某一知识点的掌握情况，及时调整教学内容和教学方法，合理分配，重新组合知识点教学，构建和调整课程知识图谱，优化学生与老师的学习与授课体验。其次能提供一个高效且安全的学生数据采集处理平台，为学校及时了解学生近况和相关措施的有效实施作为有力保障。更能帮助落实教育改革，利用人工智能改善教学方式，引导和推动教育内容和模式的变革</li></ul><h3 id="19-人脸识别过程"><a href="#19-人脸识别过程" class="headerlink" title="19. 人脸识别过程"></a>19. 人脸识别过程</h3><ul><li><p>(1)首先建立人脸的面像档案。即用摄像机采集单位人员的人脸的面像文件或取他们的照片形成面像文件，并将这些面像文件生成面纹(Faceprint)编码贮存起来。</p></li><li><p>(2)获取当前的人体面像。即用摄像机捕捉的当前出入人员的面像，或取照片输入，并将当前的面像文件生成面纹编码。</p></li><li><p>(3)用当前的面纹编码与档案库存的比对。即将当前的面像的面纹编码与档案库存中的面纹编码进行检索比对。上述的“面纹编码”方式是根据人脸脸部的本质特征和开头来工作的。这种面纹编码可以抵抗光线、皮肤色调、面部毛发、发型、眼镜、表情和姿态的变化，具有强大的可靠性，从而使它可以从百万人中精确地辨认出某个人。人脸的识别过程，利用普通的图像处理设备就能自动、连续、实时地完成。</p></li></ul><h3 id="20-用到很多第三方接口-为什么不自己创建接口"><a href="#20-用到很多第三方接口-为什么不自己创建接口" class="headerlink" title="20. 用到很多第三方接口,为什么不自己创建接口"></a>20. 用到很多第三方接口,为什么不自己创建接口</h3><ul><li>因为我们再设计项目之初想快速构建系统架构,从而选择了较多的第三方服务完善系统架构</li><li>在选择接口的同时,我们也对相关接口进行了一个同等级测试,包括性能,速度等方面,最终选择了现阶段的相关接口</li><li>再后期构建完善后,会引入openCV等开源框架,自定义相关人脸识别接口,从而降低相关成本</li></ul><h3 id="21-项目涉及范围太大"><a href="#21-项目涉及范围太大" class="headerlink" title="21. 项目涉及范围太大"></a>21. 项目涉及范围太大</h3><ul><li>我们在设计项目之初,只是为了想通过教师讲授的知识点构建知识图谱,从而帮助老师更好的教学,但在逐步的项目开发中,我们发现要实现这一功能需要更多的数据前提,包括知识点识别,学生状态采集等多方面内容,由此我们的项目范围也是逐步扩大,最终形成了一个相对完善的项目.来达到我们的需求</li><li>我们的项目是一个循序渐进的过程，学生状态检测功能能够有效提取困难知识点分布数据，有助于完成知识点检测，而知识点检测功能是知识图谱功能的前提，通过知识点检测功能得到的信息以及教师预设的知识点自动化信息来知识融合并加工，最终实现知识图谱功能</li></ul>]]></content>
    
    
    <categories>
      
      <category>genesis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reply</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Aop切面编程</title>
    <link href="/2020/06/01/spring%20aop/"/>
    <url>/2020/06/01/spring%20aop/</url>
    
    <content type="html"><![CDATA[<h3 id="spring的aop与springboot整合-动态代理"><a href="#spring的aop与springboot整合-动态代理" class="headerlink" title="spring的aop与springboot整合   动态代理"></a>spring的aop与springboot整合   <a href="https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a">动态代理</a></h3><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h3 id="设置切点"><a href="#设置切点" class="headerlink" title="设置切点"></a>设置切点</h3><ul><li>在类上注解@Aspect</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 切入点 */</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.xkcoding.log.aop.controller.*Controller.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="通知方法"><a href="#通知方法" class="headerlink" title="通知方法"></a>通知方法</h3><ol><li>前置通知</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 前置操作 * * @param point 切入点 */</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"log()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeLog</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> point<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         *  String toString();         //连接点所在位置的相关信息         *    String toShortString();     //连接点所在位置的简短相关信息         *    String toLongString();     //连接点所在位置的全部相关信息         *    Object getThis();         //返回AOP代理对象，也就是com.sun.proxy.$Proxy18         *    Object getTarget();       //返回目标对象，一般我们都需要它或者（也就是定义方法的接口或类，为什么会是接口呢？这主要是在目标对象本身是动态代理的情况下，例如Mapper。所以返回的是定义方法的对象如aoptest.daoimpl.GoodDaoImpl或com.b.base.BaseMapper&lt;T, E, PK>）         *    Object[] getArgs();       //返回被通知方法参数列表         *    Signature getSignature();  //返回当前连接点签名  其getName()方法返回方法的FQN，如void aoptest.dao.GoodDao.delete()或com.b.base.BaseMapper.insert(T)(需要注意的是，很多时候我们定义了子类继承父类的时候，我们希望拿到基于子类的FQN，这直接可拿不到，要依赖于AopUtils.getTargetClass(point.getTarget())获取原始代理对象，下面会详细讲解)         *    SourceLocation getSourceLocation();//返回连接点方法所在类文件中的位置         *    String getKind();        //连接点类型         *    StaticPart getStaticPart(); //返回连接点静态部分         */</span>        <span class="token class-name">JoinPoint<span class="token punctuation">.</span>StaticPart</span> staticPart <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getStaticPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         *  Signature getSignature();    //返回当前连接点签名         *    String getKind();          //连接点类型         *    int getId();               //唯一标识         *    String toString();         //连接点所在位置的相关信息         *    String toShortString();     //连接点所在位置的简短相关信息         *    String toLongString();     //连接点所在位置的全部相关信息         */</span>        <span class="token class-name">ServletRequestAttributes</span> attributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【请求 URL】：&#123;&#125;"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【请求 IP】：&#123;&#125;"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【请求类名】：&#123;&#125;，【请求方法名】：&#123;&#125;"</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【请求参数】：&#123;&#125;，"</span><span class="token punctuation">,</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>parameterMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>START_TIME<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="2"><li>环绕通知</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 环绕操作 * * @param point 切入点 * @return 原方法返回值 * @throws Throwable 异常信息 */</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"log()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">aroundLog</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> point<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">toLongString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【参数值】：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> result <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【返回值】：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-tex" data-language="tex"><code class="language-tex">&#x2F;** * 环绕通知 ProceedingJoinPoint 执行proceed方法的作用是让目标方法执行，这也是环绕通知和前置、后置通知方法的一个最大区别。 *  Proceedingjoinpoint 继承了 JoinPoint 。是在JoinPoint的基础上暴露出 proceed 这个方法。proceed很重要，这个是aop代理链执行的方法。 *&#x2F;</code></pre></div><ol start="3"><li>后置通知</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 后置操作 */</span><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"log()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ServletRequestAttributes</span> attributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>START_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【请求耗时】：&#123;&#125;毫秒"</span><span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> header <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserAgent</span> userAgent <span class="token operator">=</span> <span class="token class-name">UserAgent</span><span class="token punctuation">.</span><span class="token function">parseUserAgentString</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【浏览器类型】：&#123;&#125;，【操作系统】：&#123;&#125;，【原始User-Agent】：&#123;&#125;"</span><span class="token punctuation">,</span> userAgent<span class="token punctuation">.</span><span class="token function">getBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userAgent<span class="token punctuation">.</span><span class="token function">getOperatingSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//返回客户端在此次请求中发送的所有Cookie对象。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回名字为name的请求报头的值。如果请求中没有包含指定名字的报头，这个方法返回null。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> paramString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回名字为name的请求报头所有的值的枚举集合。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token class-name">String</span> paramString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回此次请求中包含的所有报头名字的枚举集合。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回此次请求所使用的HTTP方法的名字，例如，GET、POST或PUT。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回与客户端发送的请求URL相联系的额外的路径信息。额外的路径信息是跟在Servlet的路径之后、查询字符串之前的路径，并以斜杠（/）字符开始。</span>    <span class="token comment">//例如，假定在web.xml文件中MyServlet类映射的URL是：/myservlet/*，用户请求的URL是：http://localhost:8080/ ch02/myservlet/test，</span>    <span class="token comment">//当我们在HttpServletRequest对象上调用getPathInfo()时，该方法将返回/test。如果没有额外的路径信息，getPathInfo()方法将返回null。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getPathInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将额外的路径信息转换为真实的路径。例如，在上面的例子中假定ch02 Web应用程序位于D:\OpenSource\apache-tomcat-6.0.16\webapps\ch02目录，</span>    <span class="token comment">//当用户请求http://localhost: 8080/ch02/myservlet/test时，在请求对象上调用getPathTranslated()方法将返回</span>    <span class="token comment">//D:\OpenSource\apache-tomcat-6.0.16\webapps\ch02\test。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getPathTranslated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回请求URI中表示请求上下文的部分，上下文路径是请求URI的开始部分。上下文路径总是以斜杠（/）开头，但结束没有斜杠（/）。在默认（根）上下文中，这个方法返回空字符串""。</span>    <span class="token comment">//例如，请求URI为“/sample/test”，调用该方法返回路径为“/sample”。</span>    <span class="token comment">//示例： http://192.168.10.145:8888/ServletDemo/hello——>ServletDemo</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回请求URL中在路径后的查询字符串。如果在URL中没有查询字符串，该方法返回null。例如，有如下的请求URL：</span>    <span class="token comment">//http://localhost:8080/ch02/logon.jsp?action=logon调用getQueryString()方法将返回action=logon。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回请求URL中从主机名到查询字符串之间的部分。例如：</span>    <span class="token comment">//POST:     /some/path.html HTTP/1.1   /some/path.html</span>    <span class="token comment">//GET:     http://foo.bar/a.html HTTP/1.0  /a.html</span>    <span class="token comment">//HEAD:     /xyz?a=b HTTP/1.1    /xyz</span>    <span class="token comment">//示例： http://192.168.10.145:8888/ServletDemo/hello——>ServletDemo/hello</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重新构造客户端用于发起请求的URL。返回的URL包括了协议、服务器的名字、端口号和服务器的路径，但是不包括查询字符串参数。</span>    <span class="token comment">//要注意的是，如果请求使用RequestDispatcher.forward(ServletRequest, ServletResponse)方法被转发到另一个Servlet中，</span>    <span class="token comment">//那么你在这个Servlet中调用getRequestURL()，得到的将是获取RequestDispatcher对象时使用的URL，而不是原始的请求URL。</span>    <span class="token comment">//示例： http://192.168.10.145:8888/ServletDemo/hello——>http://192.168.10.145:8888/ServletDemo/hello</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">StringBuffer</span> <span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回请求URI中调用Servlet的部分。这部分的路径以斜杠（/）开始，包括了Servlet的名字或者路径，但是不包括额外的路径信息和查询字符串。</span>    <span class="token comment">//例如，假定在web.xml文件中MyServlet类映射的URL是：/myservlet/*，用户请求的URL是：http://localhost:8080/ ch02/myservlet/test，</span>    <span class="token comment">//当我们在HttpServletRequest对象上调用getServletPath ()时，该方法将返回/myservlet。如果用于处理请求的Servlet与URL样式“/*”相匹配，那么这个方法将返回空字符串（""）。</span>    <span class="token comment">//示例： http://192.168.10.145:8888/ServletDemo/hello——>hello</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回和此次请求相关联的Session，如果没有给客户端分配Session，而create参数为true，</span>    <span class="token comment">//则创建一个新的Session。如果create参数为false，而此次请求没有一个有效的HttpSession，则返回null。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">HttpSession</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> create<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回和此次请求相关联的Session，如果没有给客户端分配Session，则创建一个新的Session。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">HttpSession</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//增加一个Cookie到响应中。这个方法可以被多次调用，用于设置多个Cookie。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> paramCookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断以name为名字的响应报头是否已经设置。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">containsHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用Session ID对指定的url进行编码。如果该url不需要编码，则返回未改变的url。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">encodeURL</span><span class="token punctuation">(</span><span class="token class-name">String</span> paramString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用Session ID对用于重定向的url进行编码，以便用于sendRedirect()方法中。如果该url不需要编码，则返回未改变的url。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">encodeRedirectURL</span><span class="token punctuation">(</span><span class="token class-name">String</span> paramString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用指定的状态代码发送一个错误响应到客户端。服务器默认会创建一个包含了指定消息的服务器端错误页面作为响应，</span><span class="token comment">//设置内容类型为“text/html”。如果Web应用程序已经声明了对应于指定状态代码的错误页面，则服务器会将这个页面发送给客户端，而不理会参数msg指定的错误消息。</span><span class="token comment">//如果响应已经被提交，这个方法将抛出IllegalStateException异常。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sendError</span><span class="token punctuation">(</span><span class="token keyword">int</span> paramInt<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">//使用参数sc表示的状态代码发送一个错误响应到客户端，同时清除缓存。如果响应已经被提交，这个方法将抛出IllegalStateException异常。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sendError</span><span class="token punctuation">(</span><span class="token keyword">int</span> sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">//发送一个临时的重定向响应到客户端，让客户端访问新的URL。如果指定的位置是相对URL，Servlet容器在发送响应到客户端之前，必须将相对URL转换为绝对URL。</span><span class="token comment">//如果响应已经被提交，这个方法将抛出IllegalStateException异常。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token class-name">String</span> paramString<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">//用给出的name和value，设置一个响应报头。如果这个报头已经被设置，新的值将覆盖先前的值。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> paramString1<span class="token punctuation">,</span> <span class="token class-name">String</span> paramString2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用给出的name和value，增加一个响应报头到响应中。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为响应设置状态代码。</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> paramInt<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot + LogBack 配置</title>
    <link href="/2020/05/31/spring%20logback/"/>
    <url>/2020/05/31/spring%20logback/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot-LogBack-配置"><a href="#SpringBoot-LogBack-配置" class="headerlink" title="SpringBoot + LogBack 配置"></a>SpringBoot + LogBack 配置</h3><ol><li>首先可使用Spring 默认依赖,其他maven项目可引入</li></ol><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0-alpha5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><ol start="2"><li>使用</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootDemoLogbackApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SpringBootDemoLogbackApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootDemoLogbackApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Spring boot启动初始化了 &#123;&#125; 个 Bean"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Spring boot启动初始化了 &#123;&#125; 个 Bean"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Spring boot启动初始化了 &#123;&#125; 个 Bean"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Spring boot启动初始化了 &#123;&#125; 个 Bean"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Spring boot启动初始化了 &#123;&#125; 个 Bean"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"【SpringBootDemoLogbackApplication】启动异常："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><ol start="3"><li>也可使用lombok 配合IDEA插件 使用@Sel4j 注解 无需LoggerFactory创建log</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p><a href="(https://juejin.im/post/5b51f85c5188251af91a7525#heading-6)">参照这个文件介绍</a></p></li><li><p>这里贴出自定义完整配置</p></li></ul><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  "$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; - - - [%t]  %-40.40logger&#123;39&#125;  %file:%line: %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_ERROR_PATTERN_LUNA<span class="token punctuation">"</span></span>            <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;FILE_ERROR_PATTERN_LUNA:-%d&#123;$&#123;FILE_ERROR_PATTERN_LUNA:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %file:%line: -  %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/defaults.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conversionRule</span> <span class="token attr-name">conversionWord</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr<span class="token punctuation">"</span></span> <span class="token attr-name">converterClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.boot.logging.logback.ColorConverter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conversionRule</span> <span class="token attr-name">conversionWord</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wex<span class="token punctuation">"</span></span> <span class="token attr-name">converterClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conversionRule</span> <span class="token attr-name">conversionWord</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wEx<span class="token punctuation">"</span></span>                  <span class="token attr-name">converterClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment">&lt;!-- 彩色日志格式 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN_LUNA<span class="token punctuation">"</span></span>            <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;CONSOLE_LOG_PATTERN_LUNA:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%t])&#123;faint&#125; %clr(%40.40file:%line:)&#123;cyan&#125; %clr( -)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$&#123;CONSOLE_LOG_PATTERN_LUNA&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_INFO<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 Error 的日志--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--过滤 Error--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--匹配到就禁止--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--没有匹配到就允许--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有&lt;File>和&lt;FileNamePattern>，那么当天日志是&lt;File>，明天会自动把今天的日志改名为今天的日期。即，&lt;File> 的日志都是当天的。--></span><span class="token comment">&lt;!--&lt;File>logs/info.spring-boot-demo-logback.log&lt;/File>--></span><span class="token comment">&lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileNamePattern</span><span class="token punctuation">></span></span>logs/spring-boot-demo-logback/info.created_on_%d&#123;yyyy-MM-dd&#125;.part_%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileNamePattern</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--只保留最近90天的日志--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>90<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--></span><span class="token comment">&lt;!--&lt;totalSizeCap>1GB&lt;/totalSizeCap>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>2MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&lt;triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">--></span><span class="token comment">&lt;!--&lt;maxFileSize>1KB&lt;/maxFileSize>--></span><span class="token comment">&lt;!--&lt;/triggeringPolicy>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$&#123;FILE_ERROR_PATTERN_LUNA&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 此处设置字符集 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_ERROR<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>Error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有&lt;File>和&lt;FileNamePattern>，那么当天日志是&lt;File>，明天会自动把今天的日志改名为今天的日期。即，&lt;File> 的日志都是当天的。--></span><span class="token comment">&lt;!--&lt;File>logs/error.spring-boot-demo-logback.log&lt;/File>--></span><span class="token comment">&lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileNamePattern</span><span class="token punctuation">></span></span>logs/spring-boot-demo-logback/error.created_on_%d&#123;yyyy-MM-dd&#125;.part_%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileNamePattern</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--只保留最近90天的日志--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>90<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>2MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>$&#123;FILE_ERROR_PATTERN_LUNA&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 此处设置字符集 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_INFO<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_ERROR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></div><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>logback和logback-spring.xml都可以用来配置logback，但是2者的加载顺序是不一样的。</p><p>logback.xml—&gt;application.properties—&gt;logback-spring.xml.</p><h2 id="logback-xml加载早于application-properties，所以如果你在logback-xml使用了变量时，而恰好这个变量是写在application-properties时，那么就会获取不到，只要改成logback-spring-xml就可以解决。"><a href="#logback-xml加载早于application-properties，所以如果你在logback-xml使用了变量时，而恰好这个变量是写在application-properties时，那么就会获取不到，只要改成logback-spring-xml就可以解决。" class="headerlink" title="logback.xml加载早于application.properties，所以如果你在logback.xml使用了变量时，而恰好这个变量是写在application.properties时，那么就会获取不到，只要改成logback-spring.xml就可以解决。"></a>logback.xml加载早于application.properties，所以如果你在logback.xml使用了变量时，而恰好这个变量是写在application.properties时，那么就会获取不到，只要改成logback-spring.xml就可以解决。</h2>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>logBack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring security 配置</title>
    <link href="/2020/05/31/spring%20security/"/>
    <url>/2020/05/31/spring%20security/</url>
    
    <content type="html"><![CDATA[<article class="baidu_pl">        <div id="article_content" class="article_content clearfix">        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-a405391f94.css">                <div id="content_views" class="htmledit_views">                    <p><strong>生活加油:摘一句子:</strong></p> <p><strong>“我希望自己能写这样的诗。我希望自己也是一颗星星。如果我会发光，就不必害怕黑暗。如果我自己是那么美好，那么一切恐惧就可以烟消云散。于是我开始存下了一点希望—如果我能做到，那么我就战胜了寂寞的命运。”</strong></p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-----------------------------王小波《我在荒岛上迎接黎明》</p> <h1><a name="t0"></a><a name="t0"></a>初步嘗試一下：</h1> <p><strong>新建项目,导入依赖</strong></p> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">package</span> com.liruilong;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : security学习</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/12/24 12:54</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@RestController</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HollerController</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@GetMapping("/hello")</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello Security"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <p><strong>访问接口:请求都被保护起来,用户名默认user,密码为控制台打印的字符串.</strong></p> <p><img alt="" class="has" height="336" src="https://img-blog.csdnimg.cn/2019122413045146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" width="801"></p> <p><img alt="" class="has" height="279" src="https://img-blog.csdnimg.cn/20191224130732495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" width="747"></p> <p><strong>&nbsp;手工配置用户名和密码:</strong></p> <p>一,配置类方式:</p> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">package</span> com.liruilong.securityl.demo;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : security配置</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/12/24 13:13</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@Configuration</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">config</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> Liruilong </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> 密码处理,告诉系统不加密访问</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 13:20 2019/12/24</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [] </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> org.springframework.security.crypto.password.PasswordEncoder </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     **/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Bean</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> Liruilong </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> 配置用户名密码.密码必须加密</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 13:16 2019/12/24</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [auth] </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     **/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        auth.inMemoryAuthentication()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .withUser(<span class="hljs-string">"liruilong"</span>).password(<span class="hljs-string">"123"</span>).roles(<span class="hljs-string">"admin"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .withUser(<span class="hljs-string">"liruilongs"</span>).password(<span class="hljs-string">"123"</span>).roles(<span class="hljs-string">"user"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <p><strong>配置文件方式:</strong></p> <p><img alt="" class="has" height="169" src="https://img-blog.csdnimg.cn/2019122413304389.png" width="523"></p> <p>&nbsp;</p> <h2><a name="t1"></a><a name="t1"></a>HttpScurity的简单配置:</h2> <div> <strong><span style="color:#434343;">基于内存的认证，</span><span style="color:#5b5b5b;">以自定义类继承自 w</span><span style="color:#434343;">ebSecurityConfigurerAdapter </span><span style="color:#434343;">，进行自定义配置。</span></strong></div> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">package</span> com.liruilong.securityl.demo;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : security配置</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/12/24 13:13</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@Configuration</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">config</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> Liruilong </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> 密码处理,告诉系统不加密访问</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 13:20 2019/12/24</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [] </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> org.springframework.security.crypto.password.PasswordEncoder </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     **/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Bean</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> Liruilong </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> 配置用户名密码.密码必须加密</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 13:16 2019/12/24</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [auth] </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     **/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        auth.inMemoryAuthentication()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .withUser(<span class="hljs-string">"liruilong"</span>).password(<span class="hljs-string">"123"</span>).roles(<span class="hljs-string">"admin"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .withUser(<span class="hljs-string">"liruilongs"</span>).password(<span class="hljs-string">"123"</span>).roles(<span class="hljs-string">"user"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//开启配置，开启 HtψSecurity 的配直</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        http.authorizeRequests()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 指定admin角色可以访问该路径</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .antMatchers(<span class="hljs-string">"/admin/**"</span>).hasRole(<span class="hljs-string">"admin"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 指定admin和user可以访问该路径</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .antMatchers(<span class="hljs-string">"/user/**"</span>).hasAnyRole(<span class="hljs-string">"admin"</span>, <span class="hljs-string">"user"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 剩下的请求登录之后就可以访问</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .anyRequest().authenticated()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 表单登录的url,请求地址</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .formLogin()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .loginProcessingUrl(<span class="hljs-string">"/dolog"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .permitAll()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 关闭csrf</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .csrf().disable();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <h3><a name="t2"></a><a name="t2"></a>表单登录的详细配置:</h3> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln" style="width:1652px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//开启配置</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        http.authorizeRequests()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 指定admin角色可以访问该路径</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .antMatchers(<span class="hljs-string">"/admin/**"</span>).hasRole(<span class="hljs-string">"admin"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 指定admin和user可以访问该路径</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .antMatchers(<span class="hljs-string">"/user/**"</span>).hasAnyRole(<span class="hljs-string">"admin"</span>, <span class="hljs-string">"user"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 剩下的请求登录之后就可以访问</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .anyRequest().authenticated()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 表单登录的url,请求地址</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .formLogin()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// url,请求地址</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .loginProcessingUrl(<span class="hljs-string">"/dolog"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 登录页面</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .loginPage(<span class="hljs-string">"login"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 修改默认的键,默认为username和password</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .usernameParameter(<span class="hljs-string">"uname"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .passwordParameter(<span class="hljs-string">"passwd"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 前后端分离,登录成功的处理</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .successHandler(<span class="hljs-keyword">new</span> AuthenticationSuccessHandler() &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">//authentication里保存了登录成功的用户信息</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        httpServletResponse.setContentType(<span class="hljs-string">"application/json;charset=utf-8"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        PrintWriter out = httpServletResponse.getWriter();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        map.put(<span class="hljs-string">"status"</span>, <span class="hljs-number">200</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// 登录成功的用户信息</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        map.put(<span class="hljs-string">"mes"</span>, authentication.getPrincipal());</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// 返回一个json</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.write(<span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(map));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.flush();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.close();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                 <span class="hljs-comment">//前后端不分,页面跳转</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .successForwardUrl(<span class="hljs-string">"成功跳转"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">//登录失败的处理</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .failureHandler(<span class="hljs-keyword">new</span> AuthenticationFailureHandler() &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        httpServletResponse.setContentType(<span class="hljs-string">"application/json;charset=utf-8"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        PrintWriter out = httpServletResponse.getWriter();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        map.put(<span class="hljs-string">"status"</span>, <span class="hljs-number">401</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> LockedException)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"账户被锁定请联系管理员!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e <span class="hljs-keyword">instanceof</span> CredentialsExpiredException)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"密码过期请联系管理员!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AccountExpiredException)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"账户过期请联系管理员!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e <span class="hljs-keyword">instanceof</span> DisabledException)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"账户被禁用请联系管理员!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> BadCredentialsException)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"用户名密码输入错误,请重新输入!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.write(<span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(map));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.flush();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.close();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 前后端不分跳转</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .failureForwardUrl(<span class="hljs-string">"失败跳转"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="68"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .permitAll()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 关闭csrf</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .csrf().disable();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <p>&nbsp;<strong>登录接口为 "/login”，即可以直接调用“／login”接口，发起一个 POST 请求进行登录，登录参数中用户 名必须命名为 usemam巳，密码必须命名为 password，配置了&nbsp;loginProcessingUrl 接口主要方便或者移动端调用登录接口 。最后还配置了 permitAll，表示和登录相关的接口都不需要认 证即可访问。&nbsp;</strong></p> <p><strong>anonymous() 允许匿名用户访问<br> permitAll() 无条件允许访问</strong></p> <h3><a name="t3"></a><a name="t3"></a>注销登录的配置:</h3> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln" style="width:1652px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//开启配置</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        http.authorizeRequests()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 指定admin角色可以访问该路径</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .antMatchers(<span class="hljs-string">"/admin/**"</span>).hasRole(<span class="hljs-string">"admin"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 指定admin和user可以访问该路径</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .antMatchers(<span class="hljs-string">"/user/**"</span>).hasAnyRole(<span class="hljs-string">"admin"</span>, <span class="hljs-string">"user"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 剩下的请求登录之后就可以访问</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .anyRequest().authenticated()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 表单登录的url,请求地址</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .formLogin()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// url,请求地址</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .loginProcessingUrl(<span class="hljs-string">"/dolog"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 登录页面</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .loginPage(<span class="hljs-string">"login"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 修改默认的键,默认为username和password</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .usernameParameter(<span class="hljs-string">"uname"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .passwordParameter(<span class="hljs-string">"passwd"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 前后端分离,登录成功的处理</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .successHandler(<span class="hljs-keyword">new</span> AuthenticationSuccessHandler() &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">//authentication里保存了登录成功的用户信息</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        httpServletResponse.setContentType(<span class="hljs-string">"application/json;charset=utf-8"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        PrintWriter out = httpServletResponse.getWriter();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        map.put(<span class="hljs-string">"status"</span>, <span class="hljs-number">200</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// 登录成功的用户信息</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        map.put(<span class="hljs-string">"mes"</span>, authentication.getPrincipal());</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// 返回一个json</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.write(<span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(map));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.flush();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.close();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                 <span class="hljs-comment">//前后端不分,页面跳转</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .successForwardUrl(<span class="hljs-string">"成功跳转"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">//登录失败的处理</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .failureHandler(<span class="hljs-keyword">new</span> AuthenticationFailureHandler() &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        httpServletResponse.setContentType(<span class="hljs-string">"application/json;charset=utf-8"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        PrintWriter out = httpServletResponse.getWriter();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        map.put(<span class="hljs-string">"status"</span>, <span class="hljs-number">401</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> LockedException)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"账户被锁定请联系管理员!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e <span class="hljs-keyword">instanceof</span> CredentialsExpiredException)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"密码过期请联系管理员!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AccountExpiredException)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"账户过期请联系管理员!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e <span class="hljs-keyword">instanceof</span> DisabledException)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"账户被禁用请联系管理员!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> BadCredentialsException)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            map.put(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"用户名密码输入错误,请重新输入!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.write(<span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(map));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.flush();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.close();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .failureForwardUrl(<span class="hljs-string">"失败跳转"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 任何角色可以访问</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .permitAll()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="68"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .logout()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 注销请求路劲</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .logoutUrl(<span class="hljs-string">"/logout"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 注销成功的处理</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .logoutSuccessHandler(<span class="hljs-keyword">new</span> LogoutSuccessHandler() &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onLogoutSuccess</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        httpServletResponse.setContentType(<span class="hljs-string">"application/json;charset=utf-8"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        PrintWriter out = httpServletResponse.getWriter();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.write(<span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(<span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(<span class="hljs-string">"注销成功!"</span>)));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="78"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.flush();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="79"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.close();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="80"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="82"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .logoutSuccessUrl(<span class="hljs-string">"注销成功的跳转"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="83"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="84"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// 关闭csrf</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="85"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .csrf().disable();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="86"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="87"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="88"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="89"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="90"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <h3><a name="t4"></a><a name="t4"></a>多HttpSecurity配置：&nbsp;</h3> <p><strong>config 不需要继承 WebSecurityConfigurerAdapter, 在&nbsp;MultiHttpSecurityConfig 中创建静态内部类继承 WebSecurityConfigurerAdapter 即可，静态 内部类上添加＠Configuration 注解和＠Order 注解，＠Order 注解表示该配直的优先级，数字 越小优先级越大，未加＠Order 注解的配直优先级最小。&nbsp;</strong></p> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 多HttpSecurity配置</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/12/24 17:01</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@Configuration</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiHttpSecurity</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Bean</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Autowired</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        auth.inMemoryAuthentication()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .withUser(<span class="hljs-string">"liruilong"</span>).password(<span class="hljs-string">"123"</span>).roles(<span class="hljs-string">"admin"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .withUser(<span class="hljs-string">"liruilongs"</span>).password(<span class="hljs-string">"123"</span>).roles(<span class="hljs-string">"user"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Configuration</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Order(1)</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">//开启配置</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            http.antMatcher(<span class="hljs-string">"/admin/**"</span>).authorizeRequests().anyRequest().hasAnyRole(<span class="hljs-string">"admin"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Configuration</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">//开启配置</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            http.authorizeRequests().anyRequest().authenticated()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .formLogin()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .failureForwardUrl(<span class="hljs-string">"/dolog"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .permitAll()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .csrf().disable();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <h3><a name="t5"></a><a name="t5"></a>密码加盐处理:</h3> <p><strong>通过BCryptPasswordEncoder生成密码密文,</strong></p> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0</span>; i++)&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            BCryptPasswordEncoder encoder = <span class="hljs-keyword">new</span> BCryptPasswordEncoder();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(encoder.encode(<span class="hljs-string">"123"</span>));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> <span class="hljs-meta">@Bean</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">替换为</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@Bean</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <h3><a name="t6"></a><a name="t6"></a>方法安全:</h3> <p><strong>即该方法加一个权限,明确该方法是什么角色可以调用的.</strong></p> <p><strong>开发者也可以通过注解来灵活地配置方法安全，要 使用相关注解，首先要通过＠EnableGloba!MethodSecurity 注解开启基于注解的安全配置：</strong><br> &nbsp;</p> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln" style="width:1047px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@Configuration</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">//用于解锁注解。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true,securedEnabled = true)</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiHttpSecurityConfig</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Bean</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Autowired</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        auth.inMemoryAuthentication()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .withUser(<span class="hljs-string">"javaboy"</span>).password(<span class="hljs-string">"$2a$10$G3kVAJHvmRrr6sOj.j4xpO2Dsxl5EG8rHycPHFWyi9UMIhtdSH15u"</span>).roles(<span class="hljs-string">"admin"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .withUser(<span class="hljs-string">"江南一点雨"</span>).password(<span class="hljs-string">"$2a$10$kWjG2GxWhm/2tN2ZBpi7bexXjUneIKFxIAaMYJzY7WcziZLCD4PZS"</span>).roles(<span class="hljs-string">"user"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Configuration</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Order(1)</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            http.antMatcher(<span class="hljs-string">"/admin/**"</span>).authorizeRequests().anyRequest().hasAnyRole(<span class="hljs-string">"admin"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Configuration</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            http.authorizeRequests().anyRequest().authenticated()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .formLogin()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .loginProcessingUrl(<span class="hljs-string">"/doLogin"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .permitAll()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .and()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    .csrf().disable();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <p>&nbsp;</p> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">package</span> com.liruilong.securityl.demo.service;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.access.annotation.Secured;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/12/24 17:31</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@Service</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">userservlce</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">//</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@PreAuthorize("hasRole('admin')")</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">admin</span><span class="hljs-params">()</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello admin"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Secured("ROLB_user")</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">users</span><span class="hljs-params">()</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello user"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@PreAuthorize("hasAnyRole('admin','user')")</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello hello"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <p>代码解释： •</p> <ul><li><strong>@Secured(”ROLE_ AD MIN＂）注解表示访问该方法需要 ADMIN 角色，注意这里需要在角色前加一个前缀“ROLE ’</strong></li><li><strong>@PreAuthorize（”hasRole（’AD MIN’） and hasRole('DBA＇）”）注解表示访问该方法既需妥 ADMIN 角色又需要 DBA 角色。 •</strong></li><li><strong>@PreAuthorize("hasAnyRole（’ADMIN','DBA','USER’）”）表示访问该方法需要 ADMIN、 DBA 或 USER 角色。 </strong></li><li><strong>•@PreAuthorize 和＠PostAuthorize 中都可以使用基于表达式的语法。</strong></li></ul><h1><a name="t7"></a><a name="t7"></a>基于数据库的认证</h1> <h3><a name="t8"></a><a name="t8"></a>动态配置权限</h3> <ul><li><strong>配置自定义权限拦截withObjectPostProcessor</strong>   <ul><li><img alt="" height="319" src="https://img-blog.csdnimg.cn/20200216114348376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" width="1200"></li></ul></li><li><strong>定义自定义拦截逻辑,获取有当前访问路径权限的所有角色,返回角色数组.</strong>   <ul><li><strong>通过FilterlnvocationSecurityMetadataSource 接口中的 getAttributes 方法来确定一个请求需要哪些角色</strong></li><li><img alt="" height="765" src="https://img-blog.csdnimg.cn/20200216114755243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" width="961"></li></ul></li><li><strong>自定义角色比对之后的逻辑.判断当前用户是否有访问角色.的权利,</strong>   <ul><li><strong><span style="color:#f33b45;">自定义 AccessDecisionManager 并重写 decide 方法，decide有三个参数,当前登录用户的信息,请求对象,上一个getAttribute返回的角色数组.</span></strong></li><li><img alt="" height="625" src="https://img-blog.csdnimg.cn/20200216124415775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" width="979"></li></ul></li></ul><h1><a name="t9"></a><img alt="" class="has" height="208" src="https://img-blog.csdnimg.cn/20200213122344351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" width="705"><br><img alt="" class="has" height="518" src="https://img-blog.csdnimg.cn/20200213121307187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" width="1200"></h1> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln hundred"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">package</span> com.liruilong.hros.model;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JacksonInject;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreType;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.util.ArrayList;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.util.Collection;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.util.List;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetails</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> Integer id;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> String name;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> String phone;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> String telephone;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> String address;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> Boolean enabled;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> String username;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> String password;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> String userface;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> String remark;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> id;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.id = id;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> name;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.name = name == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : name.trim();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPhone</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> phone;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPhone</span><span class="hljs-params">(String phone)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.phone = phone == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : phone.trim();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTelephone</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> telephone;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTelephone</span><span class="hljs-params">(String telephone)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.telephone = telephone == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : telephone.trim();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="68"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> address;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.address = address == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : address.trim();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="78"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="79"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="80"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEnabled</span><span class="hljs-params">(Boolean enabled)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.enabled = enabled;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="82"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="83"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="84"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="85"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="86"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> username;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="87"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="88"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="89"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.username = username == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : username.trim();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="90"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="91"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="92"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="93"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="94"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> password;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="95"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="96"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="97"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="98"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.password = password == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : password.trim();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="99"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="100"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="101"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserface</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="102"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> userface;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="103"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="104"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="105"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserface</span><span class="hljs-params">(String userface)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="106"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.userface = userface == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : userface.trim();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="107"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="108"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="109"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRemark</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="110"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> remark;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="111"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="112"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="113"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRemark</span><span class="hljs-params">(String remark)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="114"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.remark = remark == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : remark.trim();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="115"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="116"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="117"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="118"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonExpired</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="119"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="120"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="121"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="122"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="123"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonLocked</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="124"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="125"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="126"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="127"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="128"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCredentialsNonExpired</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="129"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="130"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="131"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="132"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="133"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEnabled</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="134"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> enabled;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="135"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="136"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="137"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="138"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="139"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@JsonIgnore</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="140"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="141"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      List&lt;SimpleGrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(roles.size());</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="142"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      roles.stream().forEach( (role) -&gt;authorities.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(role.getName())));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="143"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> authorities;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="144"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="145"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="146"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getRoles</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="147"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> roles;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="148"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="149"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="150"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoles</span><span class="hljs-params">(List&lt;Role&gt; roles)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="151"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">this</span>.roles = roles;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="152"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="153"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <p><img alt="" height="269" src="https://img-blog.csdnimg.cn/20200216112457918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" width="777"></p> <p><strong>要实现动态配置权限，首先要自定义 FilterlnvocationSecurityMetadataSource,<span style="color:#f33b45;">自定义权限拦截,获取当前请求的所有角色</span></strong>,<strong> Spring Security 中通过 FilterlnvocationSecurityMetadataSource 接口中的 getAttributes 方法来确定一个请求需要哪些 角色， FilterlnvocationSecurityMetadataSource 接口的默认实现类是 DefaultFilterlnvocationSecurityMetadataSource ，参考 DefaultFilterlnvocationSecurityMetadataSource 的实现，开发者可以定义自己的 FilterlnvocationSecurityMetadataSource，</strong></p> <p><strong><code>SecurityMetadataSource</code>是<code>Spring Security</code>的一个概念模型接口。用于表示对受权限保护的"安全对象"的权限设置信息。一个该类对象可以被理解成一个映射表，映射表中的每一项包含如下信息 :</strong></p> <ul><li><strong>安全对象</strong></li><li><strong>安全对象所需权限信息</strong></li></ul><p><strong>围绕该映射表，</strong></p> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">package</span> com.liruilong.hros.config;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.liruilong.hros.mapper.MenuMapper;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.liruilong.hros.model.Menu;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.liruilong.hros.model.Role;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.liruilong.hros.service.MenuService;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.access.ConfigAttribute;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.access.SecurityConfig;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.web.FilterInvocation;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.util.AntPathMatcher;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.util.Collection;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.util.List;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 权限处理,根据请求,分析需要的角色,该类的主要功能就是通过当前的请求地址，获取该地址需要的用户角色</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/12/24 12:17</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@Component</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomFilterInvocationSecurityMetadataSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FilterInvocationSecurityMetadataSource</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Autowired</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    MenuService menuService;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">//路径比较工具</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    AntPathMatcher antPathMatcher = <span class="hljs-keyword">new</span> AntPathMatcher();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Collection&lt;org.springframework.security.access.ConfigAttribute&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> 当前请求需要的角色</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 18:13 2019/12/24</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [object]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     **/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="hljs-title">getAttributes</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//获取当前请求路径</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String requestUrl = ((FilterInvocation) object).getRequestUrl();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//获取所有的菜单url路径</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        List&lt;Menu&gt; menus = menuService.getAllMenusWithRole();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">for</span> (Menu menu : menus) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span> (antPathMatcher.match(menu.getUrl(), requestUrl)) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">//拥有当前菜单权限的角色</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                List&lt;Role&gt; roles = menu.getRoles();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                String[] strings = <span class="hljs-keyword">new</span> String[roles.size()];</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; roles.size(); i++) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    strings[i] = roles.get(i).getName();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">return</span> SecurityConfig.createList(strings);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">// 没匹配上的资源都是登录</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> SecurityConfig.createList(<span class="hljs-string">"ROLE_LOGIN"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="hljs-title">getAllConfigAttributes</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <h3><a name="t10"></a><a name="t10"></a><strong>&nbsp;开发者自定义 FilterlnvocationSecurityrMetadataSource</strong>&nbsp;:</h3> <p><span style="color:#f33b45;"><strong>主要实现该接口中的 getAttributes 方法， 该方法的参数是一个 FilterInvocation， 开发者可以从 Filterlnvocation 中提取出当前请求的 URL，返回值是 Collection&lt;ConfigAttribute&gt;，表示当前请求 URL 所需的角色</strong></span>。</p> <ul><li>创建一个 AntPathMatcher，主要用来实现 ant 风格的 URL 匹配。</li><li>从参数中提取出当前请求的 URL。</li><li>从数据库中获取所有的资源信息，即本案例中的 menu 表以及 menu 所对应的 role,</li><li>追历资源信息，边历过程中获取当前请求的 URL 所需要的角色信息并返回。如 果当前请求的 URL 在资源表中不存在相应的模式，就假设该请求登录后即可访问，即直接返代码解释：&nbsp;ROLE LOGJN。</li><li>getAllConfigAttributes 方法用来返回所有定义好的权限资源， Spring Security 在启动时会校验 相关配置是否正确，如果不需要校验，那么该方法直接返回 null 即可。 supports 方法返回类对象是否支持校验。&nbsp;</li></ul><h3><a name="t11"></a><a name="t11"></a>&nbsp;自定义 AccessDecisionManager</h3> <p><span style="color:#f33b45;"><strong>当一个请求走完 FilterlnvocationSecurityMetadataSource 中的 getAttributes 方法后，接下来就会 来到 AccessDecisionManager 类中进行角色信息的比对，自定义 AccessDecisionManager 如下：</strong></span><br> &nbsp;</p> <div class="code-wrapper"><pre class="has" name="code"><code class="language-java hljs"><ol class="hljs-ln" style="width:1483px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">package</span> com.liruilong.hros.config;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.access.AccessDecisionManager;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.access.AccessDeniedException;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.access.ConfigAttribute;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.authentication.AnonymousAuthenticationToken;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.authentication.InsufficientAuthenticationException;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.util.Collection;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 判断当前用户是否具备菜单访问，当一个请求走完 FilterlnvocationSecurityMetadataSource 中的 getAttributes 方法后，接下来就会 来到 AccessDecisionManager 类中进行角色信息的比对</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/12/24 19:12</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@Component</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomUrlDecisionManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccessDecisionManager</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> decide 方法有三个参数， 第一个参数包含当前登录用户的信息；</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * 第二个参数则是一个 Filterlnvocation 对 象 ，可以 获 取当前请求对 象等；</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * 第 三个参 数就是 FilterlnvocationSecurityMetadataSource 中的 getAttributes 方法的返回值， 即当前请求 URL 所 需要的角色。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 18:28 2020/2/13</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [authentication, object, configAttributes]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     **/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decide</span><span class="hljs-params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">for</span> (ConfigAttribute configAttribute : configAttributes) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            String needRole = configAttribute.getAttribute();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span> (<span class="hljs-string">"ROLE_LOGIN"</span>.equals(needRole)) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">//判断用户是否登录</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">if</span> (authentication <span class="hljs-keyword">instanceof</span> AnonymousAuthenticationToken) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AccessDeniedException(<span class="hljs-string">"尚未登录，请登录!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125; <span class="hljs-keyword">else</span> &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-keyword">return</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">if</span> (authority.getAuthority().equals(needRole)) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-keyword">return</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AccessDeniedException(<span class="hljs-string">"权限不足，请联系管理员!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">supports</span><span class="hljs-params">(ConfigAttribute attribute)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">// authorities.stream().anyMatch((authority) -&gt;authority.getAuthority().equals(attribute));</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <p><strong><span style="color:#f33b45;">自定义 AccessDecisionManager 并重写 decide 方法，</span></strong></p> <p><strong>在该方法中判断当前登录的用户是否具 备当前请求 URL 所需要的角色信息，如果不具备，就抛出 AccessDeniedException 异常，否 则不做任何事即可。 </strong></p> <p><span style="color:#f33b45;"><strong>decide 方法有三个参数，</strong></span></p> <p><span style="color:#f33b45;"><strong>第一个参数包含当前登录用户的信息；</strong></span></p> <p><span style="color:#f33b45;"><strong>第二个参数则是一个 Filterlnvocation 对 象 ，可以 获 取当前请求对 象等；</strong></span></p> <p><span style="color:#f33b45;"><strong>第 三个参 数就是 FilterlnvocationSecurityMetadataSource 中的 getAttributes 方法的返回值， 即当前请求 URL 所 需要的角色。</strong></span></p> <p><strong>进行角色信息对比，如果需要的角色是 ROLE_LOG，说明当前请求的 URL 用 户登录后即可访问，如果 auth 是 UsemamePasswordAuthenticationToken 的实例，那么说明当前用户已登录，该方法到此结束，否则进入正常的判断流程，如果当前用户具备当前请求需 要的角色，那么方法结束。</strong></p> <p><strong>springSecurity配置流程分析:</strong></p> <p><img alt="" height="819" src="https://img-blog.csdnimg.cn/20200216171913215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" width="1009"></p> <p><img alt="" height="589" src="https://img-blog.csdnimg.cn/20200216171937340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Nhbmhld3V5YW5n,size_16,color_FFFFFF,t_70" width="671"></p> <div class="code-wrapper"><pre><code class="language-java hljs"><ol class="hljs-ln hundred" style="width:1658px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">package</span> com.liruilong.hros.config;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.liruilong.hros.filter.VerifyCodeFilter;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.liruilong.hros.model.Hr;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.liruilong.hros.model.RespBean;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.liruilong.hros.service.HrService;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.authentication.*;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.ObjectPostProcessor;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.web.access.intercept.FilterSecurityInterceptor;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> javax.servlet.ServletException;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.io.IOException;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.io.PrintWriter;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/12/18 19:11</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">@Configuration</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Autowired</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    HrService hrService;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Autowired</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    CustomFilterInvocationSecurityMetadataSource customFilterInvocationSecurityMetadataSource;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Autowired</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    CustomUrlDecisionManager customUrlDecisionManager;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">     <span class="hljs-meta">@Autowired</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    VerifyCodeFilter verifyCodeFilter ;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Autowired</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    MyAuthenticationFailureHandler myAuthenticationFailureHandler;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        http.addFilterBefore(verifyCodeFilter, UsernamePasswordAuthenticationFilter.class)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .authorizeRequests()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                //.anyRequest().authenticated()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                //所有请求的都会经过这进行鉴权处理。返回当前请求需要的角色。</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .withObjectPostProcessor(<span class="hljs-keyword">new</span> ObjectPostProcessor&lt;FilterSecurityInterceptor&gt;() &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-keyword">public</span> &lt;O extends FilterSecurityInterceptor&gt; <span class="hljs-function">O <span class="hljs-title">postProcess</span><span class="hljs-params">(O object)</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        object.setSecurityMetadataSource(customFilterInvocationSecurityMetadataSource);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        object.setAccessDecisionManager(customUrlDecisionManager);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">return</span> object;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .and().formLogin().usernameParameter(<span class="hljs-string">"username"</span>).passwordParameter(<span class="hljs-string">"password"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">//设置登录请求的url路径</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="68"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .loginProcessingUrl(<span class="hljs-string">"/doLogin"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment"><span class="hljs-comment">/*需要身份验证时，将浏览器重定向到/ login</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">                我们负责在请求/ login时呈现登录页面</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">                当身份验证尝试失败时，将浏览器重定向到/ login？error（因为我们没有另外指定）</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">                当请求/ login？error时，我们负责呈现失败页面</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">                成功注销后，将浏览器重定向到/ login？logout（因为我们没有另外指定）</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">                我们负责在请求/ login？logout时呈现注销确认页面*/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .loginPage(<span class="hljs-string">"/login"</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">//登录成功回调</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .successHandler(<span class="hljs-keyword">new</span> AuthenticationSuccessHandler() &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="78"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="79"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="80"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        httpServletResponse.setContentType(<span class="hljs-string">"application/json;charset=utf-8"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        PrintWriter out = httpServletResponse.getWriter();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="82"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        Hr hr = (Hr) authentication.getPrincipal();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="83"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">//密码不回传</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="84"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        hr.setPassword(<span class="hljs-keyword">null</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="85"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        RespBean ok = RespBean.ok(<span class="hljs-string">"登录成功！"</span>, hr);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="86"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">//将hr转化为Sting</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="87"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        String s = <span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(ok);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="88"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.write(s);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="89"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.flush();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="90"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.close();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="91"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="92"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="93"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">//登失败回调</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="94"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .failureHandler(myAuthenticationFailureHandler)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="95"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">//相关的接口直接返回</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="96"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .permitAll().and().logout()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="97"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">//注销登录</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="98"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .logoutSuccessHandler(<span class="hljs-keyword">new</span> LogoutSuccessHandler() &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="99"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="100"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onLogoutSuccess</span><span class="hljs-params"><span class="hljs-params">(HttpServletRequest httpServletRequest,</span></span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="101"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">                                                HttpServletResponse httpServletResponse,</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="102"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">                                                Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="103"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        httpServletResponse.setContentType(<span class="hljs-string">"application/json;charset=utf-8"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="104"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        PrintWriter out = httpServletResponse.getWriter();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="105"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.write(<span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(RespBean.ok(<span class="hljs-string">"注销成功!"</span>)));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="106"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.flush();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="107"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.close();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="108"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="109"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="110"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .permitAll().and().csrf().disable().exceptionHandling()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="111"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">//没有认证时，在这里处理结果，不要重定向</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="112"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                .authenticationEntryPoint(</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="113"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">//myAuthenticationEntryPoint;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="114"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">new</span> AuthenticationEntryPoint() &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="115"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="116"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commence</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp, AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="117"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        resp.setContentType(<span class="hljs-string">"application/json;charset=utf-8"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="118"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        resp.setStatus(<span class="hljs-number">401</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="119"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        PrintWriter out = resp.getWriter();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="120"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        RespBean respBean = RespBean.error(<span class="hljs-string">"访问失败!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="121"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">if</span> (authException <span class="hljs-keyword">instanceof</span> InsufficientAuthenticationException) &#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="122"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            respBean.setMsg(<span class="hljs-string">"请求失败，请联系管理员!"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="123"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="124"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.write(<span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(respBean));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="125"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.flush();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="126"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        out.close();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="127"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="128"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                &#125;);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="129"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="130"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Bean</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="131"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span> </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="132"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="133"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="134"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="135"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="136"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        auth.userDetailsService(hrService);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="137"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="138"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="139"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> Liruilong</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="140"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>  放行的请求路径</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="141"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 19:25 2020/2/7</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="142"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [web]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="143"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="144"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     **/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="145"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">@Override</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="146"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="147"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        web.ignoring().antMatchers(<span class="hljs-string">"/auth/code"</span>,<span class="hljs-string">"/login"</span>,<span class="hljs-string">"/css/**"</span>,<span class="hljs-string">"/js/**"</span>, <span class="hljs-string">"/index.html"</span>, <span class="hljs-string">"/img/**"</span>, <span class="hljs-string">"/fonts/**"</span>,<span class="hljs-string">"/favicon.ico"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="148"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    &#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="149"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&#125;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="150"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="151"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre></div> <p>SpringSecurity执行流程分析:</p> <p><img alt="" src="https://img-blog.csdn.net/20180318211512445?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3UwMTM0MzU4OTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p> <p>UsernamePasswordAuthenticationFilter就是拦截我们通过表单提交接口提交的用户名和密码，如果是Basic提交的话，就会被BasicAuthenticationFilter拦截，最后的橙色FilterSecurityInterceptor是首先判断我们当前请求的url是否需要认证，如果需要认证，那么就看当前请求是否已经认证，是的话就放行到我们要访问的接口，否则重定向到认证页面。<br> &nbsp;</p> <p>UsernamePasswordAuthenticationFilter首先会拦截请求，而UsernamePasswordAuthenticationFilter是继承于AbstractAuthenticationProcessingFilter的，在这个抽象类中已经定义好了doFilter的方法，而里面有一个attemptAuthentication方法是由子类实现的。所以当提交表单时spring security会发现这个一个表单提交，然后就调用了UsernamePasswordAuthenticationFilter的doFilter方法</p> <p>springSecurity其实就是一组过滤器，请求和响应都会经过这些过滤器，在系统启动的时候，spring boot会自动配上</p> <p>黄色：已经存储的认证信息</p> <p>绿色：处理用户身份认证</p> <p>橙色：捕获黄色抛出的异常</p> <p>蓝色：决定当前请求是否通过之前某个过滤器的身份认证，不能通过就抛出异常，通过了会帮我们直接跳转</p> <p><img alt="" src="https://img-blog.csdnimg.cn/20191205165135360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW5kZWFpNTIw,size_16,color_FFFFFF,t_70"></p> <p>&nbsp;</p> <p>它的身份认证其实是始于访问资源开始。如果一个用户已登录，那么访问受保护的资源，则会校验该用户是否有权限访问。如果没有权限，则会调用权限拒绝的处理器进行处理。如果有权限，则能顺利访问该资源；</p> <p>一个用户未登录情况下，也即匿名用户，访问受保护的资源时，spring security会首先检查该资源是否需要权限，如果需要权限，然后再检查，该资源是否是白名单里面。如果是白名单，也能正常访问。如果是受保护的资源，则会提示该用户需要登录。<br> &nbsp;</p> <p>&nbsp;</p> <p>感觉学的不大好.....</p>                </div><div data-report-view="{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/sanhewuyang/article/details/103681432&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}"><div></div></div>        </div>    </article>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springhttps</title>
    <link href="/2020/05/30/spring%20https/"/>
    <url>/2020/05/30/spring%20https/</url>
    
    <content type="html"><![CDATA[<h3 id="springHttps-的转发-自动将http浏览器默认80端口转发至https-443或自定义端口"><a href="#springHttps-的转发-自动将http浏览器默认80端口转发至https-443或自定义端口" class="headerlink" title="springHttps 的转发,自动将http浏览器默认80端口转发至https 443或自定义端口"></a>springHttps 的转发,自动将http浏览器默认80端口转发至https 443或自定义端口</h3><h4 id="1-获取证书"><a href="#1-获取证书" class="headerlink" title="1. 获取证书"></a>1. 获取证书</h4><ul><li><p>首先在需要生成证书页面进入控制台命令,输入</p></li><li><h4 id="keytool命令，keytool-genkey-alias-ccc-keyalg-RSA-validity-36500-keystore-server-keystore"><a href="#keytool命令，keytool-genkey-alias-ccc-keyalg-RSA-validity-36500-keystore-server-keystore" class="headerlink" title="keytool命令，keytool -genkey -alias ccc -keyalg RSA -validity 36500 -keystore server.keystore"></a>keytool命令，keytool -genkey -alias ccc -keyalg RSA -validity 36500 -keystore server.keystore</h4><p><img src="/img/keystore1.jpg"></p></li><li><p>然后输入密钥 ps: 一定要记住</p><p><img src="/img/keystore2.jpg"></p></li><li><p>随意输入相应信息,最后会在相应目录生成 server.keystore 文件</p><p><img src="/img/keystore3.jpg"></p></li></ul><h4 id="2-spring配置"><a href="#2-spring配置" class="headerlink" title="2. spring配置"></a>2. spring配置</h4><ul><li>新建spring配置文件注解@Configuration</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 配置 http(80) -> 强制跳转到 https(443)     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Connector</span> <span class="token function">connector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connector</span> connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token string">"org.apache.coyote.http11.Http11NioProtocol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setScheme</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setSecure</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setRedirectPort</span><span class="token punctuation">(</span><span class="token number">443</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connector<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TomcatServletWebServerFactory</span> <span class="token function">tomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token class-name">Connector</span> connector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TomcatServletWebServerFactory</span> tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcessContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">SecurityConstraint</span> securityConstraint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityConstraint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                securityConstraint<span class="token punctuation">.</span><span class="token function">setUserConstraint</span><span class="token punctuation">(</span><span class="token string">"CONFIDENTIAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SecurityCollection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                securityConstraint<span class="token punctuation">.</span><span class="token function">addCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">addConstraint</span><span class="token punctuation">(</span>securityConstraint<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">addAdditionalTomcatConnectors</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tomcat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><ul><li>将server.keystore放至resource目录下</li><li>编写配置文件</li></ul><div class="code-wrapper"><pre class="language-yml" data-language="yml"><code class="language-yml">server:  ssl:    # 证书路径    key-store: classpath:server.keystore    key-alias: tomcat    enabled: true    key-store-type: JKS    #与申请时输入一致    key-store-password: 123456    # 浏览器默认端口 和 80 类似  port: 443</code></pre></div><h3 id="启动项目-访问80就会自动跳转433端口了-若提示443端口被占用可修改相应端口号"><a href="#启动项目-访问80就会自动跳转433端口了-若提示443端口被占用可修改相应端口号" class="headerlink" title="启动项目,访问80就会自动跳转433端口了 ,若提示443端口被占用可修改相应端口号"></a>启动项目,访问80就会自动跳转433端口了 ,若提示443端口被占用可修改相应端口号</h3>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>https</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaCV调用</title>
    <link href="/2020/05/29/javacv/"/>
    <url>/2020/05/29/javacv/</url>
    
    <content type="html"><![CDATA[<h3 id="JavaCV调用摄像-javacv-包含了opencv-ffmpeg-等图像处理包-使用javacpp-转为C-文件后执行"><a href="#JavaCV调用摄像-javacv-包含了opencv-ffmpeg-等图像处理包-使用javacpp-转为C-文件后执行" class="headerlink" title="JavaCV调用摄像, javacv 包含了opencv ,ffmpeg 等图像处理包 使用javacpp 转为C 文件后执行"></a>JavaCV调用摄像, javacv 包含了opencv ,ffmpeg 等图像处理包 使用javacpp 转为C 文件后执行</h3><ol><li>首先需要引入依赖，当然，也可以使用Jar包，推荐使用maven管理</li></ol><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.bytedeco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javacpp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- javacv --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.bytedeco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javacv<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.bytedeco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javacv-platform<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- opencv --></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.bytedeco/opencv --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.bytedeco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>opencv<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.0-1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><ol start="2"><li>开始测试<ul><li>首先测试获取摄像</li></ul></li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 预览摄像    * 本机摄像头默认0，这里使用javacv的抓取器，至于使用的是ffmpeg还是opencv，请自行查看源码    *    * @param number    * @throws Exception    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getScreenshots</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> number<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">OpenCVFrameGrabber</span> grabber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenCVFrameGrabber</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>       grabber<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开始获取摄像头数据</span>       <span class="token class-name">CanvasFrame</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanvasFrame</span><span class="token punctuation">(</span><span class="token string">"摄像头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 新建一个窗口</span>       canvas<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>       canvas<span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canvas<span class="token punctuation">.</span><span class="token function">isDisplayable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               grabber<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 停止抓取</span>               <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 退出</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           canvas<span class="token punctuation">.</span><span class="token function">showImage</span><span class="token punctuation">(</span>grabber<span class="token punctuation">.</span><span class="token function">grab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 获取摄像头图像并放到窗口上显示， 这里的Frame frame=grabber.grab(); frame是一帧视频图像</span>           <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 50毫秒刷新一次图像</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre></div><ol start="3"><li>视频录制</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 按帧录制本机摄像头视频（边预览边录制，停止预览即停止录制）     *     * @author eguid     * @param outputFile -录制的文件路径，也可以是rtsp或者rtmp等流媒体服务器发布地址     * @param frameRate - 视频帧率     * @throws Exception     * @throws InterruptedException     * @throws org.bytedeco.javacv.FrameRecorder.Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recordCamera</span><span class="token punctuation">(</span><span class="token class-name">String</span> outputFile<span class="token punctuation">,</span> <span class="token keyword">double</span> frameRate<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Loader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>opencv_objdetect<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FrameGrabber</span> grabber <span class="token operator">=</span> <span class="token class-name">FrameGrabber</span><span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 本机摄像头默认0，这里使用javacv的抓取器，至于使用的是ffmpeg还是opencv，请自行查看源码</span>        grabber<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 转换器</span>        <span class="token class-name">IplImage</span> grabbedImage <span class="token operator">=</span> <span class="token class-name">JavaCvUtils</span><span class="token punctuation">.</span>converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>grabber<span class="token punctuation">.</span><span class="token function">grab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 抓取一帧视频并将其转换为图像，至于用这个图像用来做什么？加水印，人脸识别等等自行添加</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> grabbedImage<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> grabbedImage<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FrameRecorder</span> recorder <span class="token operator">=</span> <span class="token class-name">FrameRecorder</span><span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        recorder<span class="token punctuation">.</span><span class="token function">setVideoCodec</span><span class="token punctuation">(</span>avcodec<span class="token punctuation">.</span>AV_CODEC_ID_H264<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// avcodec.AV_CODEC_ID_H264，编码</span>        recorder<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token string">"flv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 封装格式，如果是推送到rtmp就必须是flv封装格式</span>        recorder<span class="token punctuation">.</span><span class="token function">setFrameRate</span><span class="token punctuation">(</span>frameRate<span class="token punctuation">)</span><span class="token punctuation">;</span>        recorder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开启录制器</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> videoTS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">CanvasFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanvasFrame</span><span class="token punctuation">(</span><span class="token string">"camera"</span><span class="token punctuation">,</span> <span class="token class-name">CanvasFrame</span><span class="token punctuation">.</span><span class="token function">getDefaultGamma</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> grabber<span class="token punctuation">.</span><span class="token function">getGamma</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setAlwaysOnTop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 不知道为什么这里不做转换就不能推到rtmp</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>grabbedImage <span class="token operator">=</span> <span class="token class-name">JavaCvUtils</span><span class="token punctuation">.</span>converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>grabber<span class="token punctuation">.</span><span class="token function">grab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Frame</span> rotatedFrame <span class="token operator">=</span> <span class="token class-name">JavaCvUtils</span><span class="token punctuation">.</span>converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>grabbedImage<span class="token punctuation">)</span><span class="token punctuation">;</span>            frame<span class="token punctuation">.</span><span class="token function">showImage</span><span class="token punctuation">(</span>rotatedFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>startTime <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            videoTS <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            recorder<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span>videoTS<span class="token punctuation">)</span><span class="token punctuation">;</span>            recorder<span class="token punctuation">.</span><span class="token keyword">record</span><span class="token punctuation">(</span>rotatedFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        frame<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recorder<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recorder<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        grabber<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>javacv</category>
      
    </categories>
    
    
    <tags>
      
      <tag>video</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DateUtils方法</title>
    <link href="/2020/05/18/date%20utils/"/>
    <url>/2020/05/18/date%20utils/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">     <span class="token comment">/**     * 以秒为标准时间的毫秒数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> MILLIS_PER_SECOND <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token comment">/**     *以分钟为标准时间的毫秒数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> MILLIS_PER_MINUTE <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> MILLIS_PER_SECOND    <span class="token comment">/**     *以小时为标准时间的毫秒数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> MILLIS_PER_HOUR <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> MILLIS_PER_MINUTE    <span class="token comment">/**     * 以天为标准时间的毫秒数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> MILLIS_PER_DAY <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> MILLIS_PER_HOUR    <span class="token comment">/**     * 这个类型是半个月， 所以这可以代表日期是上还是下半个月 。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SEMI_MONTH <span class="token operator">=</span> <span class="token number">1001</span>    <span class="token comment">/**     * 周范围， 从星期日开始 。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RANGE_WEEK_SUNDAY <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment">/**     * 周范围，从星期一开始 。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RANGE_WEEK_MONDAY <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment">/**     * 周范围，从关注的那天开始。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RANGE_WEEK_RELATIVE <span class="token operator">=</span> <span class="token number">3</span>    <span class="token comment">/**     * 周范围，以关注的天为中心。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RANGE_WEEK_CENTER <span class="token operator">=</span> <span class="token number">4</span>     <span class="token comment">/**     * 月范围，从星期日开始 。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RANGE_MONTH_SUNDAY <span class="token operator">=</span> <span class="token number">5</span>    <span class="token comment">/**     * 月范围，从星期一开始 。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RANGE_MONTH_MONDAY <span class="token operator">=</span> <span class="token number">6</span>     <span class="token comment">/**     * 不应在标准编成构造获取实列， 而应该直接使用类中的静态方法，如：DateUtils.parseDate(str) 。     * 此构造函数意在允许需要一个javabeen实列的工具中使用 。       */</span>    <span class="token keyword">public</span> <span class="token class-name">DateUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">/**     * 判断两个日期时间是否是同一天 。     *     * @param date1  第一个日期，不可修改，非null     * @param date2  第二个日期，不可修改，非null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSameDay</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date1<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Date</span> date2<span class="token punctuation">)</span>    <span class="token comment">/**     * 判断两个日历时间是否是同一天 。        *     * @param cal1  第一个日历，不可修改，非null     * @param cal2  第二个日历，不可修改，非null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSameDay</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> cal1<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Calendar</span> cal2<span class="token punctuation">)</span>    <span class="token comment">/**     * 判断两个日期是否相同     * 这种方法比较两个对象的毫秒时间      *     * @param date1  第一个日期，不可修改，非null     * @param date2  第二个日期，不可修改，非null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSameInstant</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date1<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Date</span> date2<span class="token punctuation">)</span>    <span class="token comment">/**     * 判断两个日历是否相同     * 这种方法比较两个对象的毫秒时间      *     * @param cal1  第一个日历，不可修改，非null     * @param cal2  第二个日历，不可修改，非null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSameInstant</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> cal1<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Calendar</span> cal2<span class="token punctuation">)</span>    <span class="token comment">/**     * 判断两个日历本地时间是否相同     * 除了比较数值外两个日历对象的类型还要相同     *     * @param cal1  第一个日历，不可修改，非null     * @param cal2  第二个日历，不可修改，非null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSameLocalTime</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> cal1<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Calendar</span> cal2<span class="token punctuation">)</span>    <span class="token comment">/**     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。     *      * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。     *      * @param str  被解析的时间字符串，非null     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">parseDate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parsePatterns<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span>    <span class="token comment">/**     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。     * 解析时会使用给定的日期格式符locale 。     *      * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。     *      * @param str  被解析的时间字符串，非null     * @param locale 使用locale中的日期格式符，如果为null，则使用系统默认的locale     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">parseDate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parsePatterns<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span>    <span class="token comment">/**     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。     *     * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。     * 解析器解析严格不允许的日期， 如："February 942, 1996" 。     *      * @param str  被解析的时间字符串，非null     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">parseDateStrictly</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parsePatterns<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span>    <span class="token comment">/**     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。     * 解析时会使用给定的日期格式符locale 。     *     * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。     * 解析器解析严格不允许的日期， 如："February 942, 1996" 。     *      * @param str  被解析的时间字符串，非null     * @param locale 使用locale中的日期格式符，如果为null，则使用系统默认的locale     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">parseDateStrictly</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parsePatterns<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span>    <span class="token comment">/**     * 在日期date上增加amount年 。     *     * @param date  处理的日期，非null     * @param amount  要加的年数，可能为负数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">addYears</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 在日期date上增加amount月 。     *     * @param date  处理的日期，非null     * @param amount  要加的月数，可能为负数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 在日期date上增加amount周 。     *     * @param date  处理的日期，非null     * @param amount  要加的周数，可能为负数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">addWeeks</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 在日期date上增加amount天 。     *     * @param date  处理的日期，非null     * @param amount  要加的天数，可能为负数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">addDays</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 在日期date上增加amount小时 。     *     * @param date  处理的日期，非null     * @param amount  要加的小时数，可能为负数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">addHours</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 在日期date上增加amount分钟 。     *     * @param date  处理的日期，非null     * @param amount  要加的分钟数，可能为负数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">addMinutes</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 在日期date上增加amount秒 。     *     * @param date  处理的日期，非null     * @param amount  要加的秒数，可能为负数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">addSeconds</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 在日期date上增加amount 毫秒 。     *     * @param date  处理的日期，非null     * @param amount  要加的毫秒数，可能为负数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">addMilliseconds</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>     <span class="token comment">/**     * 给日期data设置一个新的年份 。     *     * @param date 处理的日期，非null     * @param amount 要设置的年份     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">setYears</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>     <span class="token comment">/**     * 给日期data设置一个新的月份 。     *     * @param date 处理的日期，非null     * @param amount 要设置的月份     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">setMonths</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 给日期data设置一个新的天 。     *     * @param date 处理的日期，非null     * @param amount 要设置的天     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">setDays</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 给日期data设置一个新的小时 。     *     * @param date 处理的日期，非null     * @param amount 要设置的小时     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">setHours</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>     <span class="token comment">/**     * 给日期data设置一个新的分钟 。     *     * @param date 处理的日期，非null     * @param amount 要设置的分钟     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">setMinutes</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 给日期data设置一个新的秒 。     *     * @param date 处理的日期，非null     * @param amount 要设置的秒     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">setSeconds</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 给日期data设置一个新的毫秒 。     *     * @param date 处理的日期，非null     * @param amount 要设置的毫秒     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">setMilliseconds</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span>    <span class="token comment">/**     * 将一个日期放到日历中 。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Calendar</span> <span class="token function">toCalendar</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据阈值field四舍五入日历date 。     *     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；     * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。     *      * @param date  处理的日期，非null     * @param field  阈值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据阈值field四舍五入日历date 。     *     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；     * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。     *      * @param date  处理的日期，非null     * @param field  阈值       */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Calendar</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据阈值field四舍五入日历date 。     *     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；     * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。     *      * @param date  处理的日期，非null     * @param field  阈值      */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据阈值field截取日期date 。     *     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，     * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；     * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。     *      * @param date  处理的日期，非null     * @param field  阈值      */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>     <span class="token comment">/**     * 根据阈值field截取日历date 。     *     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，     * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；     * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。     *      * @param date  处理的日期，非null     * @param field  阈值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Calendar</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据阈值field截取日期date 。     *     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，     * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；     * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。     *      * @param date  处理的日期，非null     * @param field  阈值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据阈值field向上舍入日期date 。     *     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；     * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。     *      * @param date  处理的日期，非null     * @param field  阈值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">ceiling</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据阈值field向上舍入日期date 。     *     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；     * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。     *      * @param date  处理的日期，非null     * @param field  阈值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Calendar</span> <span class="token function">ceiling</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据阈值field向上舍入日期date 。     *     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；     * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。     *      * @param date  处理的日期，非null     * @param field  阈值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">ceiling</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> date<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。     *     * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，     * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002     *     * @param focus  指定的时间     * @param rangeStyle  范围类型，值必须是如下之一：     * DateUtils.RANGE_MONTH_SUNDAY，      * DateUtils.RANGE_MONTH_MONDAY，     * DateUtils.RANGE_WEEK_SUNDAY，     * DateUtils.RANGE_WEEK_MONDAY，     * DateUtils.RANGE_WEEK_RELATIVE，     * DateUtils.RANGE_WEEK_CENTER     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Calendar</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> focus<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> rangeStyle<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。     *     * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，     * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002     *     * @param focus  指定的时间     * @param rangeStyle  范围类型，值必须是如下之一：     * DateUtils.RANGE_MONTH_SUNDAY，      * DateUtils.RANGE_MONTH_MONDAY，     * DateUtils.RANGE_WEEK_SUNDAY，     * DateUtils.RANGE_WEEK_MONDAY，     * DateUtils.RANGE_WEEK_RELATIVE，     * DateUtils.RANGE_WEEK_CENTER     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Calendar</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> focus<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> rangeStyle<span class="token punctuation">)</span>    <span class="token comment">/**     * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。     *     * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，     * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002     *     * @param focus  指定的时间     * @param rangeStyle  范围类型，值必须是iterator(Calendar, int)方法注释中列出的     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> focus<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> rangeStyle<span class="token punctuation">)</span> <span class="token comment">/**     * 返回指定分段内的毫秒数 。 所有大于分段的DateFields将被忽略 。     *     * 请求任何日期毫秒，将返回当前秒的毫秒数 (返回一个数字在0和999之间) 。     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、     * Calendar.SECOND 和 Calendar.MILLISECOND     * 分段值小于或等于MILLISECOND，将返回0 。     *      *  January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538     *  January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538     *  January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0     *   (a millisecond cannot be split in milliseconds)     *      * @param calendar 获取值得日历对象，非null     * @param fragment 分段值     */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getFragmentInMilliseconds</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> calendar<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fragment<span class="token punctuation">)</span>    <span class="token comment">/**     * 返回指定分段内的秒数 。 所有大于分段的DateFields将被忽略 。     *     * 请求任何日期秒，将返回当前的分钟的秒数 (返回一个数字在0和59之间) 。     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、     * Calendar.SECOND 和 Calendar.MILLISECOND     * 分段值小于或等于SECOND，将返回0 。     *      *  January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10     *  January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10     *  January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110     *   (7*3600 + 15*60 + 10)&lt;/li>     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0     *      * @param calendar 获取值得日历对象，非null     * @param fragment 分段值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getFragmentInSeconds</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> calendar<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fragment<span class="token punctuation">)</span>    <span class="token comment">/**     * 返回指定分段内的分钟数 。 所有大于分段的DateFields将被忽略 。     *     * 请求任何日期分钟，将返回当前的小时的分钟数 (返回一个数字在0和59之间)     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、     * Calendar.SECOND 和 Calendar.MILLISECOND     * 分段值小于或等于MINUTE，将返回0 。     *      *  January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15     *  January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15     *  January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15     *  January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0     *      * @param calendar 获取值得日历对象，非null     * @param fragment 分段值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getFragmentInMinutes</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> calendar<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fragment<span class="token punctuation">)</span>    <span class="token comment">/**     * 返回指定分段内的小时数 。 所有大于分段的DateFields将被忽略 。     *     * 请求任何日期小时，将返回当前的天的小时数 (返回一个数字在0和23之间) 。     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、     * Calendar.SECOND 和 Calendar.MILLISECOND     * 分段值小于或等于HOUR_OF_DAY，将返回0 。     *       *  January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7     *  January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7     *  January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7     *  January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0     *       * @param calendar 获取值得日历对象，非null     * @param fragment 分段值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getFragmentInHours</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> calendar<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fragment<span class="token punctuation">)</span>    <span class="token comment">/**     * 返回指定分段内的天数 。 所有大于分段的DateFields将被忽略 。     *     * 请求任何日期天数，将返回当前的月的天数 (返回一个数字在1和31之间) 。     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、     * Calendar.SECOND 和 Calendar.MILLISECOND     * 分段值小于或等于DATE，将返回0 。     *      *  January 28, 2008 with Calendar.MONTH as fragment will return 28     *  February 28, 2008 with Calendar.MONTH as fragment will return 28     *  January 28, 2008 with Calendar.YEAR as fragment will return 28     *  February 28, 2008 with Calendar.YEAR as fragment will return 59     *  January 28, 2008 with Calendar.MILLISECOND as fragment will return 0     *      * @param calendar 获取值得日历对象，非null     * @param fragment 分段值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getFragmentInDays</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> calendar<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> fragment<span class="token punctuation">)</span>    <span class="token comment">/**     * 截取比较两个日历对象的field处的值是否相同 。     *      * @param cal1 第一个日历对象，非null     * @param cal2 第二个日历对象，非null     * @param field Calendar中的阈值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">truncatedEquals</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> cal1<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Calendar</span> cal2<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 截取比较两个日期对象的field处的值是否相同 。     *      * @param date1 第一个日期对象，非null     * @param date2 第二个日期对象，非null     * @param field Calendar中的阈值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">truncatedEquals</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date1<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Date</span> date2<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 截取比较两个日历对象的field处的值 。     * 如果第一个日历小于、等于、大于第二个，则对应返回负整数、0、正整数     *      * @param cal1 第一个日历对象，非null     * @param cal2 第二个日历对象，非null     * @param field Calendar中的阈值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">truncatedCompareTo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Calendar</span> cal1<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Calendar</span> cal2<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span>    <span class="token comment">/**     * 截取比较断两个日期对象的field处的值 。     * 如果第一个日期小于、等于、大于第二个，则对应返回负整数、0、正整数     *      * @param date1 第一个日期对象，非null     * @param date2 第二个日期对象，非null     * @param field Calendar中的阈值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">truncatedCompareTo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Date</span> date1<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Date</span> date2<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> field<span class="token punctuation">)</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apachedav配置</title>
    <link href="/2020/05/05/apacheDav/"/>
    <url>/2020/05/05/apacheDav/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装apache"><a href="#1-安装apache" class="headerlink" title="1.安装apache"></a>1.安装apache</h2><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt-get install apache2 apache2-utils</code></pre></div><h2 id="2-启用dav模块"><a href="#2-启用dav模块" class="headerlink" title="2.启用dav模块"></a>2.启用dav模块</h2><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">sudo a2enmod dav_fssudo a2enmod davsudo a2enmod dav_lock</code></pre></div><h2 id="3-创建webdav目录及DavLockDB文件"><a href="#3-创建webdav目录及DavLockDB文件" class="headerlink" title="3.创建webdav目录及DavLockDB文件"></a>3.创建webdav目录及DavLockDB文件</h2><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">sudo mkdir &#x2F;var&#x2F;webdavsudo chown www-data:www-data &#x2F;var&#x2F;webdavsudo touch &#x2F;var&#x2F;DavLocksudo chown www-data:www-data &#x2F;var&#x2F;DavLock</code></pre></div><h2 id="4-增加访问用户-例如用户-alex"><a href="#4-增加访问用户-例如用户-alex" class="headerlink" title="4.增加访问用户(例如用户 alex)"></a>4.增加访问用户(例如用户 alex)</h2><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">sudo htpasswd -c &#x2F;var&#x2F;passwd.dav alex# 此处会输入密码2次sudo chown www-data:www-data &#x2F;var&#x2F;passwd.davsudo chmod 640 &#x2F;var&#x2F;www&#x2F;passwd.dav</code></pre></div><h2 id="5-配置虚拟主机"><a href="#5-配置虚拟主机" class="headerlink" title="5.配置虚拟主机"></a>5.配置虚拟主机</h2><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">sudo vim &#x2F;etc&#x2F;apache2&#x2F;site-available&#x2F;000-default.conf############################## 内容开始# 80端口冲突需要修改此处及 &#x2F;etc&#x2F;apache2&#x2F;ports.conf 文件&lt;VirtualHost *:80&gt;        ServerAdmin webmaster@localhost        DocumentRoot &#x2F;var&#x2F;webdav        ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.log        CustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined                DavLockDB &quot;&#x2F;var&#x2F;DavLock&quot;        &lt;Directory &#x2F;var&#x2F;webdav&#x2F;&gt;                Options Indexes MultiViews                AllowOverride None                Order allow,deny                allow from all        &lt;&#x2F;Directory&gt;        Alias &#x2F;webdav &#x2F;var&#x2F;webdav        &lt;Location &#x2F;webdav&gt;             DAV On             AuthType Basic             AuthName &quot;webdav&quot;             AuthUserFile &#x2F;var&#x2F;webdav&#x2F;passwd.dav             Require valid-user        &lt;&#x2F;Location&gt;&lt;&#x2F;VirtualHost&gt;# vim: syntax&#x3D;apache ts&#x3D;4 sw&#x3D;4 sts&#x3D;4 sr noet&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</code></pre></div><h2 id="6-重启apache服务及测试"><a href="#6-重启apache服务及测试" class="headerlink" title="6.重启apache服务及测试"></a>6.重启apache服务及测试</h2><div class="code-wrapper"><pre class="language-shell" data-language="shell"><code class="language-shell">sudo systemctl restart apache2# 命令行测试用 cadavercadaver http:&#x2F;&#x2F;127.0.0.1&#x2F;webdav# Win客户端可以使用 WinSCP</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>apache</category>
      
    </categories>
    
    
    <tags>
      
      <tag>apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apache 虚拟主机配置</title>
    <link href="/2020/05/05/apacheVirtual/"/>
    <url>/2020/05/05/apacheVirtual/</url>
    
    <content type="html"><![CDATA[<h2 id="apache虚拟主机配置"><a href="#apache虚拟主机配置" class="headerlink" title="apache虚拟主机配置"></a>apache虚拟主机配置</h2><p>apache2.4的最终配置效果:</p><p><strong>httpd.conf</strong></p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml">Listen 19010# Virtual hostsInclude conf/extra/httpd-vhosts.conf</code></pre></div><p><strong>httpd-vhosts.conf</strong></p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"># IP:Port,以端口号配置虚拟机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VirtualHost</span> <span class="token attr-name"><span class="token namespace">127.0.0.1:</span>19010</span><span class="token punctuation">></span></span>    # 网站错误时提示的联系管理员邮箱（可不配置）    ServerAdmin webmaster@dummy-host.example.com    # 虚拟主机根目录    DocumentRoot "$&#123;SRVROOT&#125;"    # 服务器名称（可不配置）    ServerName dummy-host.example.com    # 服务器别名（可不配置）    ServerAlias www.dummy-host.example.com    # 错误日志    ErrorLog "logs/dummy-host.example.com-error.log"    # 访问日志    CustomLog "logs/dummy-host.example.com-access.log" common    # 访问目录的配置，可以是其的一个子文件夹    &lt;Directory "$&#123;SRVROOT&#125;/public">        # 控制特定目录将启用哪些服务器特性Options FollowSymLinks        # 指明Apache服务器是否去找.htacess文件作为配置文件AllowOverride All        # 控制请求是否可以访问Require all granted<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Directory</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VirtualHost</span><span class="token punctuation">></span></span></code></pre></div><p>部分参数详细说明：</p><p><strong>Options FollowSymLinks</strong></p><p>Options指令是Apache配置文件中一个比较常见也比较重要的指令，Options指令可以在Apache服务器核心配置(server config)、虚拟主机配置(virtual host)、特定目录配置(directory)以及.htaccess文件中使用。</p><p>Options指令的主要作用是控制特定目录将启用哪些服务器特性。</p><p>All</p><p>表示除 <code>MultiViews</code>之外的所有特性。这也是Options指令的默认设置。</p><p>None</p><p>表示不启用任何的服务器特性。</p><p>FollowSymLinks</p><p>服务器允许在此目录中使用符号连接。如果该配置选项位于 <code>&lt;Location&gt;</code>配置段中，将会被忽略。</p><p>Indexes</p><p>如果输入的网址对应服务器上的一个文件目录，而此目录中又没有 <code>DirectoryIndex</code>指令(例如： <code>DirectoryIndex index.html index.php</code>)，那么服务器会返回由 <code>mod_autoindex</code>模块生成的一个格式化后的目录列表，并列出该目录下的所有文件。</p><p>MultiViews</p><p>允许使用 <code>mod_negotiation</code>模块提供内容协商的”多重视图”。</p><p>SymLinksIfOwnerMatch</p><p>服务器仅在符号连接与目标文件或目录的所有者具有相同的用户ID时才使用它。</p><p>ExecCGI</p><p>允许使用 <code>mod_cgi</code>模块执行CGI脚本。</p><p>Includes</p><p>允许使用 <code>mod_include</code>模块提供的服务器端包含功能。</p><p>IncludesNOEXEC</p><p>允许服务器端包含，但禁用”#exec cmd”和”#exec cgi”。但仍可以从 <code>ScriptAlias</code>目录使用”#include virtual”虚拟CGI脚本。</p><p><strong>AllowOverride All</strong></p><p>AllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写。对于AllowOverride，还可以对它指定如下一些能被重写的指令类型。</p><p>从安全性考虑，根目录的AllowOverride属性一般都配置成不允许任何Override 。</p><p>None</p><p>网站 .htaccess 文件将被完全忽略。</p><p>All</p><p>所有具有 .htaccess 作用域的指令都允许出现在 .htaccess 文件中。</p><p>AuthConfig</p><p>允许使用与认证授权相关的指令(AuthDBMGroupFile, AuthDBMUserFile, AuthGroupFile, AuthName, AuthType, AuthUserFile, Require, 等)。</p><p>FileInfo</p><p>允许使用控制文档类型的指令(DefaultType, ErrorDocument, ForceType, LanguagePriority, SetHandler, SetInputFilter, SetOutputFilter, mod_mime中的 Add* 和 Remove* 指令等等)、控制文档元数据的指令(Header, RequestHeader, SetEnvIf, SetEnvIfNoCase, BrowserMatch, CookieExpires, CookieDomain, CookieStyle, CookieTracking, CookieName)、mod_rewrite中的指令(RewriteEngine, RewriteOptions, RewriteBase, RewriteCond, RewriteRule)和mod_actions中的Action指令。</p><p>Indexes</p><p>允许使用控制目录索引的指令(AddDescription, AddIcon, AddIconByEncoding, AddIconByType, DefaultIcon, DirectoryIndex, FancyIndexing, HeaderName, IndexIgnore, IndexOptions, ReadmeName, 等)。</p><p>Limit</p><p>允许使用控制主机访问的指令(Allow, Deny, Order)。 一般 Apache 新安装 AllowOverride 默认为「None」。</p><p>一般都尽可能避免使用.htaccess文件，任何希望放在.htaccess文件中的配置，都可放在主配置的”<Directory>”段中。避免使用的原因主要有：</p><p>性能问题</p><p>如果AllowOverride启用.htaccess文件，则Apache会在每个目录中查找.htaccess文件，因此启用.htaccess都会导致性能的下降。</p><p>另外，对每一个请求，都需要读取一次.htaccess文件。</p><p>还有，Apache必须在所有上级的目录中查找.htaccess文件，以使所有有效的指令都起作用(参见指令的生效)</p><p>安全问题</p><p>允许用户自己修改apache的配置，可能会导致某些意想不到的修改，如果给予用户较少的特权而不能满足其需要，则会带来额外的技术支持请求，所以必须明确地告诉用户已经给予他们的权限，说明AllowOverride设置的值，并引导他们参阅相应的说明，以免日后生出许多麻烦。</p><p><strong>Require all granted</strong></p><p>在Apache2.2版本中，访问控制是基于客户端的主机名、IP地址以及客户端请求中的其他特征，使用Order(排序), Allow(允许), Deny(拒绝),Satisfy(满足)指令来实现。</p><p>在Apache2.4版本中，使用mod_authz_host这个新的模块，来实现访问控制，其他授权检查也以同样的方式来完成。旧的访问控制语句应当被新的授权认证机制所取代，即便Apache已经提供了mod_access_compat这一新模块来兼容旧语句。</p><p>用新方法取代旧语句实现相同的访问控制示例：</p><p>1.所有请求都被拒绝</p><p>Apache2.2 配置:</p><p>Order deny,allow #排序，先拒绝后允许</p><p>Deny from all #拒绝所有</p><p>Apache2.4 配置:</p><p>Require all denied #拒绝所有</p><p>2.所有请求都被允许</p><p>Apache2.2 配置:</p><p>Order allow,deny #排序，先允许后拒绝</p><p>Allow from all #允许所有</p><p>Apache2.4 配置:</p><p>Require all granted #允许所有</p><p><a href="http://3.example.com所有请求都被允许,其他拒绝/">http://3.example.com所有请求都被允许，其他拒绝</a></p><p>Apache2.2 配置:</p><p>Order Deny,Allow #排序，先拒绝后允许</p><p>Deny from all #拒绝所有</p><p>Allow from <a href="https://link.zhihu.com/?target=http://example.com">Example Domain</a> #<a href="https://link.zhihu.com/?target=http://%E5%85%81%E8%AE%B8example.com">允许example.com</a></p><p>Apache2.4 配置:</p><p>Require host <a href="https://link.zhihu.com/?target=http://example.com">Example Domain</a> #<a href="https://link.zhihu.com/?target=http://%E5%85%81%E8%AE%B8example.com">允许example.com</a></p><p>附：常见访问控制指令</p><p>Require all granted #允许所有来源访问</p><p>Require all denied #拒绝所有来源访问</p><p>Require expr expression #允许表达式为true时访问</p><p>Require ip 10 172.1 192.168.2 #允许特定IP段访问，多个段之前用空格隔开，每个段使用开头几项表示</p><p>Require host <a href="https://link.zhihu.com/?target=http://example.com">Example Domain</a> #只允许来自域名example.com的主机访问</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>apache</category>
      
    </categories>
    
    
    <tags>
      
      <tag>apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>homebrew教程</title>
    <link href="/2020/05/05/brew/"/>
    <url>/2020/05/05/brew/</url>
    
    <content type="html"><![CDATA[<h2 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a>homebrew</h2><p>是osx下的一个包管理工具，可以很方便的管理各类包。官方给出的定义是</p><blockquote><p>macOS缺失的软件包管理器<br> <a href="https://links.jianshu.com/go?to=https://brew.sh/">官方地址</a></p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="1、自动安装-推荐"><a href="#1、自动安装-推荐" class="headerlink" title="1、自动安装(推荐)"></a>1、自动安装(推荐)</h2><p>执行如下命令：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">/usr/bin/ruby -e <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span></code></pre></div><p>上边的命令行是两个命令，首先下载install文件，然后用系统的ruby工具安装。</p><p>尽量再bash或者zsh下安装，fish下会提示不识别’$’。</p><p>不需要使用超级权限（sudo），该文件会将HomeBrew安装至 <code>usr/local</code> 目录下。安装过程中会提示你絮语奥执行哪些动作。</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">></span> This script will install:/usr/local/bin/brew/usr/local/share/doc/homebrew/usr/local/share/man/man1/brew.1/usr/local/share/zsh/site-functions/_brew/usr/local/etc/bash_completion.d/brew/usr/local/Homebrew<span class="token operator">==</span><span class="token operator">></span> The following new directories will be created:/usr/local/bin/usr/local/etc/usr/local/include/usr/local/lib/usr/local/sbin/usr/local/share/usr/local/var/usr/local/opt/usr/local/share/zsh/usr/local/share/zsh/site-functions/usr/local/var/homebrew/usr/local/var/homebrew/linked/usr/local/Cellar/usr/local/Caskroom/usr/local/Homebrew/usr/local/Frameworks<span class="token operator">==</span><span class="token operator">></span> The Xcode Command Line Tools will be installed.</code></pre></div><p>后边还会有一些提示。继续的话会提示输入密码，等待安装完成。</p><p>安装完成后输入 <code>brew -v</code> 即可显示是否安装成功：</p><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">Homebrew 2.1.9Homebrew&#x2F;homebrew-core (git revision 84988; last commit 2019-07-29)</code></pre></div><h2 id="2、手动安装"><a href="#2、手动安装" class="headerlink" title="2、手动安装"></a>2、手动安装</h2><p>执行如下命令：</p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp">mkdir homebrew <span class="token operator">&amp;&amp;</span> curl <span class="token operator">-</span>L https<span class="token operator">:</span><span class="token comment">//github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew</span></code></pre></div><p>避免以下两点：</p><p>目录内包含空格<br> 不要安装在 <code>/sw</code> 或者 <code>/opt/local</code> 目录下<br> 当然也可以手动下载安装脚本，然后修改 <code>HOMEBREW_PREFIX</code> 变量的值，改为自己的安装目录。</p><hr><h1 id="brew常用命令"><a href="#brew常用命令" class="headerlink" title="brew常用命令"></a>brew常用命令</h1><h2 id="1、安装卸载软件"><a href="#1、安装卸载软件" class="headerlink" title="1、安装卸载软件"></a>1、安装卸载软件</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. <span class="token variable"><span class="token variable">`</span>brew --version<span class="token variable">`</span></span> 或者 <span class="token variable"><span class="token variable">`</span>brew -v<span class="token variable">`</span></span> 显示brew版本信息<span class="token number">2</span>. <span class="token variable"><span class="token variable">`</span>brew <span class="token function">install</span> <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 安装指定软件<span class="token number">3</span>. <span class="token variable"><span class="token variable">`</span>brew uninstall <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 卸载指定软件<span class="token number">4</span>. <span class="token variable"><span class="token variable">`</span>brew list<span class="token variable">`</span></span> 显示所有的已安装的软件<span class="token number">5</span>. <span class="token variable"><span class="token variable">`</span>brew search text<span class="token variable">`</span></span> 搜索本地远程仓库的软件，已安装会显示绿色的勾<span class="token number">6</span>. <span class="token variable"><span class="token variable">`</span>brew search /text/<span class="token variable">`</span></span> 使用正则表达式搜软件<span class="token number">7</span>. <span class="token variable"><span class="token variable">`</span>brew info <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 显示指定软件信息<span class="token number">8</span>. <span class="token variable"><span class="token variable">`</span>brew reinstall <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 重新安装指定软件，先卸载后安装<span class="token number">9</span>. <span class="token variable"><span class="token variable">`</span>brew <span class="token function">install</span> <span class="token operator">&lt;</span>formula<span class="token operator">></span> --build-from-source<span class="token variable">`</span></span> 源码安装指定软件，可以给定指定参数<span class="token number">10</span>. <span class="token variable"><span class="token variable">`</span>brew commands<span class="token variable">`</span></span>  列出所有可用命令<span class="token number">11</span>. brew <span class="token function">link</span> <span class="token operator">&lt;</span>apps<span class="token operator">></span> 添加路径</code></pre></div><h2 id="2、升级软件相关"><a href="#2、升级软件相关" class="headerlink" title="2、升级软件相关"></a>2、升级软件相关</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. <span class="token variable"><span class="token variable">`</span>brew update<span class="token variable">`</span></span> 自动升级homebrew （从github下载最新版本）<span class="token number">2</span>. <span class="token variable"><span class="token variable">`</span>brew outdated<span class="token variable">`</span></span> 检测已经过时的软件<span class="token number">3</span>. <span class="token variable"><span class="token variable">`</span>brew upgrade<span class="token variable">`</span></span> 升级所有已过时的软件，即列出的以过时软件<span class="token number">4</span>. <span class="token variable"><span class="token variable">`</span>brew upgrade <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 升级指定的软件<span class="token number">5</span>. <span class="token variable"><span class="token variable">`</span>brew pin <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 禁止指定软件升级<span class="token number">6</span>. <span class="token variable"><span class="token variable">`</span>brew unpin <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 解锁禁止升级<span class="token number">7</span>. <span class="token variable"><span class="token variable">`</span>brew upgrade --all<span class="token variable">`</span></span> 升级所有的软件包，包括未清理干净的旧版本的包<span class="token number">8</span>. <span class="token variable"><span class="token variable">`</span>brew edit <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 编辑软件，不会的情况下慎用<span class="token number">9</span>. <span class="token variable"><span class="token variable">`</span>brew tap<span class="token variable">`</span></span> 列出本地资源仓库，其中 homebrew 是默认仓库，其它都是第三方仓库<span class="token number">10</span>. <span class="token variable"><span class="token variable">`</span>brew tap <span class="token operator">&lt;</span>user/repo<span class="token operator">></span><span class="token variable">`</span></span> 添加第三方仓库，命名的规则按照github来定的。<span class="token punctuation">[</span>使用<span class="token punctuation">]</span><span class="token punctuation">(</span>https://links.jianshu.com/go?to<span class="token operator">=</span>https%3A%2F%2Fdocs.brew.sh%2FTaps<span class="token punctuation">)</span><span class="token number">11</span>. <span class="token variable"><span class="token variable">`</span>brew untap <span class="token operator">&lt;</span>user/repo<span class="token operator">></span><span class="token variable">`</span></span>  删除仓库<span class="token number">12</span>. <span class="token variable"><span class="token variable">`</span>brew deps <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 查看指定软件依赖于哪些软件<span class="token number">13</span>. <span class="token variable"><span class="token variable">`</span>brew uses <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 查看指定软件被哪些软件所依赖</code></pre></div><h2 id="3、清理相关"><a href="#3、清理相关" class="headerlink" title="3、清理相关"></a>3、清理相关</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">homebrew再升级软件时候不会清理相关的旧版本，在软件升级后我们可以使用如下命令清理<span class="token number">1</span>. <span class="token variable"><span class="token variable">`</span>brew cleanup -n<span class="token variable">`</span></span> 列出需要清理的内容<span class="token number">2</span>. <span class="token variable"><span class="token variable">`</span>brew cleanup <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 清理指定的软件过时包<span class="token number">3</span>. <span class="token variable"><span class="token variable">`</span>brew cleanup<span class="token variable">`</span></span> 清理所有的过时软件<span class="token number">4</span>. <span class="token variable"><span class="token variable">`</span>brew unistall <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span> 卸载指定软件<span class="token number">5</span>. <span class="token variable"><span class="token variable">`</span>brew unistall <span class="token operator">&lt;</span>fromula<span class="token operator">></span> --force<span class="token variable">`</span></span> 彻底卸载指定软件，包括旧版本通过brew安装的文件会自动设置环境变量，所以不用担心命令行不能启动的问题。 比如安装好了gradle，即可运行 <span class="token variable"><span class="token variable">`</span>gradle -v<span class="token variable">`</span></span></code></pre></div><h2 id="3、brew-services管理后台服务"><a href="#3、brew-services管理后台服务" class="headerlink" title="3、brew services管理后台服务"></a>3、brew services管理后台服务</h2><p>macOS使用 <code>launchctl</code> 命令加载开机自动运行的服务，<code>brew service</code> 可以简化 <code>lauchctl</code> 的操作。</p><p>以MySQL为例，使用launchctl启动:</p><div class="code-wrapper"><pre class="language-ruby" data-language="ruby"><code class="language-ruby">ln <span class="token operator">-</span>sfv <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>opt<span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>plist <span class="token operator">~</span><span class="token operator">/</span><span class="token constant">Library</span><span class="token operator">/</span><span class="token constant">LaunchAgents</span>launchctl load <span class="token operator">~</span><span class="token operator">/</span><span class="token constant">Library</span><span class="token operator">/</span><span class="token constant">LaunchAgents</span><span class="token operator">/</span>homebrew<span class="token punctuation">.</span>mxcl<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>plist</code></pre></div><p>如使用 <code>brew service</code> 可以简化为:</p><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">brew services start mysql</code></pre></div><ul><li>services 常用命令</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">brew services list  <span class="token comment"># 查看使用brew安装的服务列表</span>brew services run formula<span class="token operator">|</span>--all  <span class="token comment"># 启动服务（仅启动不注册）</span>brew services start formula<span class="token operator">|</span>--all  <span class="token comment"># 启动服务，并注册</span>brew services stop formula<span class="token operator">|</span>--all   <span class="token comment"># 停止服务，并取消注册</span>brew services restart formula<span class="token operator">|</span>--all  <span class="token comment"># 重启服务，并注册</span>brew services cleanup  <span class="token comment"># 清除已卸载应用的无用的配置</span></code></pre></div><ul><li>配置文件目录</li></ul><div class="code-wrapper"><pre class="language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token constant">Library</span><span class="token operator">/</span><span class="token constant">LaunchDaemons</span> <span class="token comment"># 开机自启，需要sudo</span><span class="token operator">~</span><span class="token operator">/</span><span class="token constant">Library</span><span class="token operator">/</span><span class="token constant">LaunchAgents</span> <span class="token comment"># 用户登录后自启</span></code></pre></div><p>以homebrew.mxcl.kafka.plist为例：</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">plist</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="token string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plist</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Label<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>homebrew.mxcl.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>WorkingDirectory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/usr/local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>ProgramArguments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/usr/local/opt/kafka/bin/kafka-server-start<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/usr/local/etc/kafka/server.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>RunAtLoad<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>KeepAlive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>StandardErrorPath<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/usr/local/var/log/kafka/kafka_output.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>StandardOutPath<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/usr/local/var/log/kafka/kafka_output.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plist</span><span class="token punctuation">></span></span></code></pre></div><p>在这里可以找到服务路径、启动参数、日志路径等</p><h2 id="4、brew-cask"><a href="#4、brew-cask" class="headerlink" title="4、brew cask"></a>4、brew cask</h2><p>Homebrew Cask 是 Homebrew 的扩展，借助它可以方便地在 macOS 上安装图形界面程序，即我们常用的各类应用。Homebrew 中文含义为自制、自酿酒，Cask 中文含义为桶、木桶，桶装酒是一种成品，也就是说每一个 homebrew cask 都可以直接使用的，比如 Atom 的 Cask 名称为 atom，那么就可以使用如下命令安装：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">brew cask <span class="token function">install</span> atom</code></pre></div><p>甚至也可以提交新的 Cask，比如假设有桌面客户端少数派，则用 <code>brew cask create sspai</code> 创建新的名称为 <code>sspai</code> 的 Cask，当然还要提供官网下载链接、官方主页、应用版本等信息，可以参照 <a href="https://links.jianshu.com/go?to=https://github.com/Homebrew/homebrew-cask/blob/master/CONTRIBUTING.md">官方教程</a>，此处就不再细说。</p><blockquote><p><strong>安装 Homebrew Cask【以后新版不需要安装】</strong><br> 安装好brew 后，就可以执行命令 <code>brew tap caskroom/cask</code> 获取 Homebrew Cask。</p><p><strong>注意：</strong><br> Caskroom 的 Git 地址在 2018 年 5 月 25 日从 <a href="https://links.jianshu.com/go?to=https://github.com/caskroom/homebrew-cask">https://github.com/caskroom/homebrew-cask</a> 迁移到了 <a href="https://links.jianshu.com/go?to=https://github.com/Homebrew/homebrew-cask">https://github.com/Homebrew/homebrew-cask</a><br> 所以，以后就不需要安装 Homebrew Cask</p></blockquote><h4 id="使用-Homebrew-Cask"><a href="#使用-Homebrew-Cask" class="headerlink" title="使用 Homebrew Cask"></a>使用 Homebrew Cask</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">github使用：<span class="token punctuation">[</span>https://github.com/Homebrew/homebrew-cask/blob/master/USAGE.md<span class="token punctuation">]</span><span class="token punctuation">(</span>https://links.jianshu.com/go?to<span class="token operator">=</span>https%3A%2F%2Fgithub.com%2FHomebrew%2Fhomebrew-cask%2Fblob%2Fmaster%2FUSAGE.md<span class="token punctuation">)</span><span class="token number">1</span>. <span class="token variable"><span class="token variable">`</span>brew cask <span class="token function">install</span> <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span>  安装指定图形界面软件<span class="token number">2</span>. <span class="token variable"><span class="token variable">`</span>brew cask uninstall <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span>   卸载软件<span class="token number">3</span>. <span class="token variable"><span class="token variable">`</span>brew cask uninstall --force <span class="token operator">&lt;</span>formula<span class="token operator">></span><span class="token variable">`</span></span>   卸载软件，带参数<span class="token number">4</span>. <span class="token variable"><span class="token variable">`</span>brew cask search text<span class="token variable">`</span></span>   搜索软件<span class="token number">5</span>. <span class="token variable"><span class="token variable">`</span>brew cask list<span class="token variable">`</span></span>   列出所有通过cask安装的软件<span class="token number">6</span>. 其它可以参考：<span class="token punctuation">[</span>https://github.com/Homebrew/homebrew-cask/blob/master/USAGE.md<span class="token punctuation">]</span><span class="token punctuation">(</span>https://links.jianshu.com/go?to<span class="token operator">=</span>https%3A%2F%2Fgithub.com%2FHomebrew%2Fhomebrew-cask%2Fblob%2Fmaster%2FUSAGE.md<span class="token punctuation">)</span>举例可安装的软件</code></pre></div><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装chrome</span>brew cask <span class="token function">install</span> google-chrome<span class="token comment"># 安装LaunchRocket</span>brew cask <span class="token function">install</span> launchrocket</code></pre></div><hr><h1 id="Homebrew-更换为国内镜像"><a href="#Homebrew-更换为国内镜像" class="headerlink" title="Homebrew 更换为国内镜像"></a>Homebrew 更换为国内镜像</h1><p>查看镜像地址</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">➜  ~ <span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span> ➜  Homebrew git:<span class="token punctuation">(</span>stable<span class="token punctuation">)</span> <span class="token builtin class-name">pwd</span>/usr/local/Homebrew➜  Homebrew git:<span class="token punctuation">(</span>stable<span class="token punctuation">)</span> <span class="token function">git</span> remote -vorigin  https://github.com/Homebrew/brew <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>origin  https://github.com/Homebrew/brew <span class="token punctuation">(</span>push<span class="token punctuation">)</span></code></pre></div><h2 id="1、国内镜像安装"><a href="#1、国内镜像安装" class="headerlink" title="1、国内镜像安装"></a>1、国内镜像安装</h2><ul><li>获取官网脚本 并保存名为 brew_install；</li></ul><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp">curl <span class="token operator">-</span>fsSL https<span class="token operator">:</span><span class="token comment">//raw.githubusercontent.com/Homebrew/install/master/install >> brew_install</span></code></pre></div><ul><li>编辑brew_install文件，更改脚本中的资源链接，替换成 <em>中国科学技术大学</em> 的镜像</li></ul><div class="code-wrapper"><pre class="language-objectivec" data-language="objectivec"><code class="language-objectivec"><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">BREW_REPO <span class="token operator">=</span> </span><span class="token string">"https://github.com/Homebrew/brew"</span><span class="token expression"><span class="token punctuation">.</span>freeze</span></span>BREW_REPO <span class="token operator">=</span> "git<span class="token punctuation">:</span><span class="token comment">//mirrors.ustc.edu.cn/brew.git".freeze</span></code></pre></div><ul><li>安装brew</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">&#x2F;usr&#x2F;bin&#x2F;ruby .&#x2F;brew_install</code></pre></div><h2 id="2、Homebrew替换为中科大源"><a href="#2、Homebrew替换为中科大源" class="headerlink" title="2、Homebrew替换为中科大源"></a>2、Homebrew替换为<a href="https://links.jianshu.com/go?to=https://mirrors.ustc.edu.cn/">中科大源</a></h2><ul><li>Homebrew 源使用帮助 <a href="https://links.jianshu.com/go?to=http://mirrors.ustc.edu.cn/help/brew.git.html">http://mirrors.ustc.edu.cn/help/brew.git.html</a></li><li>Homebrew Core 源使用帮助 <a href="https://links.jianshu.com/go?to=http://mirrors.ustc.edu.cn/help/homebrew-core.git.html">http://mirrors.ustc.edu.cn/help/homebrew-core.git.html</a></li><li>Homebrew Cask 源使用帮助 <a href="https://links.jianshu.com/go?to=http://mirrors.ustc.edu.cn/help/homebrew-cask.git.html">http://mirrors.ustc.edu.cn/help/homebrew-cask.git.html</a></li><li>Homebrew Bottles 源使用帮助 <a href="https://links.jianshu.com/go?to=http://mirrors.ustc.edu.cn/help/homebrew-bottles.html">http://mirrors.ustc.edu.cn/help/homebrew-bottles.html</a></li></ul><h3 id="替换默认源"><a href="#替换默认源" class="headerlink" title="替换默认源"></a>替换默认源</h3><ul><li>替换brew.git</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span>     <span class="token comment"># 其实就是定位至 /usr/local/Homebrew 目录下</span><span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git<span class="token comment"># git remote set-url origin git://mirrors.ustc.edu.cn/brew.git</span><span class="token comment"># 重置为官方地址：</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://github.com/Homebrew/brew.git</code></pre></div><ul><li>替换homebrew-core.git</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git<span class="token comment"># git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git</span><span class="token comment"># 重置为官方地址：</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://github.com/Homebrew/homebrew-core</code></pre></div><ul><li>默认不安装cask 有需要的可以替换<br> [Homebrew cask 软件仓库，提供 macOS 应用和大型二进制文件]</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span>/Library/Taps/homebrew/homebrew-cask<span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git<span class="token comment"># git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-cask.git</span><span class="token comment"># 重置为官方地址：</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span>/Library/Taps/homebrew/homebrew-cask<span class="token function">git</span> remote set-url origin https://github.com/Homebrew/homebrew-cask</code></pre></div><ul><li>brew 更新</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">brew update</code></pre></div><ul><li>检查是否有误</li></ul><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">brew doctor</code></pre></div><h3 id="替换Homebrew-Bottles源"><a href="#替换Homebrew-Bottles源" class="headerlink" title="替换Homebrew Bottles源"></a>替换Homebrew Bottles源</h3><ul><li>bash用户</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile<span class="token builtin class-name">source</span> ~/.bash_profile</code></pre></div><ul><li>zsh用户</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.zshrc<span class="token builtin class-name">source</span> ~/.zshrc</code></pre></div><h2 id="3、Homebrew替换为清华大学源"><a href="#3、Homebrew替换为清华大学源" class="headerlink" title="3、Homebrew替换为清华大学源"></a>3、Homebrew替换为<a href="https://links.jianshu.com/go?to=https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华大学源</a></h2><h3 id="替换默认源-1"><a href="#替换默认源-1" class="headerlink" title="替换默认源"></a>替换默认源</h3><ul><li>替换现有上游</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<span class="token function">git</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo homebrew/core<span class="token variable">)</span></span>"</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.gitbrew update</code></pre></div><ul><li>复原</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span> remote set-url origin https://github.com/Homebrew/brew.git<span class="token function">git</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo homebrew/core<span class="token variable">)</span></span>"</span> remote set-url origin https://github.com/Homebrew/homebrew-corebrew update</code></pre></div><h3 id="替换Homebrew-Bottles源-1"><a href="#替换Homebrew-Bottles源-1" class="headerlink" title="替换Homebrew Bottles源"></a>替换Homebrew Bottles源</h3><ul><li>bash用户</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile<span class="token builtin class-name">source</span> ~/.bash_profile</code></pre></div><ul><li>zsh用户</li></ul><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.zshrc<span class="token builtin class-name">source</span> ~/.zshrc</code></pre></div><blockquote><p>中科大源 和 清华大学源 其实在操作上是一样的，而本文档分了两部份整理，是为了区分 和更容易理解</p></blockquote><h1 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h1><h2 id="ccat-安装（查看工具）"><a href="#ccat-安装（查看工具）" class="headerlink" title="ccat 安装（查看工具）"></a>ccat 安装（查看工具）</h2><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">brew install ccat</code></pre></div><p>添加快捷方式</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改配置</span><span class="token function">vi</span> ~/.zshrc<span class="token comment"># 底部添加（覆盖掉之前的 cat功能。最好不要有换行）</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">cat</span><span class="token operator">=</span>ccat</code></pre></div><h2 id="git-安装（git插件）"><a href="#git-安装（git插件）" class="headerlink" title="git 安装（git插件）"></a>git 安装（git插件）</h2><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">brew install tig</code></pre></div><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在git项目下 输入</span>tig<span class="token comment"># 进入tig界面，上下键选择提交的信息</span><span class="token comment"># 按住 cmd 按键查看</span><span class="token comment"># q 键退出</span></code></pre></div><h4 id="安装常用的开发包"><a href="#安装常用的开发包" class="headerlink" title="安装常用的开发包"></a>安装常用的开发包</h4><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">watch</span> tmux cmake openssl imagemagick graphicsmagick gearman geoip readline autoconf multitail source-highlight autojump zsh-completions sshfs</code></pre></div><h4 id="安装常用的软件"><a href="#安装常用的软件" class="headerlink" title="安装常用的软件"></a>安装常用的软件</h4><div class="code-wrapper"><pre class="language-undefined" data-language="undefined"><code class="language-undefined">brew cask install firefox google-chrome  thunder qq phpstorm sublime-textbrew cask install alfred appcleaner  sequel-pro sketch mplayerx</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>macos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac-brew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间和字符传的转化</title>
    <link href="/2020/05/05/date/"/>
    <url>/2020/05/05/date/</url>
    
    <content type="html"><![CDATA[<h3 id="时间和字符传的转化"><a href="#时间和字符传的转化" class="headerlink" title="时间和字符传的转化"></a>时间和字符传的转化</h3><ol><li>日期转为字符串</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前时间</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打印date数据类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//打印当前时间</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//将Date类型转换成String类型   </span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印format数据类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　　　　　　　<span class="token comment">//打印当前时间</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果：<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token class-name">Tue</span> <span class="token class-name">Dec</span> <span class="token number">26</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">48</span> CST <span class="token number">2017</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">48</span></code></pre></div><ol start="2"><li>字符串转为日期</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">ParseException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">"1994-11-24 07:11:24"</span><span class="token punctuation">;</span>           <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果：<span class="token class-name">Thu</span> <span class="token class-name">Nov</span> <span class="token number">24</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">24</span> CST <span class="token number">1994</span></code></pre></div><ol start="3"><li>对日期加减操作, 获得之前, 之后的时间</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> dateTime <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将date类型转换成long类型进行计算</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//以字符串打印当前时间</span>                 <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">;</span>     <span class="token comment">//60个60分钟加5分钟，乘以1000，一小时零五分转换成毫秒</span>        dateTime <span class="token operator">=</span> dateTime <span class="token operator">+</span> time<span class="token punctuation">;</span>     <span class="token comment">//将当前时间加上一小时零五分</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印一小时零五分之后的时间</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> 结果：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">21</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">26</span></code></pre></div><h3 id="时间和数字的转化"><a href="#时间和数字的转化" class="headerlink" title="时间和数字的转化"></a>时间和数字的转化</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>drew<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token comment">/** * long类型数字转换成时分秒毫秒格式 * * @author zero 2019/04/11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConvertorTime</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> seconds <span class="token operator">=</span> <span class="token number">17854</span><span class="token punctuation">,</span> msec <span class="token operator">=</span> <span class="token number">360000</span><span class="token punctuation">;</span><span class="token comment">// 秒，毫秒</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">secToTime</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msec <span class="token operator">+</span> <span class="token string">"毫秒转换格式时间：\t"</span> <span class="token operator">+</span> <span class="token function">msecToTime</span><span class="token punctuation">(</span>msec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间（时:分：秒.毫秒）\t"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss.SSS"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">/**     * 秒转换小时-分-秒analytics/util/DateUtil.java     *     * @param seconds 秒为单位 比如..600秒     * @return 比如...2小时3分钟52秒     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">secToTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> hour <span class="token operator">=</span> seconds <span class="token operator">/</span> <span class="token number">3600</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minute <span class="token operator">=</span> <span class="token punctuation">(</span>seconds <span class="token operator">-</span> hour <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token punctuation">(</span>seconds <span class="token operator">-</span> hour <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">-</span> minute <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>hour <span class="token operator">+</span> <span class="token string">"小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minute <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>minute <span class="token operator">+</span> <span class="token string">"分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>second <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;1秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">/**     * 将int类型数字转换成时分秒毫秒的格式数据     *     * @param time long类型的数据     * @return HH:mm:ss.SSS     * @author zero 2019/04/11     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">msecToTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> timeStr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minute <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> millisecond <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"00:00:00.000"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            second <span class="token operator">=</span> time <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>            minute <span class="token operator">=</span> second <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>            millisecond <span class="token operator">=</span> time <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                timeStr <span class="token operator">=</span> <span class="token string">"00:00:"</span> <span class="token operator">+</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">unitFormat2</span><span class="token punctuation">(</span>millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>minute <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                second <span class="token operator">=</span> second <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">;</span>                timeStr <span class="token operator">=</span> <span class="token string">"00:"</span> <span class="token operator">+</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>minute<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">unitFormat2</span><span class="token punctuation">(</span>millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 数字>=3600 000的时候</span>                hour <span class="token operator">=</span> minute <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>                minute <span class="token operator">=</span> minute <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">;</span>                second <span class="token operator">=</span> second <span class="token operator">-</span> hour <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">-</span> minute <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>                timeStr <span class="token operator">=</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>hour<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>minute<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span>                    <span class="token operator">+</span> <span class="token function">unitFormat2</span><span class="token punctuation">(</span>millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> timeStr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 时分秒的格式转换</span>        <span class="token class-name">String</span> retStr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>            retStr <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            retStr <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> retStr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">unitFormat2</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 毫秒的格式转换</span>        <span class="token class-name">String</span> retStr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>            retStr <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            retStr <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>            retStr <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> retStr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre></div><h6 id="可转为工具类-gt-测试结果"><a href="#可转为工具类-gt-测试结果" class="headerlink" title="可转为工具类=&gt;测试结果"></a>可转为工具类=&gt;测试结果</h6><p><img src="https://img2018.cnblogs.com/blog/1301422/201904/1301422-20190411160134848-2110597655.png" alt="测试结果"></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh 配置教程</title>
    <link href="/2020/05/05/ssh-password/"/>
    <url>/2020/05/05/ssh-password/</url>
    
    <content type="html"><![CDATA[<h1 id="1、环境说明"><a href="#1、环境说明" class="headerlink" title="1、环境说明"></a>1、环境说明</h1><p>环境就不进行说明了，比较三次配置，一个配过九台，每每情况各有不同。只能告知各位读者，博主这里使用的是red hat红帽，估计centOS也差不太多，不过有差异也无妨，学会博主方法，相信你就不会蒙蔽了，知道怎么往对的方向走了</p><h1 id="2、场景说明"><a href="#2、场景说明" class="headerlink" title="2、场景说明"></a>2、场景说明</h1><p>要求node1免密登录到node2，这里任选了一个用户，也即是</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>hadoop<span class="token annotation punctuation">@node1 .ssh</span><span class="token punctuation">]</span>$ ssh node2</code></pre></div><h1 id="3、ssh登录原理过程"><a href="#3、ssh登录原理过程" class="headerlink" title="3、ssh登录原理过程"></a>3、ssh登录原理过程</h1><p><img src="/blog/img/ssh/ssh-2.png" alt="/blog/img/ssh/ssh-2.png"></p><p>这里看不懂也没关系，楼主详解一番：</p><p>node1发送一个请求，问：node2，你在不在？我想连接你</p><p>node2查找本地是否有node1的公钥，情况一：没有，情况二：有</p><p>情况一：</p><p>node2回复说：我在！你的公钥告诉我一下。</p><p>node1再次发送过去，自己的公钥，</p><p>node2在本地进行计算，存储，得到的一串通过公钥得到的不知道什么钥，返回给node1，说：你看看对不对</p><p>node1告知node2：对！咱们已经建立连接了</p><p>node2警惕的回复node1：你知道我登录密码多少吗？</p><p>用户输入密码…..</p><p>node1把密码封装了发过去：你看是这个不？</p><p>node2回复：对，咱们已经建立连接！</p><p>情况二：</p><p>node2一看本地有node1的公钥，心想原来认识的，然后通过公钥计算出一个不知道什么钥匙，回复：你看看是这个钥匙吗？</p><p>node1告知node2：对！咱们已经建立连接了</p><p>node2回复node1：连接建立成功！</p><p>具体几次握手，博主不知道，大致就是这么个过程</p><p>ssh配置中，会用到下面几个文件：</p><p><img src="/blog/img/ssh/ssh-1.png" alt="/blog/img/ssh/ssh-1.png"></p><p>恩~毫无PS痕迹。。。</p><p>1、需要在node1上生成公钥以及私钥，而id_rsa就是私钥，id_rsa.pub文件就是公钥文件。私钥我们这里就不用了，就用公钥，用完了为了保证安全性，你可以选择删掉，也可以不删，根据你的喜好决定，也就是pub文件</p><p>2、authorized文件，是为了方便node2的，不用询问node1的公钥本地文件，这个单词读者们需要记住，要建立这个文件！</p><p>3、known_hosts，表名node2是认识的主机，这个不用配置，读者可以不用管，可以作为了解原理。比如，一台新系统，.ssh目录下你会发现没有这个文件，但在你第一次ssh以后，这个文件就会生成。</p><p>简单说明：</p><p>​       上面做了原理说明，简单来说：就是node1想要连接node2免密登录node2，需要把node1的id_rsa.pub文件内容写进node2的authorized_keys里面。就大功告成了</p><h1 id="4、最简单配置"><a href="#4、最简单配置" class="headerlink" title="4、最简单配置"></a>4、最简单配置</h1><h2 id="4-1、生成公钥以及密钥："><a href="#4-1、生成公钥以及密钥：" class="headerlink" title="4.1、生成公钥以及密钥："></a>4.1、生成公钥以及密钥：</h2><p>在node1上：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>hadoop<span class="token annotation punctuation">@node1</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa</code></pre></div><p>一路回车。</p><p>若是不想回车，可在上面代码末尾加上，-P “”</p><h2 id="4-2、处理"><a href="#4-2、处理" class="headerlink" title="4.2、处理"></a>4.2、处理</h2><p>方法一：</p><h2 id="将node1的公钥拷贝到node2"><a href="#将node1的公钥拷贝到node2" class="headerlink" title="将node1的公钥拷贝到node2"></a>将node1的公钥拷贝到node2</h2><p>node1上(小心别把node2的id_rsa.pub覆盖掉)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>hadoop<span class="token annotation punctuation">@node1 .ssh</span><span class="token punctuation">]</span>$ scp <span class="token operator">-</span>p id_rsa<span class="token punctuation">.</span>pub hadoop<span class="token annotation punctuation">@node2</span><span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub1</code></pre></div><h2 id="然后，node2将公钥加入自身认证"><a href="#然后，node2将公钥加入自身认证" class="headerlink" title="然后，node2将公钥加入自身认证"></a>然后，node2将公钥加入自身认证</h2><p>在node2上：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>hadoop<span class="token annotation punctuation">@node1.ssh</span><span class="token punctuation">]</span>$ cat id_rsa<span class="token punctuation">.</span>pub1 <span class="token operator">></span> authorized_key</code></pre></div><p>验证查看文件authorized_key中是否有id_rsa.pub1文件的内容</p><p>方法二：</p><h2 id="直接把自己密钥拷贝到需要免密的机器上："><a href="#直接把自己密钥拷贝到需要免密的机器上：" class="headerlink" title="直接把自己密钥拷贝到需要免密的机器上："></a>直接把自己密钥拷贝到需要免密的机器上：</h2><div class="code-wrapper"><pre class="language-typescript" data-language="typescript"><code class="language-typescript">ssh<span class="token operator">-</span>copy<span class="token operator">-</span>id <span class="token operator">-</span>i <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub 用户名@ip</code></pre></div><p> 将密钥文件直接拷贝到指定用户名、ip。输入密码后，下次你当前用户执行ssh到刚刚指定的用户名ip就不用再输入密码了。</p><p>方法二较方法一方便很多</p><h2 id="4-4、验证：node1连接node2"><a href="#4-4、验证：node1连接node2" class="headerlink" title="4.4、验证：node1连接node2"></a>4.4、验证：node1连接node2</h2><p>在node1上：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>hadoop<span class="token annotation punctuation">@node1 .ssh</span><span class="token punctuation">]</span>$ ssh hadoop<span class="token annotation punctuation">@node2</span></code></pre></div><p>楼主这里没有截图，不用输入密码发现主机名变了即为成功</p><h1 id="5、调试及常规报错解决"><a href="#5、调试及常规报错解决" class="headerlink" title="5、调试及常规报错解决"></a>5、调试及常规报错解决</h1><h2 id="5-1、说明"><a href="#5-1、说明" class="headerlink" title="5.1、说明"></a>5.1、说明</h2><p>   系统日志：/var/log/secure，是个不知道干什么用的日志。ssh连接失败的报错，在这里记录</p><h2 id="5-2、报错"><a href="#5-2、报错" class="headerlink" title="5.2、报错"></a>5.2、报错</h2><p><img src="/blog/img/ssh/ssh-3.png" alt="/blog/img/ssh/ssh-3.png"></p><p>解决：相关目录权限不对，一下列出相关权限。读者根据具体去修改</p><p>​    1、755         ~</p><p>​    2、700         ~/.ssh</p><p>​    3、644         ~/.ssh/authorized_keys(博主实测，600也可，具体的读者试试也就知道了，也不麻烦)</p><p>配置文件选项未开（无图）</p><p>这里楼主没有碰到过，所以没有图，各位读者碰到修改了就好</p><p>解决： vi   /etc/ssh/sshd_config</p><p><img src="/blog/img/ssh/ssh-4.png" alt="/blog/img/ssh/ssh-4.png"></p><p>这三项需要注释掉，按博主图片中这样就好。</p>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>ssh</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA插件</title>
    <link href="/2020/04/13/ideaPlugs/"/>
    <url>/2020/04/13/ideaPlugs/</url>
    
    <content type="html"><![CDATA[<p>今天介绍一下IDEA的一些炫酷的插件，IDEA强大的插件库，不仅能给我们带来一些开发的便捷，还能体现我们的与众不同。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><h3 id="各种插件"><a href="#各种插件" class="headerlink" title="各种插件"></a>各种插件</h3><ol><li><p>activate-power-mode 和 Power mode II</p><p>根据Atom的插件activate-power-mode的效果移植到IDEA上</p><p>写代码是整个屏幕都在抖动，activate-power-mode是白的的，Power mode II色彩更酷炫点。</p></li><li><p>Background Image Plus</p><p>idea背景修改插件，让你的idea与众不同，可以设置自己喜欢的图片作为code背景。</p><p>安装成功之后重启，菜单栏的VIew标签&gt;点击Set Background Image(没安装插件是没有这个标签的)，在弹框中路由选择到本地图片，点击OK即可。</p></li><li><p>Grep console</p><p>自定义日志颜色，idea控制台可以彩色显示各种级别的log，安装完成后，在console中右键就能打开。</p><p>并且可以设置不同的日志级别的显示样式。</p><p>可以直接根据关键字搜索你想要的，搜索条件是支持正则表达式的。官网地址</p><p><a href="https://plugins.jetbrains.com/idea/plugin/7125-grep-console">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a></p></li><li><p>Free Mybatis plugin</p><p>mybatis 插件，让你的mybatis.xml像java代码一样编辑。我们开发中使用mybatis时时长需要通过mapper接口查找对应的xml中的sql语句，该插件方便了我们的操作。</p><p>安装完成重启IDEA之后，我们会看到code左侧或多出一列绿色的箭头，点击箭头我们就可以直接定位到xml相应文件的位置。</p><p>mapper</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20190408111052416.png" alt="mapper"></p><div class="code-wrapper"><pre><code>    xml</code></pre></div><p><img src="https://img-blog.csdnimg.cn/20190408111107597.png" alt="xml"></p><ol start="5"><li><p>MyBatis Log Plugin</p><p>Mybatis现在是java中操作数据库的首选，在开发的时候，我们都会把Mybatis的脚本直接输出在console中，但是默认的情况下，输出的脚本不是一个可以直接执行的。</p><p><img src="https://img-blog.csdnimg.cn/20190408111123402.png"></p><p>如果我们想直接执行，还需要在手动转化一下。</p><p>MyBatis Log Plugin 这款插件是直接将Mybatis执行的sql脚本显示出来，无需处理，可以直接复制出来执行的，如图：</p><p><img src="https://img-blog.csdnimg.cn/20190408111137891.png"></p><p>执行程序后，我们可以很清晰的看到我们执行了哪些sql脚本，而且脚本可以执行拿出来运行。</p></li><li><p>String Manipulation</p><p>强大的字符串转换工具。使用快捷键，Alt+m。</p><p><img src="https://img-blog.csdnimg.cn/20190408111154893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTY3MDM5,size_16,color_FFFFFF,t_70"></p><p>切换样式（camelCase, hyphen-lowercase, HYPHEN-UPPERCASE, snake_case, SCREAMING_SNAKE_CASE, dot.case, words lowercase, Words Capitalized, PascalCase）</p><ul><li><p>转换为SCREAMING_SNAKE_CASE (或转换为camelCase)</p></li><li><p>转换为 snake_case (或转换为camelCase)</p></li><li><p>转换为dot.case (或转换为camelCase)</p></li><li><p>转换为hyphen-case (或转换为camelCase)</p></li><li><p>转换为hyphen-case (或转换为snake_case)</p></li><li><p>转换为camelCase (或转换为Words)</p></li><li><p>转换为camelCase (或转换为lowercase words)</p></li><li><p>转换为PascalCase (或转换为camelCase)</p><p>选定文本大写</p><p>样式反转</p></li></ul></li><li><p>Alibaba Java Coding Guidelines</p><p>阿里巴巴代码规范检查插件，当然规范可以参考《阿里巴巴Java开发手册》。</p><p><img src="https://img-blog.csdnimg.cn/20190408111210770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTY3MDM5,size_16,color_FFFFFF,t_70"></p></li><li><p>Lombok</p><p>Java语言，每次写实体类的时候都需要写一大堆的setter，getter，如果bean中的属性一旦有修改、删除或增加时，需要重新生成或删除get/set等方法，给代码维护增加负担，这也是Java被诟病的一种原因。</p><p>Lombok则为我们解决了这些问题，使用了lombok的注解(@Setter,@Getter,@ToString,@@RequiredArgsConstructor,@EqualsAndHashCode或@Data)之后，就不需要编写或生成get/set等方法，很大程度上减少了代码量，而且减少了代码维护的负担。</p><p>安装完成之后，在应用Lombok的时候注意别忘了需要添加依，maven为例：</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> male<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></li><li><p>Key promoter</p><p>Key promoter 是IntelliJ IDEA的快捷键提示插件，会统计你鼠标点击某个功能的次数，提示你应该用什么快捷键，帮助记忆快捷键，等熟悉了之后可以关闭掉这个插件。</p></li><li><p>Gsonformat</p><p>可根据json数据快速生成java实体类。</p><p>自定义个javaBean(无任何内容，就一个空的类)，复制你要解析的Json，然后alt+insert弹出如下界面或者使用快捷键 Alt+S，在里面粘贴刚刚复制的Json，点击OK即可。</p><p><img src="https://img-blog.csdnimg.cn/20190408111253652.png"></p></li><li><p>Restfultookit</p><p>Spring MVC网页开发的时候，我们都是通过requestmapping的方式来定义页面的URL地址的，为了找到这个地址我们一般都是cmd+shift+F的方式进行查找，大家都知道，我们URL的命名一个是类requestmapping+方法requestmapping，查找的时候还是有那么一点不方便的，restfultookit就能很方便的帮忙进行查找。</p><p>例如：我要找到/user/add 对应的controller,那么只要Ctrl+斜杠 ,（图片来自于网络）</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20190408111322532.png"></p><div class="code-wrapper"><pre><code>就能直接定位到我们想要的controller。这个也是真心方便，当然restfultookit还为我们提供的其他的功能。根据我们的controller帮我们生成默认的测试数据，还能直接调用测试，这个可以是解决了我们每次postman调试数据时，自己傻傻的组装数据的的操作，这个更加清晰，比在console找数据包要方便多了。（图片来自于网络）</code></pre></div><ol start="12"><li><p>JRebel</p><p>JRebel是一种热部署生产力工具，修改代码后不用重新启动程序，所有的更改便可以生效。它跳过了Java开发中常见的重建、重新启动和重新部署周期。<br>使用方式参考此处:<br><a href="https://jingyan.baidu.com/article/ac6a9a5e31417c2b653eace8.html">https://jingyan.baidu.com/article/ac6a9a5e31417c2b653eace8.html</a></p></li></ol><h3 id="常用插件推荐"><a href="#常用插件推荐" class="headerlink" title="常用插件推荐"></a>常用插件推荐</h3><div class="code-wrapper"><pre><code>注：微信不支持外链，如需打开请自行复制链接</code></pre></div><ol><li><p>Gitee<br>开源中国的码云插件<br><a href="https://plugins.jetbrains.com/plugin/8383-gitee">https://plugins.jetbrains.com/plugin/8383-gitee</a></p></li><li><p>Alibaba Java Coding Guidelines<br>阿里巴巴出的代码规范检查插件<br><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></p></li><li><p>IDE Features Trainer<br>IntelliJ IDEA 官方出的学习辅助插件<br><a href="https://plugins.jetbrains.com/plugin/8554?pr=idea">https://plugins.jetbrains.com/plugin/8554?pr=idea</a></p></li><li><p>Key promoter<br>快捷键提示<br><a href="https://plugins.jetbrains.com/plugin/4455?pr=idea">https://plugins.jetbrains.com/plugin/4455?pr=idea</a></p></li><li><p>Grep Console<br>自定义设置控制台输出颜色<br><a href="https://plugins.jetbrains.com/idea/plugin/7125-grep-console">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a></p></li><li><p>String Manipulation<br>驼峰式命名和下划线命名交替变化<br><a href="https://plugins.jetbrains.com/plugin/2162?pr=idea">https://plugins.jetbrains.com/plugin/2162?pr=idea</a></p></li><li><p>CheckStyle-IDEA<br>代码规范检查<br><a href="https://plugins.jetbrains.com/plugin/1065?pr=idea">https://plugins.jetbrains.com/plugin/1065?pr=idea</a></p></li><li><p>FindBugs-IDEA<br>潜在 Bug 检查<br><a href="https://plugins.jetbrains.com/plugin/3847?pr=idea">https://plugins.jetbrains.com/plugin/3847?pr=idea</a></p></li><li><p>MetricsReloaded<br>代码复杂度检查<br><a href="https://plugins.jetbrains.com/plugin/93?pr=idea">https://plugins.jetbrains.com/plugin/93?pr=idea</a></p></li><li><p>Statistic<br>代码统计<br><a href="https://plugins.jetbrains.com/plugin/4509?pr=idea">https://plugins.jetbrains.com/plugin/4509?pr=idea</a></p></li><li><p>JRebel Plugin<br>热部署<br><a href="https://plugins.jetbrains.com/plugin/?id=4441">https://plugins.jetbrains.com/plugin/?id=4441</a></p></li><li><p>CodeGlance<br>在编辑代码最右侧，显示一块代码小地图<br><a href="https://plugins.jetbrains.com/plugin/7275?pr=idea">https://plugins.jetbrains.com/plugin/7275?pr=idea</a></p></li><li><p>GsonFormat<br>把 JSON 字符串直接实例化成类<br><a href="https://plugins.jetbrains.com/plugin/7654?pr=idea">https://plugins.jetbrains.com/plugin/7654?pr=idea</a></p></li><li><p>Markdown Navigator<br>书写 Markdown 文章<br><a href="https://plugins.jetbrains.com/plugin/7896?pr=idea">https://plugins.jetbrains.com/plugin/7896?pr=idea</a></p></li><li><p>Eclipse Code Formatter<br>使用 Eclipse 的代码格式化风格，在一个团队中如果公司有规定格式化风格，这个可以使用。<br><a href="https://plugins.jetbrains.com/plugin/6546?pr=idea">https://plugins.jetbrains.com/plugin/6546?pr=idea</a></p></li><li><p>Jindent-Source Code Formatter<br>自定义类、方法、doc、变量注释模板<br><a href="http://plugins.jetbrains.com/plugin/2170?pr=idea">http://plugins.jetbrains.com/plugin/2170?pr=idea</a></p></li><li><p>Translation<br>翻译插件<br><a href="https://github.com/YiiGuxing/TranslationPlugin">https://github.com/YiiGuxing/TranslationPlugin</a></p></li><li><p>Maven Helper<br>Maven 辅助插件<br><a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">https://plugins.jetbrains.com/plugin/7179-maven-helper</a></p></li><li><p>Properties to YAML Converter<br>把 Properties 的配置格式改为 YAML 格式<br><a href="https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter">https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter</a></p></li><li><p>Git Flow Integration<br>Git Flow 的图形界面操作<br><a href="https://plugins.jetbrains.com/plugin/7315-git-flow-integration">https://plugins.jetbrains.com/plugin/7315-git-flow-integration</a></p></li><li><p>Rainbow Brackets<br>对各个对称括号进行着色，方便查看<br><a href="https://github.com/izhangzhihao/intellij-rainbow-brackets">https://github.com/izhangzhihao/intellij-rainbow-brackets</a></p></li><li><p>MybatisX<br>mybatis 框架辅助（免费）<br><a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></p></li><li><p>Lombok Plugin<br>Lombok 功能辅助插件<br><a href="https://plugins.jetbrains.com/plugin/6317-lombok-plugin">https://plugins.jetbrains.com/plugin/6317-lombok-plugin</a></p></li><li><p>.ignore<br>各类版本控制忽略文件生成工具<br><a href="https://plugins.jetbrains.com/plugin/7495--ignore">https://plugins.jetbrains.com/plugin/7495--ignore</a></p></li><li><p>mongo4idea<br>mongo客户端<br><a href="https://github.com/dboissier/mongo4idea">https://github.com/dboissier/mongo4idea</a></p></li><li><p>iedis<br>redis客户端<br><a href="https://plugins.jetbrains.com/plugin/9228-iedis">https://plugins.jetbrains.com/plugin/9228-iedis</a></p></li><li><p>GenerateAllSetter<br>new POJO类的快速生成 set 方法<br><a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter">https://plugins.jetbrains.com/plugin/9360-generateallsetter</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>basic-component</category>
      
      <category>idea</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pyGetterSetter</title>
    <link href="/2020/04/13/py-getter-setter/"/>
    <url>/2020/04/13/py-getter-setter/</url>
    
    <content type="html"><![CDATA[<p>Java中我们在定义类的成员变量时，如果是私有属性，我们通过调用属性对应的set和get方法来获取和设置变量的值，如果我们将这种方式来用于python那么代码如下:</p><div class="code-wrapper"><pre class="language-#" data-language="#"><div class="caption"><span>coding</span></div><code class="language-#">class Money(object):    def __init__(self):        self.money &#x3D; 0     def getMoney(self):        return self.money     def setMoney(self, value):        if isinstance(value, int):            self.money &#x3D; value        else:            print(&quot;error：输入类型与预设类型不一致&quot;)  def main():    money &#x3D; Money()    money.setMoney(10)    print(money.getMoney())  if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre></div><p>但是在python中我们可以利用python属性来实现，代码如下：</p><div class="code-wrapper"><pre class="language-#" data-language="#"><div class="caption"><span>coding</span></div><code class="language-#">class Money(object):    def __init__(self):        self.money &#x3D; 0     def getMoney(self):        return self.money     def setMoney(self, value):        if isinstance(value, int):            self.money &#x3D; value        else:            print(&quot;error：输入类型与预设类型不一致&quot;)     dealValue &#x3D; property(getMoney, setMoney)  def main():    money &#x3D; Money()    money.dealValue&#x3D;100    print(money.dealValue)  if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre></div><p>也使用property完全取代get/set</p><div class="code-wrapper"><pre class="language-#" data-language="#"><div class="caption"><span>coding</span></div><code class="language-#">class Money(object):    def __init__(self):        self.__money &#x3D; 0     @property    def money(self):        return self.__money     @money.setter    def money(self, value):        if isinstance(value, int):            self.__money &#x3D; value        else:            print(&quot;error：输入类型与预设类型不一致&quot;)  def main():    a &#x3D; Money()    a.money &#x3D; 10    print(a.money)  if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>anno</title>
    <link href="/2020/04/13/spring%20anno/"/>
    <url>/2020/04/13/spring%20anno/</url>
    
    <content type="html"><![CDATA[<h2 id="Java注解获取"><a href="#Java注解获取" class="headerlink" title="Java注解获取"></a>Java注解获取</h2><p>java.lang.reflect.AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信息：</p><ul><li>方法：<T extends Annotation> T getAnnotation(Class<T> annotationClass): 返回改程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。</li><li>方法：Annotation[] getAnnotations():返回该程序元素上存在的所有注解。</li><li>方法：boolean is AnnotationPresent(Class&lt;?extends Annotation&gt; annotationClass):判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false.</li><li>方法：Annotation[] getDeclaredAnnotations()：返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>anno</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间和字符传的转化</title>
    <link href="/2020/04/13/timeordate/"/>
    <url>/2020/04/13/timeordate/</url>
    
    <content type="html"><![CDATA[<h3 id="时间和字符传的转化"><a href="#时间和字符传的转化" class="headerlink" title="时间和字符传的转化"></a>时间和字符传的转化</h3><ol><li><p>日期转为字符串</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前时间</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打印date数据类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//打印当前时间</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//将Date类型转换成String类型   </span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印format数据类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　　　　　　　<span class="token comment">//打印当前时间</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果：<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token class-name">Tue</span> <span class="token class-name">Dec</span> <span class="token number">26</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">48</span> CST <span class="token number">2017</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token number">2017</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">48</span></code></pre></div><ol start="2"><li>字符串转为日期</li></ol> <div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">ParseException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">"1994-11-24 07:11:24"</span><span class="token punctuation">;</span>           <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>结果：<span class="token class-name">Thu</span> <span class="token class-name">Nov</span> <span class="token number">24</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">24</span> CST <span class="token number">1994</span></code></pre></div><ol start="3"><li>对日期加减操作, 获得之前, 之后的时间</li></ol><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> dateTime <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将date类型转换成long类型进行计算</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//以字符串打印当前时间</span>                 <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">;</span>     <span class="token comment">//60个60分钟加5分钟，乘以1000，一小时零五分转换成毫秒</span>        dateTime <span class="token operator">=</span> dateTime <span class="token operator">+</span> time<span class="token punctuation">;</span>     <span class="token comment">//将当前时间加上一小时零五分</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印一小时零五分之后的时间</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> 结果：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">21</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">26</span></code></pre></div><h3 id="时间和数字的转化"><a href="#时间和数字的转化" class="headerlink" title="时间和数字的转化"></a>时间和数字的转化</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>drew<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span> <span class="token comment">/** * long类型数字转换成时分秒毫秒格式 * * @author Iszychen 2020/02/19 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConvertorTime</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> seconds <span class="token operator">=</span> <span class="token number">17854</span><span class="token punctuation">,</span> msec <span class="token operator">=</span> <span class="token number">360000</span><span class="token punctuation">;</span><span class="token comment">// 秒，毫秒</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">secToTime</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msec <span class="token operator">+</span> <span class="token string">"毫秒转换格式时间：\t"</span> <span class="token operator">+</span> <span class="token function">msecToTime</span><span class="token punctuation">(</span>msec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间（时:分：秒.毫秒）\t"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss.SSS"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">/**     * 秒转换小时-分-秒analytics/util/DateUtil.java     *     * @param seconds 秒为单位 比如..600秒     * @return 比如...2小时3分钟52秒     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">secToTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> hour <span class="token operator">=</span> seconds <span class="token operator">/</span> <span class="token number">3600</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minute <span class="token operator">=</span> <span class="token punctuation">(</span>seconds <span class="token operator">-</span> hour <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token punctuation">(</span>seconds <span class="token operator">-</span> hour <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">-</span> minute <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>hour <span class="token operator">+</span> <span class="token string">"小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minute <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>minute <span class="token operator">+</span> <span class="token string">"分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>second <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;1秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">/**     * 将int类型数字转换成时分秒毫秒的格式数据     *     * @param time long类型的数据     * @return HH:mm:ss.SSS     * @author Iszychen 2020/02/19     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">msecToTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> timeStr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minute <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> millisecond <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"00:00:00.000"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            second <span class="token operator">=</span> time <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>            minute <span class="token operator">=</span> second <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>            millisecond <span class="token operator">=</span> time <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                timeStr <span class="token operator">=</span> <span class="token string">"00:00:"</span> <span class="token operator">+</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">unitFormat2</span><span class="token punctuation">(</span>millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>minute <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                second <span class="token operator">=</span> second <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">;</span>                timeStr <span class="token operator">=</span> <span class="token string">"00:"</span> <span class="token operator">+</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>minute<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">unitFormat2</span><span class="token punctuation">(</span>millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 数字>=3600 000的时候</span>                hour <span class="token operator">=</span> minute <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>                minute <span class="token operator">=</span> minute <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">;</span>                second <span class="token operator">=</span> second <span class="token operator">-</span> hour <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">-</span> minute <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>                timeStr <span class="token operator">=</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>hour<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>minute<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span>                    <span class="token operator">+</span> <span class="token function">unitFormat2</span><span class="token punctuation">(</span>millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> timeStr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">unitFormat</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 时分秒的格式转换</span>        <span class="token class-name">String</span> retStr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>            retStr <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            retStr <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> retStr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">unitFormat2</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 毫秒的格式转换</span>        <span class="token class-name">String</span> retStr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>            retStr <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            retStr <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>            retStr <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> retStr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre></div><h6 id="可转为工具类-gt-测试结果"><a href="#可转为工具类-gt-测试结果" class="headerlink" title="可转为工具类=&gt;测试结果"></a>可转为工具类=&gt;测试结果</h6><p><img src="https://img2018.cnblogs.com/blog/1301422/201904/1301422-20190411160134848-2110597655.png" alt="测试结果"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2020/04/05/regular/"/>
    <url>/2020/04/05/regular/</url>
    
    <content type="html"><![CDATA[<h3 id="1-构建正则表达式"><a href="#1-构建正则表达式" class="headerlink" title="1. 构建正则表达式"></a>1. 构建正则表达式</h3><ul><li><p>pattern() 返回正则表达式的字符串形式,其实就是返回Pattern.complile(String regex)的regex参数</p><p><code>p.pattern();//返回 \d+</code></p></li><li><p>split(CharSequence input)方法,用于分隔字符串,并返回一个String[]</p><p>`String[] str = p.split(“我的QQ是:456456我的电话是:0532214我的邮箱是:<a href="mailto:&#x61;&#x61;&#97;&#x40;&#97;&#97;&#97;&#x2e;&#x63;&#111;&#x6d;">&#x61;&#x61;&#97;&#x40;&#97;&#97;&#97;&#x2e;&#x63;&#111;&#x6d;</a>“);</p><div class="code-wrapper"><pre><code>    System.out.println(Arrays.toString(str));`</code></pre></div></li><li><p>Pattern.matchers(String regex,CharSequence input)是一个静态方法,用于快速匹配字符串,该方法适合用于只匹配一次,且匹配全部字符串.</p></li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">,</span> <span class="token string">"2223"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">,</span> <span class="token string">"2223aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false,需要匹配到所有字符串才能返回true,这里aa不能匹配到</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">,</span> <span class="token string">"22bb23"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false,需要匹配到所有字符串才能返回true,这里bb不能匹配到</span></code></pre></div><ul><li>//Pattern.matcher(CharSequence input)返回一个Matcher对象.</li></ul><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Matcher</span> mq <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"22bb23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Pattern</span> mx <span class="token operator">=</span> mq<span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 p 也就是返回该 Matcher 对象是由哪个 Pattern 对象的创建的</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mx<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h3 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2. 常用方法"></a>2. 常用方法</h3><p>   Matcher.matches()/ Matcher.lookingAt()/ Matcher.find() * 三个方法均返回boolean类型,当匹配到时返回true,没匹配到则返回false</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//TODO matches()对整个字符串进行匹配,只有整个字符串都匹配了才返回true</span><span class="token class-name">Matcher</span> m1 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"22bb23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false,因为bb不能被\d+匹配,导致整个字符串匹配未成功.</span><span class="token class-name">Matcher</span> m2 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"2223"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true,因为\d+匹配到了整个字符串</span><span class="token comment">//TODO lookingAt()对前面的字符串进行匹配,只有匹配到的字符串在最前面才返回true</span><span class="token class-name">Matcher</span> m3 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"22bb23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m3<span class="token punctuation">.</span><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true,因为\d+匹配到了前面的22</span><span class="token class-name">Matcher</span> m4 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"aa2223"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m4<span class="token punctuation">.</span><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false,因为\d+不能匹配前面的aa</span><span class="token comment">// TODO find()对字符串进行匹配,匹配到的字符串可以在任何位置.</span><span class="token class-name">Matcher</span> m5 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"22bb23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m5<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true</span><span class="token class-name">Matcher</span> m6 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"aa2223"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m6<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true</span><span class="token class-name">Matcher</span> m7 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"aa2223bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m7<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true</span><span class="token class-name">Matcher</span> m8 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"aabb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m8<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false</span></code></pre></div><h3 id="3-获取位置方法"><a href="#3-获取位置方法" class="headerlink" title="3. 获取位置方法"></a>3. 获取位置方法</h3><p>   Mathcer.start()/ Matcher.end()/ Matcher.group() * * 当使用matches(),lookingAt(),find()执行匹配操作后,就可以利用以上三个方法得到更详细的信息. </p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//TODO start()返回匹配到的子字符串在字符串中的索引位置.</span><span class="token comment">//TODO end()返回匹配到的子字符串的最后一个字符在字符串中的索引位置.</span><span class="token comment">//TODO group()返回匹配到的子字符串</span><span class="token class-name">Matcher</span> mz <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"aaa2223bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mz<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配2223</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mz<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mz<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回7,返回的是2223后的索引号</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mz<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回2223</span><span class="token class-name">Matcher</span> mw <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"2223bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mw<span class="token punctuation">.</span><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配2223</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mw<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回0,由于lookingAt()只能匹配前面的字符串,所以当使用lookingAt()匹配时,start()方法总是返回0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mw<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回4</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mw<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回2223</span><span class="token class-name">Matcher</span> mn <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"123213"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mn<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配整个字符串</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mn<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配成功返回0 ,异常,因为没有匹配到</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mn<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配成功返回结尾数,因为matches()需要匹配所有字符串 不成功抛出异常</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mn<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成功返回字符 失败抛出异常</span><span class="token comment">/** * 正则表达式的分组在java中是怎么使用的. * start(),end(),group()均有一个重载方法它们是start(int i),end(int i),group(int i)专用于分组操作,Mathcer 类还有一个groupCount()用于返回有多少组. */</span><span class="token class-name">Pattern</span> p<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"([a-z]+)(\\d+)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Matcher</span> m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"aaa2223bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配aaa2223</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回2,因为有2组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回0 返回第一组匹配到的子字符串在字符串中的索引号</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回3 返回第一组匹配到的子字符串的最后一个字符在字符串中的索引位置.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回7</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回aaa,返回第一组匹配到的子字符串</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回2223,返回第二组匹配到的子字符串</span></code></pre></div><h3 id="4-分组的使用"><a href="#4-分组的使用" class="headerlink" title="4. 分组的使用"></a>4. 分组的使用</h3><p>   一段文本,里面有很多数字,而且这些数字是分开的,我们现在要将文本中所有数字都取出</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> p<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Matcher</span> m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"我的QQ是:456456 我的电话是:0532214 我的邮箱是:aaa123@aaa.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//while(m.find()) &#123;</span><span class="token comment">//System.out.println(m.group());</span><span class="token comment">//&#125;</span><span class="token comment">// TODO 或者</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"start:"</span><span class="token operator">+</span>m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" end:"</span><span class="token operator">+</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>basic-language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>regular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA常用工具类</title>
    <link href="/2020/04/04/util/"/>
    <url>/2020/04/04/util/</url>
    
    <content type="html"><![CDATA[<h2 id="JAVA常用工具类"><a href="#JAVA常用工具类" class="headerlink" title="JAVA常用工具类"></a>JAVA常用工具类</h2><p>目录<br>- 第一部分：常用的16个工具类<br>- 第二部分：常用的测试库（链接及用法）<br>- 第三部分：java开发常用工具类（正则校验）</p><h4 id="第一部分：常用的16个工具类"><a href="#第一部分：常用的16个工具类" class="headerlink" title="第一部分：常用的16个工具类"></a>第一部分：常用的16个工具类</h4><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml">https://mvnrepository.com/artifact/org.apache.commons/org.apache.commons.lang --><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>org.apache.commons.lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h5 id="一、org-apache-commons-io-IOUtils"><a href="#一、org-apache-commons-io-IOUtils" class="headerlink" title="一、org.apache.commons.io.IOUtils"></a>一、org.apache.commons.io.IOUtils</h5><p>1、closeQuietly 关闭一个IO流、socket、或者selector且不抛出异常。通常放在finally块。</p><p>2、toString 转换IO流、Uri、byte[]为String。</p><p>3、copy IO流数据复制，从输入流写到输出流中，最大支持2GB。</p><p>4、toByteArray 从输入流、URI获取byte[]。</p><p>5、write 把字节、字符等写入输出流。</p><p>6、toInputStream 把字符转换为输入流。</p><p>7、readLines 从输入流中读取多行数据，返回List</p><p>8、copyLarge 同copy，支持2GB以上数据的复制。</p><p>9、lineIterator 从输入流返回一个迭代器，</p><p>10、根据参数要求读取的数据量，全部读取，如果数据不够，则失败。</p><h5 id="二、org-apache-commons-io-FileUtils"><a href="#二、org-apache-commons-io-FileUtils" class="headerlink" title="二、org.apache.commons.io.FileUtils"></a>二、org.apache.commons.io.FileUtils</h5><p>1、deleteDirectory 删除文件夹</p><p>2、readFileToString 以字符形式读取文件内容。</p><p>3、deleteQueitly 删除文件或文件夹且不会抛出异常。</p><p>4、copyFile 复制文件</p><p>5、writeStringToFile 把字符写到目标文件，如果文件不存在，则创建。</p><p>6、forceMkdir 强制创建文件夹，如果该文件夹父级目录不存在，则创建父级。</p><p>7、write 把字符写到指定文件中</p><p>8、listFiles 列举某个目录下的文件(根据过滤器)</p><p>9、copyDirectory 复制文件夹</p><p>10、forceDelete 强制删除文件</p><h5 id="三、org-apache-commons-lang-StringUtils"><a href="#三、org-apache-commons-lang-StringUtils" class="headerlink" title="三、org.apache.commons.lang.StringUtils"></a>三、org.apache.commons.lang.StringUtils</h5><p>1、isBlank 字符串是否为空 (trim后判断)</p><p>2、isEmpty 字符串是否为空 (不trim并判断)</p><p>3、equals 字符串是否相等</p><p>4、join 合并数组为单一字符串，可传分隔符</p><p>5、split 分割字符串</p><p>6、EMPTY 空字符串</p><p>7、trimToNull trim后为空字符串则转换为null</p><p>8、replace 替换字符串</p><h5 id="四、org-apache-http-util-EntityUtils"><a href="#四、org-apache-http-util-EntityUtils" class="headerlink" title="四、org.apache.http.util.EntityUtils"></a>四、org.apache.http.util.EntityUtils</h5><p>1、toString 把Entity转换为字符串</p><p>2、consume 确保Entity中的内容全部被消费。可以看到源码里又一次消费了Entity的内容，假如用户没有消费，那调用Entity时候将会把它消费掉。</p><p>3、toByteArray 把Entity转换为字节流</p><p>4、consumeQuietly 和consume一样，但不抛异常</p><p>5、getContentCharset 获取内容的编码</p><h5 id="五、org-apache-commons-lang3-StringUtils"><a href="#五、org-apache-commons-lang3-StringUtils" class="headerlink" title="五、org.apache.commons.lang3.StringUtils"></a>五、org.apache.commons.lang3.StringUtils</h5><p>1、isBlank 字符串是否为空 (trim后判断)</p><p>2、isEmpty 字符串是否为空 (不trim并判断)</p><p>3、equals 字符串是否相等</p><p>4、join 合并数组为单一字符串，可传分隔符</p><p>5、split 分割字符串</p><p>6、EMPTY 空字符串</p><p>7、replace 替换字符串</p><p>9、capitalize 首字符大写</p><h5 id="六、org-apache-commons-io-FilenameUtils"><a href="#六、org-apache-commons-io-FilenameUtils" class="headerlink" title="六、org.apache.commons.io.FilenameUtils"></a>六、org.apache.commons.io.FilenameUtils</h5><p>1、getExtension 返回文件后缀名</p><p>2、getBaseName 返回文件名，不包含后缀名</p><p>3、getName 返回文件全名</p><p>4、concat 按命令行风格组合文件路径(详见方法注释)</p><p>5、removeExtension 删除后缀名</p><p>6、normalize 使路径正常化</p><p>7、wildcardMatch 匹配通配符</p><p>8、seperatorToUnix 路径分隔符改成unix系统格式的，即/</p><p>9、getFullPath 获取文件路径，不包括文件名</p><p>10、isExtension 检查文件后缀名是不是传入参数(List)中的一个</p><h5 id="七、org-springframework-util-StringUtils"><a href="#七、org-springframework-util-StringUtils" class="headerlink" title="七、org.springframework.util.StringUtils"></a>七、org.springframework.util.StringUtils</h5><p>1、hasText 检查字符串中是否包含文本</p><p>2、hasLength 检测字符串是否长度大于0</p><p>3、isEmpty 检测字符串是否为空（若传入为对象，则判断对象是否为null）</p><p>4、commaDelimitedStringToArray 逗号分隔的String转换为数组</p><p>5、collectionToDelimitedString 把集合转为CSV格式字符串</p><p>6、replace 替换字符串</p><p>7、delimitedListToStringArray 相当于split</p><p>8、uncapitalize 首字母小写</p><p>9、collectionToDelimitedCommaString 把集合转为CSV格式字符串</p><p>10、tokenizeToStringArray 和split基本一样，但能自动去掉空白的单词</p><h5 id="八、org-apache-commons-lang-ArrayUtils"><a href="#八、org-apache-commons-lang-ArrayUtils" class="headerlink" title="八、org.apache.commons.lang.ArrayUtils"></a>八、org.apache.commons.lang.ArrayUtils</h5><p>1、contains 是否包含某字符串</p><p>2、addAll 添加所有</p><p>3、clone 克隆一个数组</p><p>4、isEmpty 是否空数组</p><p>5、add 向数组添加元素</p><p>6、subarray 截取数组</p><p>7、indexOf 查找下标</p><p>8、isEquals 比较数组是否相等</p><p>9、toObject 基础类型数据数组转换为对应的Object数组</p><h5 id="九、org-apache-commons-lang-StringEscapeUtils支持编码转换"><a href="#九、org-apache-commons-lang-StringEscapeUtils支持编码转换" class="headerlink" title="九、org.apache.commons.lang.StringEscapeUtils支持编码转换"></a>九、org.apache.commons.lang.StringEscapeUtils支持编码转换</h5><p>escapeXml unEscapeXml。</p><p>此外，还支持html、java、JavaScript、sql、csv等</p><h5 id="十、org-apache-http-client-utils-URLEncodedUtils"><a href="#十、org-apache-http-client-utils-URLEncodedUtils" class="headerlink" title="十、org.apache.http.client.utils.URLEncodedUtils"></a>十、org.apache.http.client.utils.URLEncodedUtils</h5><p>1、format 格式化参数，返回一个HTTP POST或者HTTP PUT可用 application/x-www-form-urlencoded字符串</p><p>2、parse 把String或者URI等转换为List</p><h5 id="十一、org-apache-commons-codec-digest-DigestUtils"><a href="#十一、org-apache-commons-codec-digest-DigestUtils" class="headerlink" title="十一、org.apache.commons.codec.digest.DigestUtils"></a>十一、org.apache.commons.codec.digest.DigestUtils</h5><p>1、md5Hex MD5加密，返回32位</p><p>2、sha1Hex SHA-1加密</p><p>3、sha256Hex SHA-256加密</p><p>4、sha512Hex SHA-512加密</p><p>5、md5 MD5加密，返回16位</p><h5 id="十二、org-apache-commons-collections-CollectionUtils"><a href="#十二、org-apache-commons-collections-CollectionUtils" class="headerlink" title="十二、org.apache.commons.collections.CollectionUtils"></a>十二、org.apache.commons.collections.CollectionUtils</h5><p>1、isEmpty 是否为空</p><p>2、select 根据条件筛选集合元素</p><p>3、transform 根据指定方法处理集合元素，类似List的map()。</p><p>4、filter 过滤元素，雷瑟List的filter()</p><p>5、find 基本和select一样</p><p>6、collect 和transform 差不多一样，但是返回新数组</p><p>7、forAllDo 调用每个元素的指定方法。</p><p>8、isEqualCollection 判断两个集合是否一致</p><h5 id="十三、org-apache-commons-lang3-ArrayUtils"><a href="#十三、org-apache-commons-lang3-ArrayUtils" class="headerlink" title="十三、org.apache.commons.lang3.ArrayUtils"></a>十三、org.apache.commons.lang3.ArrayUtils</h5><p>1、contains 是否包含某字符串</p><p>2、addAll 添加所有</p><p>3、clone 克隆一个数组</p><p>4、isEmpty 是否空数组</p><p>5、add 向数组添加元素</p><p>6、subarray 截取数组</p><p>7、indexOf 查找下标</p><p>8、isEquals 比较数组是否相等</p><p>9、toObject 基础类型数据数组转换为对应的Object数组</p><h5 id="十四、org-apache-commons-beanutils-PropertyUtils"><a href="#十四、org-apache-commons-beanutils-PropertyUtils" class="headerlink" title="十四、org.apache.commons.beanutils.PropertyUtils"></a>十四、org.apache.commons.beanutils.PropertyUtils</h5><p>1、getProperty 获取对象属性值</p><p>2、setProperty 设置对象属性值</p><p>3、getPropertyDiscriptor 获取属性描述器</p><p>4、isReadable 检查属性是否可访问</p><p>5、copyProperties 复制属性值，从一个对象到另一个对象</p><p>6、getPropertyDiscriptors 获取所有属性描述器</p><p>7、isWriteable 检查属性是否可写</p><p>8、getPropertyType 获取对象属性类型</p><h5 id="十五、org-apache-commons-lang3-StringEscapeUtils"><a href="#十五、org-apache-commons-lang3-StringEscapeUtils" class="headerlink" title="十五、org.apache.commons.lang3.StringEscapeUtils"></a>十五、org.apache.commons.lang3.StringEscapeUtils</h5><p>支持编码转换</p><p>escapeJson unEscapeJson。</p><p>此外，还支持html、java、JavaScript、sql、csv、xml等</p><h5 id="十六、org-apache-commons-beanutils-BeanUtils"><a href="#十六、org-apache-commons-beanutils-BeanUtils" class="headerlink" title="十六、org.apache.commons.beanutils.BeanUtils"></a>十六、org.apache.commons.beanutils.BeanUtils</h5><p>1、copyPeoperties 复制属性值，从一个对象到另一个对象</p><p>2、getProperty 获取对象属性值</p><p>3、setProperty 设置对象属性值</p><p>4、populate 根据Map给属性复制</p><p>5、copyPeoperty 复制单个值，从一个对象到另一个对象。</p><p>6、cloneBean 克隆</p><h4 id="第二部分：常用的测试库（链接及用法）"><a href="#第二部分：常用的测试库（链接及用法）" class="headerlink" title="第二部分：常用的测试库（链接及用法）"></a>第二部分：常用的测试库（链接及用法）</h4><p>以下提供一些类库的测试，希望对大家有用：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td><li>Java命令行选项解析之Commons-CLI &amp; Args4J &amp; JCommander<a href="http://rensanning.iteye.com/blog/2161201" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java调用Native API之JNA<a href="http://rensanning.iteye.com/blog/2154075" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java执行SSH/SCP之JSch<a href="http://rensanning.iteye.com/blog/2109675" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java元组类型之javatuples<a href="http://rensanning.iteye.com/blog/2068554" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java读写Excel之POI超入门<a href="http://rensanning.iteye.com/blog/1538591" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java操作PDF之iText超入门<a href="http://rensanning.iteye.com/blog/1538689" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java构建工具之Ant<a href="http://rensanning.iteye.com/blog/1540336" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java模板引擎之FreeMarker<a href="http://rensanning.iteye.com/blog/1540613" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java生成缩略图之Thumbnailator<a href="http://rensanning.iteye.com/blog/1545708" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java日期计算之Joda-Time<a href="http://rensanning.iteye.com/blog/1546652" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java工具类之Apache的Commons Lang和BeanUtils<a href="http://rensanning.iteye.com/blog/1547845" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java集合框架之fastutil<a href="http://rensanning.iteye.com/blog/1548162" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java网络通信之HttpClient<a href="http://rensanning.iteye.com/blog/1550436" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java解析HTML之NekoHTML<a href="http://rensanning.iteye.com/blog/1551831" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java读写CSV之SuperCSV<a href="http://rensanning.iteye.com/blog/1552053" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java作业调度之Quartz<a href="http://rensanning.iteye.com/blog/1836263" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java压缩解压ZIP之Zip4j<a href="http://rensanning.iteye.com/blog/1836727" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java嵌入式NoSQL数据库之Berkeley DB Java Edition<a href="http://rensanning.iteye.com/blog/1872481" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java单元测试之邮件测试-GreenMail<a href="http://rensanning.iteye.com/blog/2001617" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java单元测试之代码覆盖率-JaCoCo<a href="http://rensanning.iteye.com/blog/2002371" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java日文分词器之Kuromoji<a href="http://rensanning.iteye.com/blog/2008575" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java数学表达式计算(Expression Evaluator)<a href="http://rensanning.iteye.com/blog/2011558" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java检测无用代码之UCDetector<a href="http://rensanning.iteye.com/blog/2012010" rel="nofollow" target="_blank">详细内容</a></li></td></tr><tr><td></td><td><li>Java简化臃肿代码之Lombok<a href="http://rensanning.iteye.com/blog/1930853" rel="nofollow" target="_blank">详细内容</a></li></td></tr></tbody></table><p>|      | </ul>                                                        </p><h4 id="第三部分：java开发常用工具类（正则校验）原文链接"><a href="#第三部分：java开发常用工具类（正则校验）原文链接" class="headerlink" title="第三部分：java开发常用工具类（正则校验）原文链接"></a>第三部分：java开发常用工具类（正则校验）<a href="https://www.cnblogs.com/ITzhangda/p/9146452.html">原文链接</a></h4><p>==java正则表达式的匹配包括：==</p><ul><li><p>邮箱，手机，姓名，昵称，身份证号，银行卡号等；</p></li><li><p>生成6位随机数；</p></li><li><p>对url中字符串进行编码和解码；</p></li><li><p>获取客户端ip地址；</p></li><li><p>获取系统当前时间；</p></li><li><p>生成32位编码不含横线；</p></li><li><p>生成MD5编码；</p></li><li><p>通过身份证获取性别；</p></li><li><p>通过身份证获取生日；</p></li><li><p>手机号中间4位替换成星号；</p></li><li><p>邮箱地址加星号；</p></li><li><p>生成随机密码；</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>util</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Json处理</title>
    <link href="/2020/04/02/Json/"/>
    <url>/2020/04/02/Json/</url>
    
    <content type="html"><![CDATA[<h3 id="FastJSON"><a href="#FastJSON" class="headerlink" title="FastJSON"></a>FastJSON</h3><ol><li><p>引入依赖或者Jar包</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div></li><li><p>将Map转成JSON</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> mapJson <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapJson<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出&#123;"key1":"value1","key2":"value2"&#125;</span><span class="token comment">//TODO 泛型的反序列化（使用TypeReference传入类型信息）</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>mapJson<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></li><li><p>将List&lt;Map转成JSON</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> jsonstr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonstr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [&#123;"key1":"value1","key2":"value2"&#125;,&#123;"key1":"value3","key2":"value4"&#125;]</span><span class="token comment">// TODO String objJson = JSON.toJSONString(Object object, boolean prettyFormat)</span><span class="token comment">//TODO 传入一个对象和一个布尔类型（是否格式化），将对象转成格式化后的JSON字符串。</span><span class="token class-name">String</span> listJson1 <span class="token operator">=</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listJson1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> listJson2 <span class="token operator">=</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listJson2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TODO 使用单引号</span><span class="token class-name">String</span> listJson <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>UseSingleQuotes</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [&#123;'key1':'value1','key2':'value2'&#125;,&#123;'key1':'value3','key2':'value4'&#125;]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listJson<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TODO集合反序列化</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>listJson<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">:</span> list1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出 value1 value2 value3 value4</span></code></pre></div></li><li><p>Java bean</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">UserDO</span> userDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userDO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userDO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"乐乐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userDO<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> userJson <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userJson<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 &#123;"age":12,"id":1,"username":"乐乐"&#125;</span><span class="token comment">//TODO 普通序列化</span><span class="token class-name">UserDO</span> user1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserDO</span><span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>userJson<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 12</span><span class="token comment">//TODO 指定Class信息反序列化</span><span class="token class-name">UserDO</span> user2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>userJson<span class="token punctuation">,</span><span class="token class-name">UserDO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 乐乐</span></code></pre></div></li><li><p>时间</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//TODO （1）FastJSON将java.util.Date转成long。</span><span class="token class-name">String</span> dateJson1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateJson1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 1547900848449</span><span class="token comment">//TODO（2）使用SerializerFeature特性格式化日期。</span><span class="token class-name">String</span> dateJson2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteDateUseDateFormat</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateJson2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 "2019-01-19 20:29:24"</span><span class="token comment">//TODO（3）指定输出日期格式</span><span class="token class-name">String</span> dateJson3 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONStringWithDateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateJson3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出"2019-01-19 20:32:34"</span></code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux_systemctl</title>
    <link href="/2020/04/02/linux%20systemctl/"/>
    <url>/2020/04/02/linux%20systemctl/</url>
    
    <content type="html"><![CDATA[<h1 id="systemctl配置管理文件详解"><a href="#systemctl配置管理文件详解" class="headerlink" title="systemctl配置管理文件详解"></a>systemctl配置管理文件详解</h1><ul><li>文件存放位置：（共三处）<br>/etc/systemd/system/<br>/usr/lib/systemd/system<br>/lib/systemd/system</li></ul><h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$cat</span> sshd.service    <span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>    <span class="token assign-left variable">Description</span><span class="token operator">=</span>OpenSSH server daemon    <span class="token assign-left variable">Documentation</span><span class="token operator">=</span>man:sshd<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> man:sshd_config<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token assign-left variable">After</span><span class="token operator">=</span>network.target sshd-keygen.service    <span class="token assign-left variable">Wants</span><span class="token operator">=</span>sshd-keygen.service    <span class="token punctuation">[</span>Service<span class="token punctuation">]</span>    <span class="token assign-left variable">Type</span><span class="token operator">=</span>forking    <span class="token assign-left variable">PIDFile</span><span class="token operator">=</span>/var/run/sshd.pid    <span class="token assign-left variable">EnvironmentFile</span><span class="token operator">=</span>/etc/sysconfig/sshd    <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/sbin/sshd <span class="token variable">$OPTIONS</span>    <span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill -HUP <span class="token variable">$MAINPID</span>    <span class="token assign-left variable">KillMode</span><span class="token operator">=</span>process    <span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-failure    <span class="token assign-left variable">RestartSec</span><span class="token operator">=</span>42s    <span class="token punctuation">[</span>Install<span class="token punctuation">]</span>    <span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target</code></pre></div><h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span> 区块：启动顺序与依赖关系。Description：当前配置文件的描述信息。Documentation：帮助信息。After：表示当前服务是在那个服务后面启动，一般定义为网络服务启动后启动Wants：表示sshd.service与sshd-keygen.service之间存在”弱依赖”关系，即如果”sshd-keygen.service”启动失败或停止运行，不影响sshd.service继续执行。<span class="token punctuation">[</span>Service<span class="token punctuation">]</span> 区块：启动行为Type：定义启动类型。PIDFile：服务的pid文件路径。EnvironmentFile：指定当前服务依赖的环境参数文件。ExecStart：定义启动进程时执行的命令。ExecReload：重启服务时执行的命令KillMode：定义 Systemd 如何停止 sshd 服务。Restart：定义了 sshd 退出后，Systemd 的重启方式。RestartSec：表示Systemd重启服务之前，需要等待的秒数。上面的例子设为等待42秒。<span class="token punctuation">[</span>Install<span class="token punctuation">]</span> 区块：定义如何安装这个配置文件，即怎样做到开机启动。WantedBy：表示该服务所在的 Target。multi-user.target表明当系统以多用户方式（默认的运行级别）启动时，这个服务需要被自动运行。</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tar 命令</title>
    <link href="/2020/04/02/linux%20tar/"/>
    <url>/2020/04/02/linux%20tar/</url>
    
    <content type="html"><![CDATA[<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><ul><li>-c: 建立压缩档案<br>-x：解压<br>-t：查看内容<br>-r：向压缩归档文件末尾追加文件<br>-u：更新原压缩包中的文件</li></ul><p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。</p><ul><li>-z：有gzip属性的<br>-j：有bz2属性的<br>-Z：有compress属性的<br>-v：显示所有过程<br>-O：将文件解开到标准输出</li></ul><p>下面的参数-f是必须的</p><p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p><p># tar -cf all.tar *.jpg<br>这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</p><p># tar -rf all.tar *.gif<br>这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。</p><p># tar -uf all.tar logo.gif<br>这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。</p><p># tar -tf all.tar<br>这条命令是列出all.tar包中所有文件，-t是列出文件的意思</p><p># tar -xf all.tar<br>这条命令是解出all.tar包中所有文件，-t是解开的意思</p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成jpg.tar </p><p>tar -czf jpg.tar.gz *.jpg  //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</p><p> tar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</p><p>tar -cZf jpg.tar.Z *.jpg  //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</p><p>rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux</p><p>zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>tar -xvf file.tar //解压 tar包</p><p>tar -xzvf file.tar.gz //解压tar.gz</p><p>tar -xjvf file.tar.bz2  //解压 tar.bz2</p><p>tar -xZvf file.tar.Z  //解压tar.Z</p><p>unrar e file.rar //解压rar</p><p>unzip file.zip //解压zip</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、*.tar 用 tar -xvf 解压</p><p>2、*.gz 用 gzip -d或者gunzip 解压</p><p>3、*.tar.gz和*.tgz 用 tar -xzf 解压</p><p>4、*.bz2 用 bzip2 -d或者用bunzip2 解压</p><p>5、*.tar.bz2用tar -xjf 解压</p><p>6、*.Z 用 uncompress 解压</p><p>7、*.tar.Z 用tar -xZf 解压</p><p>8、*.rar 用 unrar e解压</p><p>9、*.zip 用 unzip 解压</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">-A或--catenate 新增文件到已存在的备份文件。-b<span class="token operator">&lt;</span>区块数目<span class="token operator">></span>或--blocking-factor<span class="token operator">=</span><span class="token operator">&lt;</span>区块数目<span class="token operator">></span> 设置每笔记录的区块数目，每个区块大小为12Bytes。-B或--read-full-records 读取数据时重设区块大小。-c或--create 建立新的备份文件。-C<span class="token operator">&lt;</span>目的目录<span class="token operator">></span>或--directory<span class="token operator">=</span><span class="token operator">&lt;</span>目的目录<span class="token operator">></span> 切换到指定的目录。-d或--diff或--compare 对比备份文件内和文件系统上的文件的差异。-f<span class="token operator">&lt;</span>备份文件<span class="token operator">></span>或--file<span class="token operator">=</span><span class="token operator">&lt;</span>备份文件<span class="token operator">></span> 指定备份文件。-F<span class="token operator">&lt;</span>Script文件<span class="token operator">></span>或--info-script<span class="token operator">=</span><span class="token operator">&lt;</span>Script文件<span class="token operator">></span> 每次更换磁带时，就执行指定的Script文件。-g或--listed-incremental 处理GNU格式的大量备份。-G或--incremental 处理旧的GNU格式的大量备份。-h或--dereference 不建立符号连接，直接复制该连接所指向的原始文件。-i或--ignore-zeros 忽略备份文件中的0 Byte区块，也就是EOF。-k或--keep-old-files 解开备份文件时，不覆盖已有的文件。-K<span class="token operator">&lt;</span>文件<span class="token operator">></span>或--starting-file<span class="token operator">=</span><span class="token operator">&lt;</span>文件<span class="token operator">></span> 从指定的文件开始还原。-l或--one-file-system 复制的文件或目录存放的文件系统，必须与tar指令执行时所处的文件系统相同，否则不予复制。-L<span class="token operator">&lt;</span>媒体容量<span class="token operator">></span>或-tape-length<span class="token operator">=</span><span class="token operator">&lt;</span>媒体容量<span class="token operator">></span> 设置存放每体的容量，单位以1024 Bytes计算。-m或--modification-time 还原文件时，不变更文件的更改时间。-M或--multi-volume 在建立，还原备份文件或列出其中的内容时，采用多卷册模式。-N<span class="token operator">&lt;</span>日期格式<span class="token operator">></span>或--newer<span class="token operator">=</span><span class="token operator">&lt;</span>日期时间<span class="token operator">></span> 只将较指定日期更新的文件保存到备份文件里。-o或--old-archive或--portability 将资料写入备份文件时使用V7格式。-O或--stdout 把从备份文件里还原的文件输出到标准输出设备。-p或--same-permissions 用原来的文件权限还原文件。-P或--absolute-names 文件名使用绝对名称，不移除文件名称前的<span class="token string">"/"</span>号。-r或--append 新增文件到已存在的备份文件的结尾部分。-R或--block-number 列出每个信息在备份文件中的区块编号。-s或--same-order 还原文件的顺序和备份文件内的存放顺序相同。-S或--sparse 倘若一个文件内含大量的连续0字节，则将此文件存成稀疏文件。-t或--list 列出备份文件的内容。-T<span class="token operator">&lt;</span>范本文件<span class="token operator">></span>或--files-from<span class="token operator">=</span><span class="token operator">&lt;</span>范本文件<span class="token operator">></span> 指定范本文件，其内含有一个或多个范本样式，让tar解开或建立符合设置条件的文件。-u或--update 仅置换较备份文件内的文件更新的文件。-U或--unlink-first 解开压缩文件还原文件之前，先解除文件的连接。-v或--verbose 显示指令执行过程。-V<span class="token operator">&lt;</span>卷册名称<span class="token operator">></span>或--label<span class="token operator">=</span><span class="token operator">&lt;</span>卷册名称<span class="token operator">></span> 建立使用指定的卷册名称的备份文件。-w或--interactive 遭遇问题时先询问用户。-W或--verify 写入备份文件后，确认文件正确无误。-x或--extract或--get 从备份文件中还原文件。-X<span class="token operator">&lt;</span>范本文件<span class="token operator">></span>或--exclude-from<span class="token operator">=</span><span class="token operator">&lt;</span>范本文件<span class="token operator">></span> 指定范本文件，其内含有一个或多个范本样式，让ar排除符合设置条件的文件。-z或--gzip或--ungzip 通过gzip指令处理备份文件。-Z或--compress或--uncompress 通过compress指令处理备份文件。-<span class="token operator">&lt;</span>设备编号<span class="token operator">></span><span class="token operator">&lt;</span>存储密度<span class="token operator">></span> 设置备份用的外围设备编号及存放数据的密度。--after-date<span class="token operator">=</span><span class="token operator">&lt;</span>日期时间<span class="token operator">></span> 此参数的效果和指定<span class="token string">"-N"</span>参数相同。--atime-preserve 不变更文件的存取时间。--backup<span class="token operator">=</span><span class="token operator">&lt;</span>备份方式<span class="token operator">></span>或--backup 移除文件前先进行备份。--checkpoint 读取备份文件时列出目录名称。--concatenate 此参数的效果和指定<span class="token string">"-A"</span>参数相同。--confirmation 此参数的效果和指定<span class="token string">"-w"</span>参数相同。--delete 从备份文件中删除指定的文件。--exclude<span class="token operator">=</span><span class="token operator">&lt;</span>范本样式<span class="token operator">></span> 排除符合范本样式的文件。--group<span class="token operator">=</span><span class="token operator">&lt;</span>群组名称<span class="token operator">></span> 把加入设备文件中的文件的所属群组设成指定的群组。--help 在线帮助。--ignore-failed-read 忽略数据读取错误，不中断程序的执行。--new-volume-script<span class="token operator">=</span><span class="token operator">&lt;</span>Script文件<span class="token operator">></span> 此参数的效果和指定<span class="token string">"-F"</span>参数相同。--newer-mtime 只保存更改过的文件。--no-recursion 不做递归处理，也就是指定目录下的所有文件及子目录不予处理。--null 从null设备读取文件名称。--numeric-owner 以用户识别码及群组识别码取代用户名称和群组名称。--owner<span class="token operator">=</span><span class="token operator">&lt;</span>用户名称<span class="token operator">></span> 把加入备份文件中的文件的拥有者设成指定的用户。--posix 将数据写入备份文件时使用POSIX格式。--preserve 此参数的效果和指定<span class="token string">"-ps"</span>参数相同。--preserve-order 此参数的效果和指定<span class="token string">"-A"</span>参数相同。--preserve-permissions 此参数的效果和指定<span class="token string">"-p"</span>参数相同。--record-size<span class="token operator">=</span><span class="token operator">&lt;</span>区块数目<span class="token operator">></span> 此参数的效果和指定<span class="token string">"-b"</span>参数相同。--recursive-unlink 解开压缩文件还原目录之前，先解除整个目录下所有文件的连接。--remove-files 文件加入备份文件后，就将其删除。--rsh-command<span class="token operator">=</span><span class="token operator">&lt;</span>执行指令<span class="token operator">></span> 设置要在远端主机上执行的指令，以取代rsh指令。--same-owner 尝试以相同的文件拥有者还原文件。--suffix<span class="token operator">=</span><span class="token operator">&lt;</span>备份字尾字符串<span class="token operator">></span> 移除文件前先行备份。--totals 备份文件建立后，列出文件大小。--use-compress-program<span class="token operator">=</span><span class="token operator">&lt;</span>执行指令<span class="token operator">></span> 通过指定的指令处理备份文件。--version 显示版本信息。--volno-file<span class="token operator">=</span><span class="token operator">&lt;</span>编号文件<span class="token operator">></span> 使用指定文件内的编号取代预设的卷册编号。</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>system</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>welcome!</title>
    <link href="/2020/04/02/luna-welcome/"/>
    <url>/2020/04/02/luna-welcome/</url>
    
    <content type="html"><![CDATA[<h2 id="welcome"><a href="#welcome" class="headerlink" title="welcome!"></a>welcome!</h2><p>欢迎访问本系统~希望能帮助到您.</p><p>来自-&gt;<em>luna</em></p>]]></content>
    
    
    <categories>
      
      <category>luna</category>
      
    </categories>
    
    
    <tags>
      
      <tag>welcome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shiro</title>
    <link href="/2020/04/02/shiro/"/>
    <url>/2020/04/02/shiro/</url>
    
    <content type="html"><![CDATA[<h2 id="Shiro框架中有三个核心概念：Subject-，SecurityManager和Realms。"><a href="#Shiro框架中有三个核心概念：Subject-，SecurityManager和Realms。" class="headerlink" title="Shiro框架中有三个核心概念：Subject ，SecurityManager和Realms。"></a>Shiro框架中有三个核心概念：Subject ，SecurityManager和Realms。</h2><h3 id="1-Subject"><a href="#1-Subject" class="headerlink" title="1    Subject"></a>1    Subject</h3><p>Subject一词是一个安全术语，其基本意思是“当前的操作用户”。称之为“用户”并不准确，因为“用户”一词通常跟人相关。在安全领域，术语“Subject”可以是人，也可以是第三方进程、后台帐户（Daemon Account）、定时作业（Corn Job）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。但考虑到大多数目的和用途，你可以把它认为是Shiro的“用户”概念。<br>在程序中你都能轻易的获得Subject，允许在任何需要的地方进行安全操作。每个Subject对象都必须与一个SecurityManager进行绑定，你访问Subject对象其实都是在与SecurityManager里的特定Subject进行交互。</p><h3 id="2-SecurityManager"><a href="#2-SecurityManager" class="headerlink" title="2    SecurityManager"></a>2    SecurityManager</h3><p>Subject的“幕后”推手是SecurityManager。Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。它是Shiro框架的核心，充当“保护伞”，引用了多个内部嵌套安全组件，它们形成了对象图。但是，一旦SecurityManager及其内部对象图配置好，它就会退居幕后，应用开发人员几乎把他们的所有时间都花在Subject API调用上。<br>那么，如何设置SecurityManager呢？嗯，这要看应用的环境。例如，Web应用通常会在Web.xml中指定一个Shiro Servlet Filter，这会创建SecurityManager实例，如果你运行的是一个独立应用，你需要用其他配置方式，但有很多配置选项。<br>一个应用几乎总是只有一个SecurityManager实例。它实际是应用的Singleton（尽管不必是一个静态Singleton）。跟Shiro里的几乎所有组件一样，SecurityManager的缺省实现是POJO，而且可用POJO兼容的任何配置机制进行配置 - 普通的Java代码、Spring XML、YAML、.properties和.ini文件等。基本来讲，能够实例化类和调用JavaBean兼容方法的任何配置形式都可使用。</p><h3 id="3-Realms"><a href="#3-Realms" class="headerlink" title="3    Realms"></a>3    Realms</h3><p>Shiro的第三个也是最后一个概念是Realm。Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当与像用户帐户这类安全相关数据进行交互，执行认证（登录）和授权（访问控制）时，Shiro会从应用配置的Realm中查找很多内容。<br>从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。<br>Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件 等。如果缺省的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。<br>象其他内部组件一样，由SecurityManager来管理如何使用Realms来获取安全的身份数据。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>middle-component</category>
      
      <category>shiro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springMVC</title>
    <link href="/2020/04/02/spring%20mvc/"/>
    <url>/2020/04/02/spring%20mvc/</url>
    
    <content type="html"><![CDATA[<h3 id="1-页面模板解析"><a href="#1-页面模板解析" class="headerlink" title="1.页面模板解析"></a>1.页面模板解析</h3><p>可通过使用thymeleaf模板对应的spring配置，默认已经配置好，可手动配置其他路径</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">spring.thymeleaf.prefix&#x3D;classpath:&#x2F;templates&#x2F;</code></pre></div><p>并且引入依赖</p><div class="code-wrapper"><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- SpringBoot集成thymeleaf模板 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><p>即可在控制层实现页面跳转</p><div class="code-wrapper"><pre class="language-Java" data-language="Java"><code class="language-Java">@Controller@RequestMapping(path &#x3D; &quot;crud&quot;)public class UserController extends BaseController &#123;@Autowiredprivate UserDAO userDAO;@Autowiredprivate DepartmentDAO departmentDAO;&#x2F;** * 查询所有用户 * * @return *&#x2F;@GetMapping(&quot;&#x2F;users&quot;)public String list(ModelMap map) &#123;List&lt;UserDO&gt; all &#x3D; userDAO.getAll();map.put(&quot;users&quot;, all);return &quot;user&#x2F;users&quot;; &#x2F;&#x2F;对应templates&#x2F;user&#x2F;users.html&#125;</code></pre></div><p>在页面访问 {ip：端口}/项目路径/curd/users 即可访问对应页面。其中若<br>注解 @@RequestMapping(path = “crud”) 为 “/curd” 或者 @GetMapping(“users”)为”/users” 都可。</p><h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2. 重定向"></a>2. 重定向</h3><p>重定向可带参数或者不带参数</p><ol><li>不带参数<div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 添加用户请求 * SpringMVC 自动将属性绑定  入参名和对象属性名一样 * * @return */</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span>  <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">UserDO</span> userDO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交的用户信息"</span> <span class="token operator">+</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>userDAO<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//　TODO　添加完成后来到用户列表页面 redirect: 重定向地址  forward:转发地址 不能有空格</span><span class="token keyword">return</span> <span class="token string">"redirect:/crud/users"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></li><li>带参数传递</li></ol><div class="code-wrapper"><pre class="language-txt" data-language="txt"><code class="language-txt">redirect 目标有三种构建方式：1. 使用 redirect: 前缀url方式构建目标url2. 使用 RedirectView 类型指定目标, 推荐使用这个,3. 使用 ModelAndView 类型指定目标, ModelAndView 视图名默认是forward, 所以对于redirect, 需要加上 redirect: 前缀传参和取参方式:1. 传参: 以字符串的形式构建目标url, 可以使用 query variable的格式拼url. 取参: @RequestParam()来fetch2. 传参: redirectAttributes.addAttribute() 加的attr. 取参: @RequestParam()来fetch3. 传参: redirectAttributes.addFlashAttribute() 加的attr. 取参: @ModelAttribute()来fetchFlash attribute的特点:1. addFlashAttribute() 可以是任意类型的数据(不局限在String等基本类型), addAttribute()只能加基本类型的参数.2. addFlashAttribute() 加的 attr, 不会出现在url 地址栏上.3. addFlashAttribute() 加的 attr, 一旦fetch后, 就会自动清空, 非常适合 form 提交后 feedback Message.</code></pre></div><h3 id="3-请求转发"><a href="#3-请求转发" class="headerlink" title="3. 请求转发"></a>3. 请求转发</h3><p>在Spring MVC 中, 构建forward 目标有两种方式:</p><ol><li>以字符串的形式构建目标url, url 需要加上 forward: 前缀</li><li>使用 ModelAndView 对象来设置转发的forward目标, viewName 可以省略 forward: 前缀, viewName 应该是目标url, 而不是目标视图的函数名.<br>传参方式:</li><li>以字符串的形式构建目标url, 可以使用 query variable的格式拼url</li><li>使用 ModelAndView 对象来增加 attribute Object, 其结果也是在拼接url.<br>取参的方式: 可以使用 @RequestParam 来取参. </li></ol><p>eg：Java代码</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*     * forward 示例: 以字符串的形式构建目标url, url 需要加上 forward: 前缀     * */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/forwardTest1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">forwardTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/forwardTarget?param1=v1&amp;param2=v2"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*     * forward 示例: 使用 ModelAndView() 设置转发的目标url     * */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/forwardTest2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">forwardTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> mav<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"/forwardTarget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绝对路径OK</span>        <span class="token comment">//ModelAndView mav=new ModelAndView("forwardTarget"); // 相对路径也OK</span>        mav<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mav<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mav <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/forwardTarget"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">forwardTargetView</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> param1<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> param2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> param1<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> param2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"forwardTarget"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*     * redirect 目标有三种构建方式     * 1. 使用 redirect: 前缀url方式构建目标url     * 2. 使用 RedirectView 类型指定目标     * 3. 使用 ModelAndView 类型指定目标, ModelAndView 视图名默认是forward, 所以对于redirect, 需要加上 redirect: 前缀     * */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/noParamRedirect"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedirectView</span> <span class="token function">noParamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedirectView</span> redirectTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedirectView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redirectTarget<span class="token punctuation">.</span><span class="token function">setContextRelative</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redirectTarget<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"noParamTarget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redirectTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/noParamTarget"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">redirectTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"noParamTarget"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/withParamRedirect"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedirectView</span> <span class="token function">withParamRedirect</span><span class="token punctuation">(</span><span class="token class-name">RedirectAttributes</span> redirectAttributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedirectView</span> redirectTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedirectView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redirectTarget<span class="token punctuation">.</span><span class="token function">setContextRelative</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redirectTarget<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"withParamTarget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redirectAttributes<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redirectAttributes<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redirectTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/withParamTarget"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">withParamTarget</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> param1<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> param2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> param1<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> param2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"withParamTarget"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/withFlashRedirect"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedirectView</span> <span class="token function">withFlashTest</span><span class="token punctuation">(</span><span class="token class-name">RedirectAttributes</span> redirectAttributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedirectView</span> redirectTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedirectView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redirectTarget<span class="token punctuation">.</span><span class="token function">setContextRelative</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redirectTarget<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"withFlashTarget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redirectAttributes<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redirectAttributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"flashParam"</span><span class="token punctuation">,</span> <span class="token string">"flashValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redirectTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*     * redirectAttributes.addAttribute加的attr, 使用 @RequestParam()来fetch     * redirectAttributes.addFlashAttribute()加的attr, 使用 @ModelAttribute()来fetch     * */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/withFlashTarget"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">withFlashTarget</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> param<span class="token punctuation">,</span>            <span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"flashParam"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> flashParam<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"flashParam"</span><span class="token punctuation">,</span> flashParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"withFlashTarget"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/input"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"input"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*     * form 提交后, 如果form数据有问题, 使用redirectAttributes.addFlashAttribute()加上 flash message.     * addFlashAttribute()可以是任意类型的数据(不局限在String等基本类型)     * addFlashAttribute() 加的 attr, 不会出现在url 地址栏上.     * addFlashAttribute() 加的 attr, 一旦fetch后, 就会自动清空, 非常适合 form 提交后 feedback Message.     * */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/submit"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedirectView</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">RedirectAttributes</span> redirectAttributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> passed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>passed<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RedirectView</span> redirectTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedirectView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redirectTarget<span class="token punctuation">.</span><span class="token function">setContextRelative</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redirectTarget<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redirectAttributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"errorMessage"</span><span class="token punctuation">,</span> <span class="token string">"some error information here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> redirectTarget<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RedirectView</span> redirectTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedirectView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redirectTarget<span class="token punctuation">.</span><span class="token function">setContextRelative</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redirectTarget<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"inputOK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> redirectTarget<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springmvc</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
